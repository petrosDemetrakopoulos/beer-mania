------- FILE beer_mania.bas.asm LEVEL 1 PASS 2
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE beer_mania.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE beer_mania.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 01	   pfscore    =	1
      5  5000 ????
      6  5000 ????	       00 eb	   _Ch0_Duration4 =	x
      7  5000 ????
      8  5000 ????	       00 ea	   _Ch0_Duration3 =	w
      9  5000 ????
     10  5000 ????	       00 e9	   _Ch0_Duration2 =	v
     11  5000 ????
     12  5000 ????	       00 e4	   _Ch0_Duration1 =	q
     13  5000 ????
     14  5000 ????	       00 e0	   _Ch0_Sound =	m
     15  5000 ????
     16  5000 ????	       00 e1	   rand16     =	n
     17  5000 ????
     18  5000 ????	       00 d6	   bmp_player0_index =	c
     19  5000 ????
     20  5000 ????	       00 d7	   missed     =	d
     21  5000 ????
     22  5000 ????	       00 4b	   logo_height =	75
     23  5000 ????
     24  5000 ????	       00 1c	   logo_color =	$1C
     25  5000 ????
     26  5000 ????	       00 d5	   addvalue   =	b
     27  5000 ????
     28  5000 ????	       00 d4	   frame      =	a
     29  5000 ????
     30  5000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
     31  5000 ????
     32  5000 ????	       00 2b	   vblank_time =	43
     33  5000 ????	       00 25	   overscan_time =	37
     34  5000 ????	       00 01	   PFcolors   =	1
     35  5000 ????	       00 01	   no_blank_lines =	1
     36  5000 ????	       00 01	   player1colors =	1
     37  5000 ????	       00 03	   bs_mask    =	3
     38  5000 ????	       00 10	   bankswitch =	16
     39  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????			  -	      ifconst	superchip
    199  5000 ????			  -playfieldbase =	$10D0
    200  5000 ????			  -	      include	superchip.h
    201  5000 ????				      else
    202  5000 ????	       00 a4	   playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????				      ifnconst	pfres
    231  5000 ????	       00 a4	   playfield  =	playfieldbase
    232  5000 ????			  -	      else
    233  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE beer_mania.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 01	   pfscore    =	1
      5  5000 ????
      6  5000 ????	       00 eb	   _Ch0_Duration4 =	x
      7  5000 ????
      8  5000 ????	       00 ea	   _Ch0_Duration3 =	w
      9  5000 ????
     10  5000 ????	       00 e9	   _Ch0_Duration2 =	v
     11  5000 ????
     12  5000 ????	       00 e4	   _Ch0_Duration1 =	q
     13  5000 ????
     14  5000 ????	       00 e0	   _Ch0_Sound =	m
     15  5000 ????
     16  5000 ????	       00 e1	   rand16     =	n
     17  5000 ????
     18  5000 ????	       00 d6	   bmp_player0_index =	c
     19  5000 ????
     20  5000 ????	       00 d7	   missed     =	d
     21  5000 ????
     22  5000 ????	       00 4b	   logo_height =	75
     23  5000 ????
     24  5000 ????	       00 1c	   logo_color =	$1C
     25  5000 ????
     26  5000 ????	       00 d5	   addvalue   =	b
     27  5000 ????
     28  5000 ????	       00 d4	   frame      =	a
     29  5000 ????
     30  5000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
     31  5000 ????
     32  5000 ????	       00 2b	   vblank_time =	43
     33  5000 ????	       00 25	   overscan_time =	37
     34  5000 ????	       00 01	   PFcolors   =	1
     35  5000 ????	       00 01	   no_blank_lines =	1
     36  5000 ????	       00 01	   player1colors =	1
     37  5000 ????	       00 03	   bs_mask    =	3
     38  5000 ????	       00 10	   bankswitch =	16
     39  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE beer_mania.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .L00 		;  set romsize 16k
     36  1000
     37  1000				   .L01 		;  set kernel_options player1colors pfcolors no_blank_lines
     38  1000
     39  1000				   .L02 		;  set optimization speed
     40  1000
     41  1000				   .L03 		;  set smartbranching on
     42  1000
     43  1000				   .L04 		;  set optimization noinlinedata
     44  1000
     45  1000				   .L05 		;  set optimization inlinerand
     46  1000
     47  1000				   .
     48  1000							;
     49  1000
     50  1000				   .
     51  1000							;
     52  1000
     53  1000				   .L06 		;  set tv ntsc
     54  1000
     55  1000				   .
     56  1000							;
     57  1000
     58  1000				   .
     59  1000							;
     60  1000
     61  1000				   .L07 		;  pfclear
     62  1000
     63  1000		       a9 00		      LDA	#0
     64  1002		       85 ee		      sta	temp7
     65  1004		       a9 90		      lda	#>(ret_point1-1)
     66  1006		       48		      pha
     67  1007		       a9 19		      lda	#<(ret_point1-1)
     68  1009		       48		      pha
     69  100a		       a9 f2		      lda	#>(pfclear-1)
     70  100c		       48		      pha
     71  100d		       a9 8f		      lda	#<(pfclear-1)
     72  100f		       48		      pha
     73  1010		       a5 ee		      lda	temp7
     74  1012		       48		      pha
     75  1013		       8a		      txa
     76  1014		       48		      pha
     77  1015		       a2 04		      ldx	#4
     78  1017		       4c eb ff 	      jmp	BS_jsr
     79  101a				   ret_point1
     80  101a				   .
     81  101a							;
     82  101a
     83  101a				   .
     84  101a							;
     85  101a
     86  101a				   .L08 		;  AUDV0  =  0  :  AUDV1  =  0
     87  101a
     88  101a		       a9 00		      LDA	#0
     89  101c		       85 19		      STA	AUDV0
     90  101e		       85 1a		      STA	AUDV1
     91  1020				   .
     92  1020							;
     93  1020
     94  1020				   .
     95  1020							;
     96  1020
     97  1020				   .L09 		;  dim _Bit0_Reset_Restrainer	=  y
     98  1020
     99  1020				   .
    100  1020							;
    101  1020
    102  1020				   .
    103  1020							;
    104  1020
    105  1020				   .L010		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
    106  1020
    107  1020		       a9 00		      LDA	#0
    108  1022		       85 d4		      STA	a
    109  1024		       85 d5		      STA	b
    110  1026		       85 d6		      STA	c
    111  1028		       85 d7		      STA	d
    112  102a		       85 d8		      STA	e
    113  102c		       85 d9		      STA	f
    114  102e		       85 da		      STA	g
    115  1030		       85 db		      STA	h
    116  1032		       85 dc		      STA	i
    117  1034				   .L011		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
    118  1034
    119  1034		       a9 00		      LDA	#0
    120  1036		       85 dd		      STA	j
    121  1038		       85 de		      STA	k
    122  103a		       85 df		      STA	l
    123  103c		       85 e0		      STA	m
    124  103e		       85 e1		      STA	n
    125  1040		       85 e2		      STA	o
    126  1042		       85 e3		      STA	p
    127  1044		       85 e4		      STA	q
    128  1046		       85 e5		      STA	r
    129  1048				   .L012		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0
    130  1048
    131  1048		       a9 00		      LDA	#0
    132  104a		       85 e6		      STA	s
    133  104c		       85 e7		      STA	t
    134  104e		       85 e8		      STA	u
    135  1050		       85 e9		      STA	v
    136  1052		       85 ea		      STA	w
    137  1054		       85 eb		      STA	x
    138  1056		       85 ec		      STA	y
    139  1058		       85 ed		      STA	z
    140  105a				   .L013		;  var0  =  0	:  var1  =  0  :  var2	=  0  :  var3  =  0  :	var4  =  0
    141  105a
    142  105a		       a9 00		      LDA	#0
    143  105c		       85 a4		      STA	var0
    144  105e		       85 a5		      STA	var1
    145  1060		       85 a6		      STA	var2
    146  1062		       85 a7		      STA	var3
    147  1064		       85 a8		      STA	var4
    148  1066				   .L014		;  var5  =  0	:  var6  =  0  :  var7	=  0  :  var8  =  0
    149  1066
    150  1066		       a9 00		      LDA	#0
    151  1068		       85 a9		      STA	var5
    152  106a		       85 aa		      STA	var6
    153  106c		       85 ab		      STA	var7
    154  106e		       85 ac		      STA	var8
    155  1070				   .
    156  1070							;
    157  1070
    158  1070				   .L015		;  dim frame = a
    159  1070
    160  1070				   .L016		;  dim addvalue = b
    161  1070
    162  1070				   .L017		;  const logo_color = $1C
    163  1070
    164  1070				   .L018		;  const logo_height = 75
    165  1070
    166  1070				   .L019		;  dim missed = d
    167  1070
    168  1070				   .L020		;  rem ** we define this because player 0 has multiple frames...
    169  1070
    170  1070				   .L021		;  dim bmp_player0_index = c
    171  1070
    172  1070				   .L022		;  dim rand16 = n
    173  1070
    174  1070				   .
    175  1070							;
    176  1070
    177  1070				   .L023		;  dim _Ch0_Sound  =  m
    178  1070
    179  1070				   .L024		;  dim _Ch0_Duration1	=  q
    180  1070
    181  1070				   .L025		;  dim _Ch0_Duration2	=  v
    182  1070
    183  1070				   .L026		;  dim _Ch0_Duration3	=  w
    184  1070
    185  1070				   .L027		;  dim _Ch0_Duration4	=  x
    186  1070
    187  1070				   .
    188  1070							;
    189  1070
    190  1070				   .L028		;  const pfscore  =  1
    191  1070
    192  1070				   .L029		;  COLUP0 = $B4
    193  1070
    194  1070		       a9 b4		      LDA	#$B4
    195  1072		       85 06		      STA	COLUP0
    196  1074				   .L030		;  pfscore1 = %10101010
    197  1074
    198  1074		       a9 aa		      LDA	#%10101010
    199  1076		       85 f2		      STA	pfscore1
    200  1078				   .L031		;  scorecolor = $B4
    201  1078
    202  1078		       a9 b4		      LDA	#$B4
    203  107a		       85 a3		      STA	scorecolor
    204  107c				   .L032		;  pfscorecolor = $B4
    205  107c
    206  107c		       a9 b4		      LDA	#$B4
    207  107e		       85 f4		      STA	pfscorecolor
    208  1080				   .
    209  1080							;
    210  1080
    211  1080				   .titlepage
    212  1080							; titlepage
    213  1080
    214  1080				   .L033		;  gosub titledrawscreen bank2
    215  1080
    216  1080		       85 ee		      sta	temp7
    217  1082		       a9 90		      lda	#>(ret_point2-1)
    218  1084		       48		      pha
    219  1085		       a9 97		      lda	#<(ret_point2-1)
    220  1087		       48		      pha
    221  1088		       a9 b0		      lda	#>(.titledrawscreen-1)
    222  108a		       48		      pha
    223  108b		       a9 05		      lda	#<(.titledrawscreen-1)
    224  108d		       48		      pha
    225  108e		       a5 ee		      lda	temp7
    226  1090		       48		      pha
    227  1091		       8a		      txa
    228  1092		       48		      pha
    229  1093		       a2 02		      ldx	#2
    230  1095		       4c eb ff 	      jmp	BS_jsr
    231  1098				   ret_point2
    232  1098				   .
    233  1098							;
    234  1098
    235  1098				   .L034		;  if joy0fire  ||  switchreset then player0y = 200 : goto gamestart
    236  1098
    237  1098		       24 0c		      bit	INPT4
    238  109a		       30 03		      BMI	.skipL034
    239  109c				   .condpart0
    240  109c		       4c a6 90 	      jmp	.condpart1
    241  109f				   .skipL034
    242  109f		       a9 01		      lda	#1
    243  10a1		       2c 82 02 	      bit	SWCHB
    244  10a4		       d0 07		      BNE	.skip0OR
    245  10a6				   .condpart1
    246  10a6		       a9 c8		      LDA	#200
    247  10a8		       85 85		      STA	player0y
    248  10aa		       4c b0 90 	      jmp	.gamestart
    249  10ad
    250  10ad				   .skip0OR
    251  10ad				   .L035		;  goto titlepage
    252  10ad
    253  10ad		       4c 80 90 	      jmp	.titlepage
    254  10b0
    255  10b0				   .
    256  10b0							;
    257  10b0
    258  10b0				   .L036		;  rem *** Our fake game start. If you move the joystick it goes back to the
    259  10b0
    260  10b0				   .L037		;  rem *** title screen.
    261  10b0
    262  10b0				   .gamestart
    263  10b0							; gamestart
    264  10b0
    265  10b0				   .L038		;  _Ch0_Sound	=  0
    266  10b0
    267  10b0		       a9 00		      LDA	#0
    268  10b2		       85 e0		      STA	_Ch0_Sound
    269  10b4				   .L039		;  pfscore1  =  %10101010
    270  10b4
    271  10b4		       a9 aa		      LDA	#%10101010
    272  10b6		       85 f2		      STA	pfscore1
    273  10b8				   .
    274  10b8							;
    275  10b8
    276  10b8				   .L040		;  player0x  =  50
    277  10b8
    278  10b8		       a9 32		      LDA	#50
    279  10ba		       85 80		      STA	player0x
    280  10bc				   .L041		;  player0y  =  80
    281  10bc
    282  10bc		       a9 50		      LDA	#80
    283  10be		       85 85		      STA	player0y
    284  10c0				   .
    285  10c0							;
    286  10c0
    287  10c0				   .L042		;  player1x  =  20
    288  10c0
    289  10c0		       a9 14		      LDA	#20
    290  10c2		       85 81		      STA	player1x
    291  10c4				   .L043		;  player1y  =  20
    292  10c4
    293  10c4		       a9 14		      LDA	#20
    294  10c6		       85 86		      STA	player1y
    295  10c8				   .
    296  10c8							;
    297  10c8
    298  10c8				   .L044		;  playfield:
    299  10c8
    300  10c8				  -	      ifconst	pfres
    301  10c8				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
    302  10c8					      else
    303  10c8		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
    304  10ca					      endif
    305  10ca		       4c f9 90 	      jmp	pflabel0
    306  10cd				   PF_data0
    307  10cd		       ff ff		      .byte.b	%11111111, %11111111
    308  10cf					      if	(pfwidth>2)
    309  10cf		       ff ff		      .byte.b	%11111111, %11111111
    310  10d1					      endif
    311  10d1		       ff ff		      .byte.b	%11111111, %11111111
    312  10d3					      if	(pfwidth>2)
    313  10d3		       ff ff		      .byte.b	%11111111, %11111111
    314  10d5					      endif
    315  10d5		       ff ff		      .byte.b	%11111111, %11111111
    316  10d7					      if	(pfwidth>2)
    317  10d7		       ff ff		      .byte.b	%11111111, %11111111
    318  10d9					      endif
    319  10d9		       ff ff		      .byte.b	%11111111, %11111111
    320  10db					      if	(pfwidth>2)
    321  10db		       ff ff		      .byte.b	%11111111, %11111111
    322  10dd					      endif
    323  10dd		       ff ff		      .byte.b	%11111111, %11111111
    324  10df					      if	(pfwidth>2)
    325  10df		       ff ff		      .byte.b	%11111111, %11111111
    326  10e1					      endif
    327  10e1		       ff ff		      .byte.b	%11111111, %11111111
    328  10e3					      if	(pfwidth>2)
    329  10e3		       ff ff		      .byte.b	%11111111, %11111111
    330  10e5					      endif
    331  10e5		       ff ff		      .byte.b	%11111111, %11111111
    332  10e7					      if	(pfwidth>2)
    333  10e7		       ff ff		      .byte.b	%11111111, %11111111
    334  10e9					      endif
    335  10e9		       ff ff		      .byte.b	%11111111, %11111111
    336  10eb					      if	(pfwidth>2)
    337  10eb		       ff ff		      .byte.b	%11111111, %11111111
    338  10ed					      endif
    339  10ed		       ff ff		      .byte.b	%11111111, %11111111
    340  10ef					      if	(pfwidth>2)
    341  10ef		       ff ff		      .byte.b	%11111111, %11111111
    342  10f1					      endif
    343  10f1		       ff ff		      .byte.b	%11111111, %11111111
    344  10f3					      if	(pfwidth>2)
    345  10f3		       ff ff		      .byte.b	%11111111, %11111111
    346  10f5					      endif
    347  10f5		       ff ff		      .byte.b	%11111111, %11111111
    348  10f7					      if	(pfwidth>2)
    349  10f7		       ff ff		      .byte.b	%11111111, %11111111
    350  10f9					      endif
    351  10f9				   pflabel0
    352  10f9		       bd cd 90 	      lda	PF_data0,x
    353  10fc		       95 a4		      sta	playfield,x
    354  10fe		       ca		      dex
    355  10ff		       10 f8		      bpl	pflabel0
    356  1101				   .
    357  1101							;
    358  1101
    359  1101				   .L045		;  pfcolors:
    360  1101
    361  1101		       a9 9e		      lda	# $9E
    362  1103		       85 08		      sta	COLUPF
    363  1105				  -	      ifconst	pfres
    364  1105				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
    365  1105					      else
    366  1105		       a9 f5		      lda	#>(pfcolorlabel13-84)
    367  1107					      endif
    368  1107		       85 f1		      sta	pfcolortable+1
    369  1109				  -	      ifconst	pfres
    370  1109				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
    371  1109					      else
    372  1109		       a9 04		      lda	#<(pfcolorlabel13-84)
    373  110b					      endif
    374  110b		       85 f0		      sta	pfcolortable
    375  110d				   .
    376  110d							;
    377  110d
    378  110d				   .L046		;  player0:
    379  110d
    380  110d		       a2 80		      LDX	#<playerL046_0
    381  110f		       86 8a		      STX	player0pointerlo
    382  1111		       a9 f5		      LDA	#>playerL046_0
    383  1113		       85 8b		      STA	player0pointerhi
    384  1115		       a9 09		      LDA	#9
    385  1117		       85 8e		      STA	player0height
    386  1119				   .
    387  1119							;
    388  1119
    389  1119				   .L047		;  player1:
    390  1119
    391  1119		       a2 8a		      LDX	#<playerL047_1
    392  111b		       86 8c		      STX	player1pointerlo
    393  111d		       a9 f5		      LDA	#>playerL047_1
    394  111f		       85 8d		      STA	player1pointerhi
    395  1121		       a9 07		      LDA	#7
    396  1123		       85 8f		      STA	player1height
    397  1125				   .
    398  1125							;
    399  1125
    400  1125				   .L048		;  player0color:
    401  1125
    402  1125		       a2 92		      LDX	#<playercolorL048_0
    403  1127		       86 90		      STX	player0color
    404  1129		       a9 f5		      LDA	#>playercolorL048_0
    405  112b		       85 91		      STA	player0color+1
    406  112d				   .
    407  112d							;
    408  112d
    409  112d				   .L049		;  player1color:
    410  112d
    411  112d		       a2 9d		      LDX	#<playercolorL049_1
    412  112f		       86 87		      STX	player1color
    413  1131		       a9 f5		      LDA	#>playercolorL049_1
    414  1133		       85 88		      STA	player1color+1
    415  1135				   .
    416  1135							;
    417  1135
    418  1135				   .gameloop
    419  1135							; gameloop
    420  1135
    421  1135				   .L050		;  f = f + 1
    422  1135
    423  1135		       e6 d9		      INC	f
    424  1137				   .
    425  1137							;
    426  1137
    427  1137				   .L051		;  if f  =  10 then player0:
    428  1137
    429  1137		       a5 d9		      LDA	f
    430  1139		       c9 0a		      CMP	#10
    431  113b		       d0 0c		      BNE	.skipL051
    432  113d				   .condpart2
    433  113d		       a2 a5		      LDX	#<player2then_0
    434  113f		       86 8a		      STX	player0pointerlo
    435  1141		       a9 f5		      LDA	#>player2then_0
    436  1143		       85 8b		      STA	player0pointerhi
    437  1145		       a9 09		      LDA	#9
    438  1147		       85 8e		      STA	player0height
    439  1149				   .skipL051
    440  1149				   .L052		;  if f  =  10 then player0color:
    441  1149
    442  1149		       a5 d9		      LDA	f
    443  114b		       c9 0a		      CMP	#10
    444  114d		       d0 08		      BNE	.skipL052
    445  114f				   .condpart3
    446  114f		       a2 af		      LDX	#<playercolor3then_0
    447  1151		       86 90		      STX	player0color
    448  1153		       a9 f5		      LDA	#>playercolor3then_0
    449  1155		       85 91		      STA	player0color+1
    450  1157				   .skipL052
    451  1157				   .L053		;  if f  =  20 then player0:
    452  1157
    453  1157		       a5 d9		      LDA	f
    454  1159		       c9 14		      CMP	#20
    455  115b		       d0 0c		      BNE	.skipL053
    456  115d				   .condpart4
    457  115d		       a2 b9		      LDX	#<player4then_0
    458  115f		       86 8a		      STX	player0pointerlo
    459  1161		       a9 f5		      LDA	#>player4then_0
    460  1163		       85 8b		      STA	player0pointerhi
    461  1165		       a9 09		      LDA	#9
    462  1167		       85 8e		      STA	player0height
    463  1169				   .skipL053
    464  1169				   .L054		;  if f  =  20 then player0color:
    465  1169
    466  1169		       a5 d9		      LDA	f
    467  116b		       c9 14		      CMP	#20
    468  116d		       d0 08		      BNE	.skipL054
    469  116f				   .condpart5
    470  116f		       a2 c3		      LDX	#<playercolor5then_0
    471  1171		       86 90		      STX	player0color
    472  1173		       a9 f5		      LDA	#>playercolor5then_0
    473  1175		       85 91		      STA	player0color+1
    474  1177				   .skipL054
    475  1177				   .
    476  1177							;
    477  1177
    478  1177				   .L055		;  if f  =  30 then player0:
    479  1177
    480  1177		       a5 d9		      LDA	f
    481  1179		       c9 1e		      CMP	#30
    482  117b		       d0 0c		      BNE	.skipL055
    483  117d				   .condpart6
    484  117d		       a2 cd		      LDX	#<player6then_0
    485  117f		       86 8a		      STX	player0pointerlo
    486  1181		       a9 f5		      LDA	#>player6then_0
    487  1183		       85 8b		      STA	player0pointerhi
    488  1185		       a9 09		      LDA	#9
    489  1187		       85 8e		      STA	player0height
    490  1189				   .skipL055
    491  1189				   .
    492  1189							;
    493  1189
    494  1189				   .L056		;  player1y  =  player1y  +  1
    495  1189
    496  1189		       e6 86		      INC	player1y
    497  118b				   .L057		;  if f = 30 then f = 0
    498  118b
    499  118b		       a5 d9		      LDA	f
    500  118d		       c9 1e		      CMP	#30
    501  118f		       d0 04		      BNE	.skipL057
    502  1191				   .condpart7
    503  1191		       a9 00		      LDA	#0
    504  1193		       85 d9		      STA	f
    505  1195				   .skipL057
    506  1195				   .
    507  1195							;
    508  1195
    509  1195				   .L058		;  if joy0right then REFP0  =	0
    510  1195
    511  1195		       2c 80 02 	      bit	SWCHA
    512  1198		       30 04		      BMI	.skipL058
    513  119a				   .condpart8
    514  119a		       a9 00		      LDA	#0
    515  119c		       85 0b		      STA	REFP0
    516  119e				   .skipL058
    517  119e				   .L059		;  if joy0left then REFP0  =  8
    518  119e
    519  119e		       2c 80 02 	      bit	SWCHA
    520  11a1		       70 04		      BVS	.skipL059
    521  11a3				   .condpart9
    522  11a3		       a9 08		      LDA	#8
    523  11a5		       85 0b		      STA	REFP0
    524  11a7				   .skipL059
    525  11a7				   .
    526  11a7							;
    527  11a7
    528  11a7				   .L060		;  drawscreen
    529  11a7
    530  11a7		       85 ee		      sta	temp7
    531  11a9		       a9 91		      lda	#>(ret_point3-1)
    532  11ab		       48		      pha
    533  11ac		       a9 be		      lda	#<(ret_point3-1)
    534  11ae		       48		      pha
    535  11af		       a9 f4		      lda	#>(drawscreen-1)
    536  11b1		       48		      pha
    537  11b2		       a9 3b		      lda	#<(drawscreen-1)
    538  11b4		       48		      pha
    539  11b5		       a5 ee		      lda	temp7
    540  11b7		       48		      pha
    541  11b8		       8a		      txa
    542  11b9		       48		      pha
    543  11ba		       a2 04		      ldx	#4
    544  11bc		       4c eb ff 	      jmp	BS_jsr
    545  11bf				   ret_point3
    546  11bf				   .
    547  11bf							;
    548  11bf
    549  11bf				   .L061		;  if joy0right then player0x	=  player0x  +	1
    550  11bf
    551  11bf		       2c 80 02 	      bit	SWCHA
    552  11c2		       30 02		      BMI	.skipL061
    553  11c4				   .condpart10
    554  11c4		       e6 80		      INC	player0x
    555  11c6				   .skipL061
    556  11c6				   .L062		;  if joy0left then player0x  =  player0x  -  1
    557  11c6
    558  11c6		       2c 80 02 	      bit	SWCHA
    559  11c9		       70 02		      BVS	.skipL062
    560  11cb				   .condpart11
    561  11cb		       c6 80		      DEC	player0x
    562  11cd				   .skipL062
    563  11cd				   .L063		;  if joy0up then player0y  =	player0y  -  1
    564  11cd
    565  11cd		       a9 10		      lda	#$10
    566  11cf		       2c 80 02 	      bit	SWCHA
    567  11d2		       d0 02		      BNE	.skipL063
    568  11d4				   .condpart12
    569  11d4		       c6 85		      DEC	player0y
    570  11d6				   .skipL063
    571  11d6				   .L064		;  if joy0down then player0y  =  player0y  +  1
    572  11d6
    573  11d6		       a9 20		      lda	#$20
    574  11d8		       2c 80 02 	      bit	SWCHA
    575  11db		       d0 02		      BNE	.skipL064
    576  11dd				   .condpart13
    577  11dd		       e6 85		      INC	player0y
    578  11df				   .skipL064
    579  11df				   .L065		;  if player0y  >=  80 then player0y  =  80
    580  11df
    581  11df		       a5 85		      LDA	player0y
    582  11e1		       c9 50		      CMP	#80
    583  11e3		       90 04		      BCC	.skipL065
    584  11e5				   .condpart14
    585  11e5		       a9 50		      LDA	#80
    586  11e7		       85 85		      STA	player0y
    587  11e9				   .skipL065
    588  11e9				   .L066		;  if player0x  <= 1 then player0x  =	1
    589  11e9
    590  11e9		       a9 01		      LDA	#1
    591  11eb		       c5 80		      CMP	player0x
    592  11ed		       90 04		      BCC	.skipL066
    593  11ef				   .condpart15
    594  11ef		       a9 01		      LDA	#1
    595  11f1		       85 80		      STA	player0x
    596  11f3				   .skipL066
    597  11f3				   .L067		;  if player0x  >=  153 then player0x	=  153
    598  11f3
    599  11f3		       a5 80		      LDA	player0x
    600  11f5		       c9 99		      CMP	#153
    601  11f7		       90 04		      BCC	.skipL067
    602  11f9				   .condpart16
    603  11f9		       a9 99		      LDA	#153
    604  11fb		       85 80		      STA	player0x
    605  11fd				   .skipL067
    606  11fd				   .
    607  11fd							;
    608  11fd
    609  11fd				   .L068		;  if collision(player0,player1) then score  =  score	+  10  :  player1y  =  20  :  player1x	=  rand16 & 127  :  goto play_hit_sound
    610  11fd
    611  11fd		       24 07		      bit	CXPPMM
    612  11ff		       10 2d		      BPL	.skipL068
    613  1201				   .condpart17
    614  1201		       f8		      SED
    615  1202		       18		      CLC
    616  1203		       a5 95		      LDA	score+2
    617  1205		       69 10		      ADC	#$10
    618  1207		       85 95		      STA	score+2
    619  1209		       a5 94		      LDA	score+1
    620  120b		       69 00		      ADC	#$00
    621  120d		       85 94		      STA	score+1
    622  120f		       a5 93		      LDA	score
    623  1211		       69 00		      ADC	#$00
    624  1213		       85 93		      STA	score
    625  1215		       d8		      CLD
    626  1216		       a9 14		      LDA	#20
    627  1218		       85 86		      STA	player1y
    628  121a		       a5 a2		      lda	rand
    629  121c		       4a		      lsr
    630  121d					      ifconst	rand16
    631  121d		       26 e1		      rol	rand16
    632  121f					      endif
    633  121f		       90 02		      bcc	*+4
    634  1221		       49 b4		      eor	#$B4
    635  1223		       85 a2		      sta	rand
    636  1225					      ifconst	rand16
    637  1225		       45 e1		      eor	rand16
    638  1227					      endif
    639  1227		       29 7f		      AND	#127
    640  1229		       85 81		      STA	player1x
    641  122b		       4c 73 92 	      jmp	.play_hit_sound
    642  122e
    643  122e				   .skipL068
    644  122e				   .L069		;  if player1y  =  80	&&  !collision(player0,player1) then missed  =	missed	+  1  :  player1y  =  20  :  player1x  =  rand16 & 127 :  pfscore1  =  pfscore1 / 4 :  goto play_miss_sound
    645  122e
    646  122e		       a5 86		      LDA	player1y
    647  1230		       c9 50		      CMP	#80
    648  1232		       d0 24		      BNE	.skipL069
    649  1234				   .condpart18
    650  1234		       24 07		      bit	CXPPMM
    651  1236		       30 20		      BMI	.skip18then
    652  1238				   .condpart19
    653  1238		       e6 d7		      INC	missed
    654  123a		       a9 14		      LDA	#20
    655  123c		       85 86		      STA	player1y
    656  123e		       a5 a2		      lda	rand
    657  1240		       4a		      lsr
    658  1241					      ifconst	rand16
    659  1241		       26 e1		      rol	rand16
    660  1243					      endif
    661  1243		       90 02		      bcc	*+4
    662  1245		       49 b4		      eor	#$B4
    663  1247		       85 a2		      sta	rand
    664  1249					      ifconst	rand16
    665  1249		       45 e1		      eor	rand16
    666  124b					      endif
    667  124b		       29 7f		      AND	#127
    668  124d		       85 81		      STA	player1x
    669  124f		       a5 f2		      LDA	pfscore1
    670  1251		       4a		      lsr
    671  1252		       4a		      lsr
    672  1253		       85 f2		      STA	pfscore1
    673  1255		       4c 9f 92 	      jmp	.play_miss_sound
    674  1258
    675  1258				   .skip18then
    676  1258				   .skipL069
    677  1258				   .L070		;  if missed  =  4 then goto __Game_Over_Setup bank3
    678  1258
    679  1258		       a5 d7		      LDA	missed
    680  125a		       c9 04		      CMP	#4
    681  125c		       d0 12		      BNE	.skipL070
    682  125e				   .condpart20
    683  125e		       85 ee		      sta	temp7
    684  1260		       a9 cf		      lda	#>(.__Game_Over_Setup-1)
    685  1262		       48		      pha
    686  1263		       a9 ff		      lda	#<(.__Game_Over_Setup-1)
    687  1265		       48		      pha
    688  1266		       a5 ee		      lda	temp7
    689  1268		       48		      pha
    690  1269		       8a		      txa
    691  126a		       48		      pha
    692  126b		       a2 03		      ldx	#3
    693  126d		       4c eb ff 	      jmp	BS_jsr
    694  1270				   .skipL070
    695  1270				   .
    696  1270							;
    697  1270
    698  1270				   .L071		;  goto gameloop
    699  1270
    700  1270		       4c 35 91 	      jmp	.gameloop
    701  1273
    702  1273				   .
    703  1273							;
    704  1273
    705  1273				   .play_hit_sound
    706  1273							; play_hit_sound
    707  1273
    708  1273				   .L072		;  if !_Ch0_Sound then _Ch0_Sound  =  1  :  _Ch0_Duration1  =	255  :	_Ch0_Duration2	=  255	:  _Ch0_Duration3  =  255  :  _Ch0_Duration4  =  255
    709  1273
    710  1273		       a5 e0		      LDA	_Ch0_Sound
    711  1275		       d0 0e		      BNE	.skipL072
    712  1277				   .condpart21
    713  1277		       a9 01		      LDA	#1
    714  1279		       85 e0		      STA	_Ch0_Sound
    715  127b		       a9 ff		      LDA	#255
    716  127d		       85 e4		      STA	_Ch0_Duration1
    717  127f		       85 e9		      STA	_Ch0_Duration2
    718  1281		       85 ea		      STA	_Ch0_Duration3
    719  1283		       85 eb		      STA	_Ch0_Duration4
    720  1285				   .skipL072
    721  1285				   .L073		;  AUDC0  =  4  :  AUDV0  =  15  :  AUDF0  =  24
    722  1285
    723  1285		       a9 04		      LDA	#4
    724  1287		       85 15		      STA	AUDC0
    725  1289		       a9 0f		      LDA	#15
    726  128b		       85 19		      STA	AUDV0
    727  128d		       a9 18		      LDA	#24
    728  128f		       85 17		      STA	AUDF0
    729  1291				   .L074		;  _Ch0_Duration1  =  _Ch0_Duration1  -  1
    730  1291
    731  1291		       c6 e4		      DEC	_Ch0_Duration1
    732  1293				   .L075		;  if _Ch0_Duration1  =  0 then goto minus_dur2
    733  1293
    734  1293		       a5 e4		      LDA	_Ch0_Duration1
    735  1295		       c9 00		      CMP	#0
    736  1297		       d0 03		      BNE	.skipL075
    737  1299				   .condpart22
    738  1299		       4c cb 92 	      jmp	.minus_dur2
    739  129c
    740  129c				   .skipL075
    741  129c				   .L076		;  goto play_hit_sound
    742  129c
    743  129c		       4c 73 92 	      jmp	.play_hit_sound
    744  129f
    745  129f				   .
    746  129f							;
    747  129f
    748  129f				   .play_miss_sound
    749  129f							; play_miss_sound
    750  129f
    751  129f				   .L077		;  if !_Ch0_Sound then _Ch0_Sound  =  1  :  _Ch0_Duration1  =	255  :	_Ch0_Duration2	=  255	:  _Ch0_Duration3  =  255 :  _Ch0_Duration4  =	255
    752  129f
    753  129f		       a5 e0		      LDA	_Ch0_Sound
    754  12a1		       d0 0e		      BNE	.skipL077
    755  12a3				   .condpart23
    756  12a3		       a9 01		      LDA	#1
    757  12a5		       85 e0		      STA	_Ch0_Sound
    758  12a7		       a9 ff		      LDA	#255
    759  12a9		       85 e4		      STA	_Ch0_Duration1
    760  12ab		       85 e9		      STA	_Ch0_Duration2
    761  12ad		       85 ea		      STA	_Ch0_Duration3
    762  12af		       85 eb		      STA	_Ch0_Duration4
    763  12b1				   .skipL077
    764  12b1				   .L078		;  AUDC0  =  12  :  AUDV0  =  15  :  AUDF0  =	26
    765  12b1
    766  12b1		       a9 0c		      LDA	#12
    767  12b3		       85 15		      STA	AUDC0
    768  12b5		       a9 0f		      LDA	#15
    769  12b7		       85 19		      STA	AUDV0
    770  12b9		       a9 1a		      LDA	#26
    771  12bb		       85 17		      STA	AUDF0
    772  12bd				   .L079		;  _Ch0_Duration1  =  _Ch0_Duration1  -  1
    773  12bd
    774  12bd		       c6 e4		      DEC	_Ch0_Duration1
    775  12bf				   .L080		;  if _Ch0_Duration1  =  0 then goto minus_dur2
    776  12bf
    777  12bf		       a5 e4		      LDA	_Ch0_Duration1
    778  12c1		       c9 00		      CMP	#0
    779  12c3		       d0 03		      BNE	.skipL080
    780  12c5				   .condpart24
    781  12c5		       4c cb 92 	      jmp	.minus_dur2
    782  12c8
    783  12c8				   .skipL080
    784  12c8				   .L081		;  goto play_miss_sound
    785  12c8
    786  12c8		       4c 9f 92 	      jmp	.play_miss_sound
    787  12cb
    788  12cb				   .
    789  12cb							;
    790  12cb
    791  12cb				   .minus_dur2
    792  12cb							; minus_dur2
    793  12cb
    794  12cb				   .L082		;  _Ch0_Duration2  =  _Ch0_Duration2  -  1
    795  12cb
    796  12cb		       c6 e9		      DEC	_Ch0_Duration2
    797  12cd				   .L083		;  if _Ch0_Duration2  =  0 then goto minus_dur3
    798  12cd
    799  12cd		       a5 e9		      LDA	_Ch0_Duration2
    800  12cf		       c9 00		      CMP	#0
    801  12d1		       d0 03		      BNE	.skipL083
    802  12d3				   .condpart25
    803  12d3		       4c d9 92 	      jmp	.minus_dur3
    804  12d6
    805  12d6				   .skipL083
    806  12d6				   .L084		;  goto minus_dur2
    807  12d6
    808  12d6		       4c cb 92 	      jmp	.minus_dur2
    809  12d9
    810  12d9				   .
    811  12d9							;
    812  12d9
    813  12d9				   .minus_dur3
    814  12d9							; minus_dur3
    815  12d9
    816  12d9				   .L085		;  _Ch0_Duration3  =  _Ch0_Duration3  -  1
    817  12d9
    818  12d9		       c6 ea		      DEC	_Ch0_Duration3
    819  12db				   .L086		;  if _Ch0_Duration3  =  0 then goto minus_dur4
    820  12db
    821  12db		       a5 ea		      LDA	_Ch0_Duration3
    822  12dd		       c9 00		      CMP	#0
    823  12df		       d0 03		      BNE	.skipL086
    824  12e1				   .condpart26
    825  12e1		       4c e7 92 	      jmp	.minus_dur4
    826  12e4
    827  12e4				   .skipL086
    828  12e4				   .L087		;  goto minus_dur3
    829  12e4
    830  12e4		       4c d9 92 	      jmp	.minus_dur3
    831  12e7
    832  12e7				   .
    833  12e7							;
    834  12e7
    835  12e7				   .minus_dur4
    836  12e7							; minus_dur4
    837  12e7
    838  12e7				   .L088		;  _Ch0_Duration4  =  _Ch0_Duration4  -  1
    839  12e7
    840  12e7		       c6 eb		      DEC	_Ch0_Duration4
    841  12e9				   .L089		;  if _Ch0_Duration4  =  0 then goto __Clear_Ch_0
    842  12e9
    843  12e9		       a5 eb		      LDA	_Ch0_Duration4
    844  12eb		       c9 00		      CMP	#0
    845  12ed		       d0 03		      BNE	.skipL089
    846  12ef				   .condpart27
    847  12ef		       4c f5 92 	      jmp	.__Clear_Ch_0
    848  12f2
    849  12f2				   .skipL089
    850  12f2				   .L090		;  goto minus_dur4
    851  12f2
    852  12f2		       4c e7 92 	      jmp	.minus_dur4
    853  12f5
    854  12f5				   .
    855  12f5							;
    856  12f5
    857  12f5				   .__Clear_Ch_0
    858  12f5							; __Clear_Ch_0
    859  12f5
    860  12f5				   .L091		;  _Ch0_Sound	=  0  :  AUDV0	=  0
    861  12f5
    862  12f5		       a9 00		      LDA	#0
    863  12f7		       85 e0		      STA	_Ch0_Sound
    864  12f9		       85 19		      STA	AUDV0
    865  12fb				   .L092		;  goto gameloop
    866  12fb
    867  12fb		       4c 35 91 	      jmp	.gameloop
    868  12fe
    869  12fe				   .
    870  12fe							;
    871  12fe
    872  12fe				   .L093		;  bank 2
    873  12fe
    874  12fe					      if	ECHO1
      3286 bytes of ROM space left in bank 1
    875  12fe					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    876  12fe					      endif
    877  12fe		       00 01	   ECHO1      =	1
    878  1fd4					      ORG	$1FF4-bscode_length
    879  1fd4					      RORG	$9FF4-bscode_length
    880  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    881  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    882  1fd6				  -	      stx	FASTFETCH
    883  1fd6					      endif
    884  1fd6		       9a		      txs
    885  1fd7				  -	      if	bankswitch == 64
    886  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    887  1fd7					      else
    888  1fd7		       a9 f2		      lda	#>(start-1)
    889  1fd9					      endif
    890  1fd9		       48		      pha
    891  1fda		       a9 51		      lda	#<(start-1)
    892  1fdc		       48		      pha
    893  1fdd		       48		      pha
    894  1fde		       8a		      txa
    895  1fdf		       48		      pha
    896  1fe0		       ba		      tsx
    897  1fe1					      if	bankswitch != 64
    898  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    899  1fe3		       2a		      rol
    900  1fe4		       2a		      rol
    901  1fe5		       2a		      rol
    902  1fe6		       2a		      rol
    903  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    904  1fe9		       aa		      tax
    905  1fea		       e8		      inx
    906  1feb				  -	      else
    907  1feb				  -	      lda	4,x	; get high byte of return address
    908  1feb				  -	      tay
    909  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    910  1feb				  -	      sta	4,x
    911  1feb				  -	      tya
    912  1feb				  -	      lsr
    913  1feb				  -	      lsr
    914  1feb				  -	      lsr
    915  1feb				  -	      lsr
    916  1feb				  -	      tax
    917  1feb				  -	      inx
    918  1feb					      endif
    919  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    920  1fee		       68		      pla
    921  1fef		       aa		      tax
    922  1ff0		       68		      pla
    923  1ff1		       60		      rts
    924  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    925  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    926  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    927  1ff2					      endif
    928  1ffc					      ORG	$1FFC
    929  1ffc					      RORG	$9FFC
    930  1ffc		       d4 9f		      .word.w	(start_bank1 & $ffff)
    931  1ffe		       d4 9f		      .word.w	(start_bank1 & $ffff)
    932  2000					      ORG	$2000
    933  2000					      RORG	$B000
    934  2000				   .L094		;  _Bit0_Reset_Restrainer{0}  =  1
    935  2000
    936  2000		       a5 ec		      LDA	_Bit0_Reset_Restrainer
    937  2002		       09 01		      ORA	#1
    938  2004		       85 ec		      STA	_Bit0_Reset_Restrainer
    939  2006				   .L095		;  asm
    940  2006
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  2006					      include	"titlescreen/asm/titlescreen.asm"
      1  2006
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  2006					      include	"titlescreen/asm/layoutmacros.asm"
      1  2006
      2  2006							; the macro's used in the "titlescreen_layout.asm" file
      3  2006
      4  2006					      MAC	draw_96x2_1
      5  2006				   mk_96x2_1_on =	1
      6  2006					      jsr	draw_bmp_96x2_1
      7  2006					      ENDM
      8  2006
      9  2006					      MAC	draw_96x2_2
     10  2006				   mk_96x2_2_on =	1
     11  2006					      jsr	draw_bmp_96x2_2
     12  2006					      ENDM
     13  2006
     14  2006					      MAC	draw_96x2_3
     15  2006				   mk_96x2_3_on =	1
     16  2006					      jsr	draw_bmp_96x2_3
     17  2006					      ENDM
     18  2006
     19  2006					      MAC	draw_96x2_4
     20  2006				   mk_96x2_4_on =	1
     21  2006					      jsr	draw_bmp_96x2_4
     22  2006					      ENDM
     23  2006
     24  2006					      MAC	draw_96x2_5
     25  2006				   mk_96x2_5_on =	1
     26  2006					      jsr	draw_bmp_96x2_5
     27  2006					      ENDM
     28  2006
     29  2006					      MAC	draw_96x2_6
     30  2006				   mk_96x2_6_on =	1
     31  2006					      jsr	draw_bmp_96x2_6
     32  2006					      ENDM
     33  2006
     34  2006					      MAC	draw_96x2_7
     35  2006				   mk_96x2_7_on =	1
     36  2006					      jsr	draw_bmp_96x2_7
     37  2006					      ENDM
     38  2006
     39  2006					      MAC	draw_96x2_8
     40  2006				   mk_96x2_8_on =	1
     41  2006					      jsr	draw_bmp_96x2_8
     42  2006					      ENDM
     43  2006
     44  2006					      MAC	draw_player
     45  2006				   mk_player_on =	1
     46  2006					      jsr	draw_player_display
     47  2006					      ENDM
     48  2006
     49  2006					      MAC	draw_score
     50  2006				   mk_score_on =	1
     51  2006				   mk_48x1_X_on =	1
     52  2006					      jsr	draw_score_display
     53  2006					      ENDM
     54  2006
     55  2006					      MAC	draw_gameselect
     56  2006				   mk_gameselect_on =	1
     57  2006				   mk_48x1_X_on =	1
     58  2006					      jsr	draw_gameselect_display
     59  2006					      ENDM
     60  2006
     61  2006					      MAC	draw_space
     62  2006					      ldy	#{1}
     63  2006				   .loop
     64  2006					      sta	WSYNC
     65  2006					      dey
     66  2006					      bne	.loop
     67  2006					      ENDM
     68  2006
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  2006					      include	"titlescreen/asm/dpcfix.asm"
      1  2006							; reassign variables that DPC+ doesn't have
      2  2006
      3  2006				  -	      ifnconst	aux2
      4  2006				  -aux2       =	player2x
      5  2006					      endif
      6  2006				  -	      ifnconst	aux4
      7  2006				  -aux4       =	player4x
      8  2006					      endif
      9  2006				  -	      ifnconst	aux5
     10  2006				  -aux5       =	player5x
     11  2006					      endif
     12  2006				  -	      ifnconst	aux6
     13  2006				  -aux6       =	player6x
     14  2006					      endif
     15  2006
     16  2006				  -	      ifnconst	player0pointer
     17  2006				  -player0pointer =	player2y
     18  2006					      endif
     19  2006				  -	      ifnconst	player1pointer
     20  2006				  -player1pointer =	player2height	; to player3height
     21  2006					      endif
     22  2006				  -	      ifnconst	player1color
     23  2006				  -player1color =	player4height	; to player5height
     24  2006					      endif
     25  2006				  -	      ifnconst	scorepointers
     26  2006				  -scorepointers =	player6height	; to NUSIZ8
     27  2006					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  2006					      include	"titlescreen/titlescreen_layout.asm"
      1  2006					      MAC	titlescreenlayout
      2  2006					      draw_96x2_1
      3  2006					      ENDM
      4  2006
------- FILE titlescreen/asm/titlescreen.asm
      5  2006
      6  2006				   .titledrawscreen
      7  2006				   title_eat_overscan
      8  2006							;bB runs in overscan. Wait for the overscan to run out...
      9  2006		       18		      clc
     10  2007		       ad 84 02 	      lda	INTIM
     11  200a		       30 fa		      bmi	title_eat_overscan
     12  200c		       4c 0f b0 	      jmp	title_do_vertical_sync
     13  200f
     14  200f				   title_do_vertical_sync
     15  200f		       a9 02		      lda	#2
     16  2011		       85 02		      sta	WSYNC	;one line with VSYNC
     17  2013		       85 00		      sta	VSYNC	;enable VSYNC
     18  2015		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2017		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2019		       a9 00		      lda	#0
     21  201b		       85 02		      sta	WSYNC	;one line with VSYNC
     22  201d		       85 00		      sta	VSYNC	;turn off VSYNC
     23  201f
     24  201f							;lda #42+128
     25  201f				  -	      ifnconst	vblank_time
     26  201f				  -	      lda	#42+128
     27  201f					      else
     28  201f		       a9 ab		      lda	#vblank_time+128
     29  2021					      endif
     30  2021
     31  2021		       8d 96 02 	      sta	TIM64T
     32  2024
     33  2024		       00 82	   titleframe =	missile0x
     34  2024		       e6 82		      inc	titleframe	; increment the frame counter
     35  2026
     36  2026				  -	      ifconst	.title_vblank
     37  2026				  -	      jsr	.title_vblank
     38  2026					      endif
     39  2026
     40  2026				   title_vblank_loop
     41  2026		       ad 84 02 	      lda	INTIM
     42  2029		       30 fb		      bmi	title_vblank_loop
     43  202b		       a9 00		      lda	#0
     44  202d		       85 02		      sta	WSYNC
     45  202f		       85 01		      sta	VBLANK
     46  2031		       85 1d		      sta	ENAM0
     47  2033		       85 1f		      sta	ENABL
     48  2035
     49  2035				   title_playfield
     50  2035
     51  2035							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  2035
     53  2035		       a9 e6		      lda	#230
     54  2037		       8d 96 02 	      sta	TIM64T
     55  203a
     56  203a		       a9 01		      lda	#1
     57  203c		       85 0a		      sta	CTRLPF
     58  203e		       18		      clc
     59  203f
     60  203f		       a9 00		      lda	#0
     61  2041		       85 0b		      sta	REFP0
     62  2043		       85 0c		      sta	REFP1
     63  2045		       85 02		      sta	WSYNC
     64  2047		       ad 7a b0 	      lda	titlescreencolor
     65  204a		       85 09		      sta	COLUBK
     66  204c
      0  204c					      titlescreenlayout
      0  204c					      draw_96x2_1
      1  204c		       00 01	   mk_96x2_1_on =	1
      2  204c		       20 7b b0 	      jsr	draw_bmp_96x2_1
     68  204f
     69  204f		       4c 71 b2 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2052
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  2052					      include	"titlescreen/asm/position48.asm"
      1  2052
      2  2052				   position48
      3  2052
      4  2052							;postion P0 and P1
      5  2052
      6  2052		       85 02		      sta	WSYNC
      7  2054
      8  2054		       a9 90		      lda	#$90	;2
      9  2056		       85 20		      sta	HMP0	;3
     10  2058		       a9 a0		      lda	#$A0	;2
     11  205a		       85 21		      sta	HMP1	;3
     12  205c
     13  205c		       e6 9c		      inc	temp1
     14  205e		       c6 9c		      dec	temp1
     15  2060		       e6 9c		      inc	temp1
     16  2062		       c6 9c		      dec	temp1
     17  2064		       e6 9c		      inc	temp1
      0  2066					      sleep	2
      1  2066				   .CYCLES    SET	2
      2  2066
      3  2066				  -	      IF	.CYCLES < 2
      4  2066				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2066				  -	      ERR
      6  2066					      ENDIF
      7  2066
      8  2066				  -	      IF	.CYCLES & 1
      9  2066				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2066				  -	      nop	0
     11  2066				  -	      ELSE
     12  2066				  -	      bit	VSYNC
     13  2066				  -	      ENDIF
     14  2066				  -.CYCLES    SET	.CYCLES - 3
     15  2066					      ENDIF
     16  2066
     17  2066					      REPEAT	.CYCLES / 2
     18  2066		       ea		      nop
     19  2067					      REPEND
     19  2067		       85 10		      sta	RESP0	;  +3
     20  2069		       85 11		      sta	RESP1	;  +3
     21  206b		       c6 9c		      dec	temp1	;  +5
     22  206d		       e6 9c		      inc	temp1	;  +5
     23  206f		       c6 9c		      dec	temp1	;  +5
     24  2071		       e6 9c		      inc	temp1	;  +5
     25  2073		       c6 9c		      dec	temp1	;  +5
      0  2075					      sleep	3
      1  2075				   .CYCLES    SET	3
      2  2075
      3  2075				  -	      IF	.CYCLES < 2
      4  2075				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2075				  -	      ERR
      6  2075					      ENDIF
      7  2075
      8  2075					      IF	.CYCLES & 1
      9  2075					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2075		       04 00		      nop	0
     11  2077				  -	      ELSE
     12  2077				  -	      bit	VSYNC
     13  2077					      ENDIF
     14  2077				   .CYCLES    SET	.CYCLES - 3
     15  2077					      ENDIF
     16  2077
     17  2077				  -	      REPEAT	.CYCLES / 2
     18  2077				  -	      nop
     19  2077					      REPEND
     27  2077		       85 2a		      sta	HMOVE	; +76
     28  2079		       60		      RTS
     29  207a
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  207a					      include	"titlescreen/titlescreen_color.asm"
      1  207a
      2  207a							; This is where the titlescreen background color gets set. 
      3  207a							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  207a							; if you want to change the color on the fly.
      5  207a
      6  207a				  -	      ifnconst	titlescreencolor
      7  207a				  -titlescreencolor
      8  207a					      endif
      9  207a		       00		      .byte.b	$00
     10  207b
------- FILE titlescreen/asm/titlescreen.asm
     73  207b
     74  207b					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 2
      0  207b					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  207b				   draw_bmp_96x2_1
      2  207b
      3  207b				  -	      ifconst	bmp_96x2_1_index
      4  207b				  -	      lda	#(bmp_96x2_1_height-1)
      5  207b				  -	      sec
      6  207b				  -	      sbc	bmp_96x2_1_index
      7  207b				  -	      tay
      8  207b				  -	      sbc	#bmp_96x2_1_window
      9  207b				  -	      sta	temp1
     10  207b					      else
     11  207b		       a0 54		      ldy	#(bmp_96x2_1_window-1)
     12  207d		       a9 ff		      lda	#255
     13  207f		       85 9c		      sta	temp1
     14  2081					      endif
     15  2081
     16  2081		       a9 03		      lda	#3
     17  2083		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  2085		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  2087		       a9 00		      lda	#0
     20  2089
     21  2089		       b9 87 b2 	      lda	bmp_96x2_1_colors,y	;4
     22  208c				  -	      ifconst	bmp_96x2_1_fade
     23  208c				  -	      and	bmp_96x2_1_fade
     24  208c					      endif
     25  208c		       85 06		      sta	COLUP0	;3
     26  208e		       85 07		      sta	COLUP1	;3
     27  2090		       85 2b		      sta	HMCLR	;3
     28  2092
     29  2092		       a5 82		      lda	titleframe
     30  2094		       29 01		      and	#1
     31  2096		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  2098		       4c 70 b1 	      jmp	pf96x2_1_frame1
     33  209b				   jmp_pf96x2_1_frame0
     34  209b		       4c 9e b0 	      jmp	pf96x2_1_frame0
     35  209e
     36  209e				   pf96x2_1_frame0
     37  209e							;postion P0 and P1
     38  209e		       85 02		      sta	WSYNC
     39  20a0		       a9 e0		      lda	#%11100000
     40  20a2		       85 20		      sta	HMP0
     41  20a4		       a9 10		      lda	#%00010000
     42  20a6		       85 21		      sta	HMP1
     43  20a8		       85 02		      sta	WSYNC
      0  20aa					      sleep	28
      1  20aa				   .CYCLES    SET	28
      2  20aa
      3  20aa				  -	      IF	.CYCLES < 2
      4  20aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  20aa				  -	      ERR
      6  20aa					      ENDIF
      7  20aa
      8  20aa				  -	      IF	.CYCLES & 1
      9  20aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  20aa				  -	      nop	0
     11  20aa				  -	      ELSE
     12  20aa				  -	      bit	VSYNC
     13  20aa				  -	      ENDIF
     14  20aa				  -.CYCLES    SET	.CYCLES - 3
     15  20aa					      ENDIF
     16  20aa
     17  20aa					      REPEAT	.CYCLES / 2
     18  20aa		       ea		      nop
     17  20aa					      REPEND
     18  20ab		       ea		      nop
     17  20ab					      REPEND
     18  20ac		       ea		      nop
     17  20ac					      REPEND
     18  20ad		       ea		      nop
     17  20ad					      REPEND
     18  20ae		       ea		      nop
     17  20ae					      REPEND
     18  20af		       ea		      nop
     17  20af					      REPEND
     18  20b0		       ea		      nop
     17  20b0					      REPEND
     18  20b1		       ea		      nop
     17  20b1					      REPEND
     18  20b2		       ea		      nop
     17  20b2					      REPEND
     18  20b3		       ea		      nop
     17  20b3					      REPEND
     18  20b4		       ea		      nop
     17  20b4					      REPEND
     18  20b5		       ea		      nop
     17  20b5					      REPEND
     18  20b6		       ea		      nop
     17  20b6					      REPEND
     18  20b7		       ea		      nop
     19  20b8					      REPEND
     45  20b8		       85 10		      sta	RESP0
      0  20ba					      sleep	14
      1  20ba				   .CYCLES    SET	14
      2  20ba
      3  20ba				  -	      IF	.CYCLES < 2
      4  20ba				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  20ba				  -	      ERR
      6  20ba					      ENDIF
      7  20ba
      8  20ba				  -	      IF	.CYCLES & 1
      9  20ba				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  20ba				  -	      nop	0
     11  20ba				  -	      ELSE
     12  20ba				  -	      bit	VSYNC
     13  20ba				  -	      ENDIF
     14  20ba				  -.CYCLES    SET	.CYCLES - 3
     15  20ba					      ENDIF
     16  20ba
     17  20ba					      REPEAT	.CYCLES / 2
     18  20ba		       ea		      nop
     17  20ba					      REPEND
     18  20bb		       ea		      nop
     17  20bb					      REPEND
     18  20bc		       ea		      nop
     17  20bc					      REPEND
     18  20bd		       ea		      nop
     17  20bd					      REPEND
     18  20be		       ea		      nop
     17  20be					      REPEND
     18  20bf		       ea		      nop
     17  20bf					      REPEND
     18  20c0		       ea		      nop
     19  20c1					      REPEND
     47  20c1		       85 11		      sta	RESP1
     48  20c3		       85 02		      sta	WSYNC
     49  20c5		       85 2a		      sta	HMOVE
     50  20c7
     51  20c7		       85 02		      sta	WSYNC
     52  20c9		       85 2b		      sta	HMCLR
     53  20cb		       85 02		      sta	WSYNC
     54  20cd
      0  20cd					      sleep	4
      1  20cd				   .CYCLES    SET	4
      2  20cd
      3  20cd				  -	      IF	.CYCLES < 2
      4  20cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  20cd				  -	      ERR
      6  20cd					      ENDIF
      7  20cd
      8  20cd				  -	      IF	.CYCLES & 1
      9  20cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  20cd				  -	      nop	0
     11  20cd				  -	      ELSE
     12  20cd				  -	      bit	VSYNC
     13  20cd				  -	      ENDIF
     14  20cd				  -.CYCLES    SET	.CYCLES - 3
     15  20cd					      ENDIF
     16  20cd
     17  20cd					      REPEAT	.CYCLES / 2
     18  20cd		       ea		      nop
     17  20cd					      REPEND
     18  20ce		       ea		      nop
     19  20cf					      REPEND
     56  20cf		       4c 00 b1 	      jmp	pfline_96x2_1_frame0
     57  20d2							;align so our branch doesn't unexpectedly cross a page...
     58  20d2					      if	>. != >[.+$70]
     59  2100		       00 00 00 00*	      align	256
     60  2100					      endif
     61  2100
     62  2100				   pfline_96x2_1_frame0
     63  2100		       a9 80		      lda	#$80	;2
     64  2102		       85 20		      sta	HMP0	;3
     65  2104		       85 21		      sta	HMP1	;3
     66  2106
     67  2106		       b9 00 b5 	      lda	bmp_96x2_1_06,y	;4
     68  2109		       85 1c		      sta	GRP1	;3
     69  210b
     70  210b		       b9 00 b3 	      lda	bmp_96x2_1_00,y
     71  210e		       85 1b		      sta	GRP0
     72  2110		       b9 aa b3 	      lda	bmp_96x2_1_02,y
     73  2113		       85 1b		      sta	GRP0
     74  2115		       b9 55 b4 	      lda	bmp_96x2_1_04,y
     75  2118		       85 1b		      sta	GRP0
     76  211a
      0  211a					      sleep	2
      1  211a				   .CYCLES    SET	2
      2  211a
      3  211a				  -	      IF	.CYCLES < 2
      4  211a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  211a				  -	      ERR
      6  211a					      ENDIF
      7  211a
      8  211a				  -	      IF	.CYCLES & 1
      9  211a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  211a				  -	      nop	0
     11  211a				  -	      ELSE
     12  211a				  -	      bit	VSYNC
     13  211a				  -	      ENDIF
     14  211a				  -.CYCLES    SET	.CYCLES - 3
     15  211a					      ENDIF
     16  211a
     17  211a					      REPEAT	.CYCLES / 2
     18  211a		       ea		      nop
     19  211b					      REPEND
     78  211b
     79  211b		       b9 aa b5 	      lda	bmp_96x2_1_08,y
     80  211e		       85 1c		      sta	GRP1
     81  2120		       b9 55 b6 	      lda	bmp_96x2_1_10,y
     82  2123		       85 1c		      sta	GRP1
     83  2125
     84  2125		       b9 55 b3 	      lda	bmp_96x2_1_01,y
     85  2128		       85 1b		      sta	GRP0
     86  212a
      0  212a					      sleep	8
      1  212a				   .CYCLES    SET	8
      2  212a
      3  212a				  -	      IF	.CYCLES < 2
      4  212a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  212a				  -	      ERR
      6  212a					      ENDIF
      7  212a
      8  212a				  -	      IF	.CYCLES & 1
      9  212a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  212a				  -	      nop	0
     11  212a				  -	      ELSE
     12  212a				  -	      bit	VSYNC
     13  212a				  -	      ENDIF
     14  212a				  -.CYCLES    SET	.CYCLES - 3
     15  212a					      ENDIF
     16  212a
     17  212a					      REPEAT	.CYCLES / 2
     18  212a		       ea		      nop
     17  212a					      REPEND
     18  212b		       ea		      nop
     17  212b					      REPEND
     18  212c		       ea		      nop
     17  212c					      REPEND
     18  212d		       ea		      nop
     19  212e					      REPEND
     88  212e
     89  212e							;sta WSYNC	;=0
     90  212e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2130
     92  2130		       b9 86 b2 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  2133				  -	      ifconst	bmp_96x2_1_fade
     94  2133				  -	      and	bmp_96x2_1_fade
     95  2133					      else
      0  2133					      sleep	3
      1  2133				   .CYCLES    SET	3
      2  2133
      3  2133				  -	      IF	.CYCLES < 2
      4  2133				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2133				  -	      ERR
      6  2133					      ENDIF
      7  2133
      8  2133					      IF	.CYCLES & 1
      9  2133					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2133		       04 00		      nop	0
     11  2135				  -	      ELSE
     12  2135				  -	      bit	VSYNC
     13  2135					      ENDIF
     14  2135				   .CYCLES    SET	.CYCLES - 3
     15  2135					      ENDIF
     16  2135
     17  2135				  -	      REPEAT	.CYCLES / 2
     18  2135				  -	      nop
     19  2135					      REPEND
     97  2135					      endif
     98  2135		       aa		      tax
     99  2136
    100  2136		       a9 00		      lda	#0	;2
    101  2138		       85 20		      sta	HMP0	;3
    102  213a		       85 21		      sta	HMP1	;3
    103  213c
      0  213c					      sleep	7
      1  213c				   .CYCLES    SET	7
      2  213c
      3  213c				  -	      IF	.CYCLES < 2
      4  213c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  213c				  -	      ERR
      6  213c					      ENDIF
      7  213c
      8  213c					      IF	.CYCLES & 1
      9  213c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  213c		       04 00		      nop	0
     11  213e				  -	      ELSE
     12  213e				  -	      bit	VSYNC
     13  213e					      ENDIF
     14  213e				   .CYCLES    SET	.CYCLES - 3
     15  213e					      ENDIF
     16  213e
     17  213e					      REPEAT	.CYCLES / 2
     18  213e		       ea		      nop
     17  213e					      REPEND
     18  213f		       ea		      nop
     19  2140					      REPEND
    105  2140
    106  2140		       b9 55 b5 	      lda	bmp_96x2_1_07,y
    107  2143		       85 1c		      sta	GRP1
    108  2145
    109  2145		       b9 00 b4 	      lda	bmp_96x2_1_03,y	;5
    110  2148		       85 1b		      sta	GRP0	;3 =  8
    111  214a		       b9 aa b4 	      lda	bmp_96x2_1_05,y	;5
    112  214d		       85 1b		      sta	GRP0	;3 =  8
    113  214f
      0  214f					      sleep	2
      1  214f				   .CYCLES    SET	2
      2  214f
      3  214f				  -	      IF	.CYCLES < 2
      4  214f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  214f				  -	      ERR
      6  214f					      ENDIF
      7  214f
      8  214f				  -	      IF	.CYCLES & 1
      9  214f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  214f				  -	      nop	0
     11  214f				  -	      ELSE
     12  214f				  -	      bit	VSYNC
     13  214f				  -	      ENDIF
     14  214f				  -.CYCLES    SET	.CYCLES - 3
     15  214f					      ENDIF
     16  214f
     17  214f					      REPEAT	.CYCLES / 2
     18  214f		       ea		      nop
     19  2150					      REPEND
    115  2150
    116  2150		       b9 00 b6 	      lda	bmp_96x2_1_09,y	;5
    117  2153		       85 1c		      sta	GRP1	;3 =  8
    118  2155		       b9 aa b6 	      lda	bmp_96x2_1_11,y	;5
    119  2158		       85 1c		      sta	GRP1	;3 =  8
    120  215a
      0  215a					      sleep	2
      1  215a				   .CYCLES    SET	2
      2  215a
      3  215a				  -	      IF	.CYCLES < 2
      4  215a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215a				  -	      ERR
      6  215a					      ENDIF
      7  215a
      8  215a				  -	      IF	.CYCLES & 1
      9  215a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215a				  -	      nop	0
     11  215a				  -	      ELSE
     12  215a				  -	      bit	VSYNC
     13  215a				  -	      ENDIF
     14  215a				  -.CYCLES    SET	.CYCLES - 3
     15  215a					      ENDIF
     16  215a
     17  215a					      REPEAT	.CYCLES / 2
     18  215a		       ea		      nop
     19  215b					      REPEND
    122  215b		       86 07		      stx	COLUP1
    123  215d		       86 06		      stx	COLUP0
    124  215f
    125  215f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  2161					      sleep	2
      1  2161				   .CYCLES    SET	2
      2  2161
      3  2161				  -	      IF	.CYCLES < 2
      4  2161				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2161				  -	      ERR
      6  2161					      ENDIF
      7  2161
      8  2161				  -	      IF	.CYCLES & 1
      9  2161				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2161				  -	      nop	0
     11  2161				  -	      ELSE
     12  2161				  -	      bit	VSYNC
     13  2161				  -	      ENDIF
     14  2161				  -.CYCLES    SET	.CYCLES - 3
     15  2161					      ENDIF
     16  2161
     17  2161					      REPEAT	.CYCLES / 2
     18  2161		       ea		      nop
     19  2162					      REPEND
    127  2162		       88		      dey
    128  2163
    129  2163		       c4 9c		      cpy	temp1	;3
    130  2165		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  2167
    132  2167				   pf96x2_1_0codeend
    133  2167							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  2167
    135  2167		       a9 00		      lda	#0
    136  2169		       85 1b		      sta	GRP0
    137  216b		       85 1c		      sta	GRP1
    138  216d		       4c 6e b2 	      jmp	pfdone_96x2_1
    139  2170
    140  2170
    141  2170				   pf96x2_1_frame1
    142  2170
    143  2170							;postion P0 and P1
    144  2170		       85 02		      sta	WSYNC
    145  2172		       a9 20		      lda	#%00100000
    146  2174		       85 20		      sta	HMP0
    147  2176		       a9 00		      lda	#0
    148  2178		       a9 f0		      lda	#%11110000
    149  217a		       85 21		      sta	HMP1
    150  217c		       85 02		      sta	WSYNC
      0  217e					      sleep	32
      1  217e				   .CYCLES    SET	32
      2  217e
      3  217e				  -	      IF	.CYCLES < 2
      4  217e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217e				  -	      ERR
      6  217e					      ENDIF
      7  217e
      8  217e				  -	      IF	.CYCLES & 1
      9  217e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  217e				  -	      nop	0
     11  217e				  -	      ELSE
     12  217e				  -	      bit	VSYNC
     13  217e				  -	      ENDIF
     14  217e				  -.CYCLES    SET	.CYCLES - 3
     15  217e					      ENDIF
     16  217e
     17  217e					      REPEAT	.CYCLES / 2
     18  217e		       ea		      nop
     17  217e					      REPEND
     18  217f		       ea		      nop
     17  217f					      REPEND
     18  2180		       ea		      nop
     17  2180					      REPEND
     18  2181		       ea		      nop
     17  2181					      REPEND
     18  2182		       ea		      nop
     17  2182					      REPEND
     18  2183		       ea		      nop
     17  2183					      REPEND
     18  2184		       ea		      nop
     17  2184					      REPEND
     18  2185		       ea		      nop
     17  2185					      REPEND
     18  2186		       ea		      nop
     17  2186					      REPEND
     18  2187		       ea		      nop
     17  2187					      REPEND
     18  2188		       ea		      nop
     17  2188					      REPEND
     18  2189		       ea		      nop
     17  2189					      REPEND
     18  218a		       ea		      nop
     17  218a					      REPEND
     18  218b		       ea		      nop
     17  218b					      REPEND
     18  218c		       ea		      nop
     17  218c					      REPEND
     18  218d		       ea		      nop
     19  218e					      REPEND
    152  218e		       85 10		      sta	RESP0
      0  2190					      sleep	12
      1  2190				   .CYCLES    SET	12
      2  2190
      3  2190				  -	      IF	.CYCLES < 2
      4  2190				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2190				  -	      ERR
      6  2190					      ENDIF
      7  2190
      8  2190				  -	      IF	.CYCLES & 1
      9  2190				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2190				  -	      nop	0
     11  2190				  -	      ELSE
     12  2190				  -	      bit	VSYNC
     13  2190				  -	      ENDIF
     14  2190				  -.CYCLES    SET	.CYCLES - 3
     15  2190					      ENDIF
     16  2190
     17  2190					      REPEAT	.CYCLES / 2
     18  2190		       ea		      nop
     17  2190					      REPEND
     18  2191		       ea		      nop
     17  2191					      REPEND
     18  2192		       ea		      nop
     17  2192					      REPEND
     18  2193		       ea		      nop
     17  2193					      REPEND
     18  2194		       ea		      nop
     17  2194					      REPEND
     18  2195		       ea		      nop
     19  2196					      REPEND
    154  2196		       85 11		      sta	RESP1
    155  2198		       85 02		      sta	WSYNC
    156  219a		       85 2a		      sta	HMOVE
    157  219c
    158  219c		       85 02		      sta	WSYNC
    159  219e		       85 2b		      sta	HMCLR
    160  21a0
    161  21a0
    162  21a0
    163  21a0		       85 02		      sta	WSYNC
      0  21a2					      sleep	3
      1  21a2				   .CYCLES    SET	3
      2  21a2
      3  21a2				  -	      IF	.CYCLES < 2
      4  21a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21a2				  -	      ERR
      6  21a2					      ENDIF
      7  21a2
      8  21a2					      IF	.CYCLES & 1
      9  21a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  21a2		       04 00		      nop	0
     11  21a4				  -	      ELSE
     12  21a4				  -	      bit	VSYNC
     13  21a4					      ENDIF
     14  21a4				   .CYCLES    SET	.CYCLES - 3
     15  21a4					      ENDIF
     16  21a4
     17  21a4				  -	      REPEAT	.CYCLES / 2
     18  21a4				  -	      nop
     19  21a4					      REPEND
    165  21a4		       4c 00 b2 	      jmp	pfline_96x2_1_frame1
    166  21a7
    167  21a7							;align so our branch doesn't unexpectedly cross a page...
    168  21a7					      if	>. != >[.+$70]
    169  2200		       00 00 00 00*	      align	256
    170  2200					      endif
    171  2200
    172  2200				   pfline_96x2_1_frame1
    173  2200
    174  2200		       85 2a		      sta	HMOVE
    175  2202
    176  2202		       b9 55 b5 	      lda	bmp_96x2_1_07,y	;4
    177  2205		       85 1c		      sta	GRP1	;3
    178  2207
    179  2207		       a9 00		      lda	#$0	;2
    180  2209		       85 20		      sta	HMP0	;3
    181  220b		       85 21		      sta	HMP1	;3
    182  220d
    183  220d		       b9 55 b3 	      lda	bmp_96x2_1_01,y
    184  2210		       8d 1b 00 	      sta.w	GRP0
    185  2213		       b9 00 b4 	      lda	bmp_96x2_1_03,y
    186  2216		       85 1b		      sta	GRP0
    187  2218		       b9 aa b4 	      lda	bmp_96x2_1_05,y
    188  221b		       85 1b		      sta	GRP0
    189  221d
      0  221d					      sleep	2
      1  221d				   .CYCLES    SET	2
      2  221d
      3  221d				  -	      IF	.CYCLES < 2
      4  221d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  221d				  -	      ERR
      6  221d					      ENDIF
      7  221d
      8  221d				  -	      IF	.CYCLES & 1
      9  221d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  221d				  -	      nop	0
     11  221d				  -	      ELSE
     12  221d				  -	      bit	VSYNC
     13  221d				  -	      ENDIF
     14  221d				  -.CYCLES    SET	.CYCLES - 3
     15  221d					      ENDIF
     16  221d
     17  221d					      REPEAT	.CYCLES / 2
     18  221d		       ea		      nop
     19  221e					      REPEND
    191  221e
    192  221e		       b9 00 b6 	      lda	bmp_96x2_1_09,y
    193  2221		       85 1c		      sta	GRP1
    194  2223		       b9 aa b6 	      lda	bmp_96x2_1_11,y
    195  2226		       85 1c		      sta	GRP1
    196  2228
    197  2228		       b9 00 b3 	      lda	bmp_96x2_1_00,y
    198  222b		       85 1b		      sta	GRP0
    199  222d
    200  222d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2230
    202  2230							;sta WSYNC	;=0 -----------------------------------------
    203  2230
    204  2230		       b9 00 b5 	      lda	bmp_96x2_1_06,y
    205  2233		       85 1c		      sta	GRP1
    206  2235
      0  2235					      sleep	8
      1  2235				   .CYCLES    SET	8
      2  2235
      3  2235				  -	      IF	.CYCLES < 2
      4  2235				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2235				  -	      ERR
      6  2235					      ENDIF
      7  2235
      8  2235				  -	      IF	.CYCLES & 1
      9  2235				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2235				  -	      nop	0
     11  2235				  -	      ELSE
     12  2235				  -	      bit	VSYNC
     13  2235				  -	      ENDIF
     14  2235				  -.CYCLES    SET	.CYCLES - 3
     15  2235					      ENDIF
     16  2235
     17  2235					      REPEAT	.CYCLES / 2
     18  2235		       ea		      nop
     17  2235					      REPEND
     18  2236		       ea		      nop
     17  2236					      REPEND
     18  2237		       ea		      nop
     17  2237					      REPEND
     18  2238		       ea		      nop
     19  2239					      REPEND
    208  2239
    209  2239		       b9 86 b2 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  223c		       aa		      tax		;2
    211  223d
      0  223d					      sleep	3
      1  223d				   .CYCLES    SET	3
      2  223d
      3  223d				  -	      IF	.CYCLES < 2
      4  223d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  223d				  -	      ERR
      6  223d					      ENDIF
      7  223d
      8  223d					      IF	.CYCLES & 1
      9  223d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  223d		       04 00		      nop	0
     11  223f				  -	      ELSE
     12  223f				  -	      bit	VSYNC
     13  223f					      ENDIF
     14  223f				   .CYCLES    SET	.CYCLES - 3
     15  223f					      ENDIF
     16  223f
     17  223f				  -	      REPEAT	.CYCLES / 2
     18  223f				  -	      nop
     19  223f					      REPEND
    213  223f
    214  223f		       a9 80		      lda	#$80	;2
    215  2241		       85 20		      sta	HMP0	;3
    216  2243		       85 21		      sta	HMP1	;3
    217  2245
    218  2245
    219  2245		       b9 aa b3 	      lda	bmp_96x2_1_02,y	;5
    220  2248		       85 1b		      sta	GRP0	;3 =  8
    221  224a
    222  224a		       b9 55 b4 	      lda	bmp_96x2_1_04,y	;5
    223  224d		       85 1b		      sta	GRP0	;3 =  8
    224  224f
      0  224f					      sleep	2
      1  224f				   .CYCLES    SET	2
      2  224f
      3  224f				  -	      IF	.CYCLES < 2
      4  224f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224f				  -	      ERR
      6  224f					      ENDIF
      7  224f
      8  224f				  -	      IF	.CYCLES & 1
      9  224f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  224f				  -	      nop	0
     11  224f				  -	      ELSE
     12  224f				  -	      bit	VSYNC
     13  224f				  -	      ENDIF
     14  224f				  -.CYCLES    SET	.CYCLES - 3
     15  224f					      ENDIF
     16  224f
     17  224f					      REPEAT	.CYCLES / 2
     18  224f		       ea		      nop
     19  2250					      REPEND
    226  2250
    227  2250		       b9 aa b5 	      lda	bmp_96x2_1_08,y	;5
    228  2253		       85 1c		      sta	GRP1	;3 =  8
    229  2255
    230  2255		       b9 55 b6 	      lda	bmp_96x2_1_10,y	;5
    231  2258		       85 1c		      sta	GRP1	;3 =  8
    232  225a
      0  225a					      sleep	4
      1  225a				   .CYCLES    SET	4
      2  225a
      3  225a				  -	      IF	.CYCLES < 2
      4  225a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  225a				  -	      ERR
      6  225a					      ENDIF
      7  225a
      8  225a				  -	      IF	.CYCLES & 1
      9  225a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  225a				  -	      nop	0
     11  225a				  -	      ELSE
     12  225a				  -	      bit	VSYNC
     13  225a				  -	      ENDIF
     14  225a				  -.CYCLES    SET	.CYCLES - 3
     15  225a					      ENDIF
     16  225a
     17  225a					      REPEAT	.CYCLES / 2
     18  225a		       ea		      nop
     17  225a					      REPEND
     18  225b		       ea		      nop
     19  225c					      REPEND
    234  225c
    235  225c		       88		      dey
    236  225d
    237  225d		       8a		      txa
    238  225e				  -	      ifconst	bmp_96x2_1_fade
    239  225e				  -	      and	bmp_96x2_1_fade
    240  225e					      else
      0  225e					      sleep	3
      1  225e				   .CYCLES    SET	3
      2  225e
      3  225e				  -	      IF	.CYCLES < 2
      4  225e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  225e				  -	      ERR
      6  225e					      ENDIF
      7  225e
      8  225e					      IF	.CYCLES & 1
      9  225e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  225e		       04 00		      nop	0
     11  2260				  -	      ELSE
     12  2260				  -	      bit	VSYNC
     13  2260					      ENDIF
     14  2260				   .CYCLES    SET	.CYCLES - 3
     15  2260					      ENDIF
     16  2260
     17  2260				  -	      REPEAT	.CYCLES / 2
     18  2260				  -	      nop
     19  2260					      REPEND
    242  2260					      endif
    243  2260		       85 07		      sta	COLUP1	;3
    244  2262		       85 06		      sta	COLUP0	;3
    245  2264
    246  2264		       c4 9c		      cpy	temp1	;2
    247  2266		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2268
    249  2268				   pf96x2_1_1codeend
    250  2268							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2268
    252  2268		       a9 00		      lda	#0
    253  226a		       85 1b		      sta	GRP0
    254  226c		       85 1c		      sta	GRP1
    255  226e
    256  226e				   pfdone_96x2_1
    257  226e		       85 02		      sta	WSYNC	; debug
    258  2270
    259  2270		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
     76  2271					      endif		;mk_96x2_1_on
     77  2271
     78  2271				  -	      ifconst	mk_96x2_2_on
     79  2271				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
     80  2271					      endif		;mk_96x2_2_on
     81  2271
     82  2271				  -	      ifconst	mk_score_on
     83  2271				  -	      include	"titlescreen/asm/score_kernel.asm"
     84  2271					      endif		;mk_score_on
     85  2271
     86  2271				  -	      ifconst	mk_gameselect_on
     87  2271				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
     88  2271					      endif		;mk_gameselect_on
     89  2271
     90  2271				   PFWAIT
     91  2271		       ad 84 02 	      lda	INTIM
     92  2274		       d0 fb		      bne	PFWAIT
     93  2276		       85 02		      sta	WSYNC
     94  2278
     95  2278				   OVERSCAN
     96  2278				  -	      ifnconst	overscan_time
     97  2278				  -	      lda	#34+128
     98  2278					      else
     99  2278		       a9 a0		      lda	#overscan_time+128-5
    100  227a					      endif
    101  227a		       8d 96 02 	      sta	TIM64T
    102  227d
    103  227d							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    104  227d				  -	      ifconst	player9height
    105  227d				  -	      ldy	#8
    106  227d				  -	      lda	#0
    107  227d				  -	      sta	player0height
    108  227d				  -.playerheightfixloop
    109  227d				  -	      sta	player1height,y
    110  227d				  -	      ifconst	_NUSIZ1
    111  227d				  -	      sta	_NUSIZ1,y
    112  227d				  -	      endif
    113  227d				  -	      dey
    114  227d				  -	      bpl	.playerheightfixloop
    115  227d					      endif
    116  227d
    117  227d		       a9 c2		      lda	#%11000010
    118  227f		       85 02		      sta	WSYNC
    119  2281		       85 01		      sta	VBLANK
      0  2283					      RETURN
      1  2283				  -	      ifnconst	bankswitch
      2  2283				  -	      rts
      3  2283					      else
      4  2283		       4c dd ff 	      jmp	BS_return
      5  2286					      endif
    121  2286
    122  2286
    123  2286
    124  2286					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 2
      0  2286					      include	"titlescreen/96x2_1_image.asm"
      1  2286							;*** The height of the displayed data...
      2  2286		       00 55	   bmp_96x2_1_window =	85
      3  2286
      4  2286							;*** The height of the bitmap data. This can be larger than
      5  2286							;*** the displayed data height, if you're scrolling or animating
      6  2286							;*** the data...
      7  2286		       00 55	   bmp_96x2_1_height =	85
      8  2286
      9  2286
     10  2286				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     11  2286				  -	      align	256
     12  2286					      endif
     13  2286		       00		      BYTE.b	$00	; leave this here!
     14  2287
     15  2287
     16  2287							;*** The color of each line in the bitmap, in reverse order...
     17  2287				   bmp_96x2_1_colors
     18  2287		       0e		      .byte.b	$0E
     19  2288		       0e		      .byte.b	$0E
     20  2289		       0e		      .byte.b	$0E
     21  228a		       0e		      .byte.b	$0E
     22  228b		       0e		      .byte.b	$0E
     23  228c		       0e		      .byte.b	$0E
     24  228d		       0e		      .byte.b	$0E
     25  228e		       0e		      .byte.b	$0E
     26  228f		       0e		      .byte.b	$0E
     27  2290		       0e		      .byte.b	$0E
     28  2291		       0e		      .byte.b	$0E
     29  2292		       0e		      .byte.b	$0E
     30  2293		       0e		      .byte.b	$0E
     31  2294		       0e		      .byte.b	$0E
     32  2295		       0e		      .byte.b	$0E
     33  2296		       0e		      .byte.b	$0E
     34  2297		       0e		      .byte.b	$0E
     35  2298		       0e		      .byte.b	$0E
     36  2299		       0e		      .byte.b	$0E
     37  229a		       0e		      .byte.b	$0E
     38  229b		       0e		      .byte.b	$0E
     39  229c		       44		      .byte.b	$44
     40  229d		       44		      .byte.b	$44
     41  229e		       44		      .byte.b	$44
     42  229f		       44		      .byte.b	$44
     43  22a0		       44		      .byte.b	$44
     44  22a1		       44		      .byte.b	$44
     45  22a2		       44		      .byte.b	$44
     46  22a3		       44		      .byte.b	$44
     47  22a4		       44		      .byte.b	$44
     48  22a5		       44		      .byte.b	$44
     49  22a6		       44		      .byte.b	$44
     50  22a7		       44		      .byte.b	$44
     51  22a8		       0e		      .byte.b	$0E
     52  22a9		       0e		      .byte.b	$0E
     53  22aa		       0e		      .byte.b	$0E
     54  22ab		       0e		      .byte.b	$0E
     55  22ac		       0e		      .byte.b	$0E
     56  22ad		       0e		      .byte.b	$0E
     57  22ae		       0e		      .byte.b	$0E
     58  22af		       0e		      .byte.b	$0E
     59  22b0		       1c		      .byte.b	$1C
     60  22b1		       1c		      .byte.b	$1C
     61  22b2		       1c		      .byte.b	$1C
     62  22b3		       1c		      .byte.b	$1C
     63  22b4		       1c		      .byte.b	$1C
     64  22b5		       1c		      .byte.b	$1C
     65  22b6		       1c		      .byte.b	$1C
     66  22b7		       1c		      .byte.b	$1C
     67  22b8		       1c		      .byte.b	$1C
     68  22b9		       1c		      .byte.b	$1C
     69  22ba		       1c		      .byte.b	$1C
     70  22bb		       1c		      .byte.b	$1C
     71  22bc		       0e		      .byte.b	$0E
     72  22bd		       0e		      .byte.b	$0E
     73  22be		       1c		      .byte.b	$1C
     74  22bf		       1c		      .byte.b	$1C
     75  22c0		       1c		      .byte.b	$1C
     76  22c1		       1c		      .byte.b	$1C
     77  22c2		       1c		      .byte.b	$1C
     78  22c3		       1c		      .byte.b	$1C
     79  22c4		       1c		      .byte.b	$1C
     80  22c5		       1c		      .byte.b	$1C
     81  22c6		       1c		      .byte.b	$1C
     82  22c7		       1c		      .byte.b	$1C
     83  22c8		       1c		      .byte.b	$1C
     84  22c9		       1c		      .byte.b	$1C
     85  22ca		       0e		      .byte.b	$0E
     86  22cb		       0e		      .byte.b	$0E
     87  22cc		       0e		      .byte.b	$0E
     88  22cd		       1c		      .byte.b	$1C
     89  22ce		       1c		      .byte.b	$1C
     90  22cf		       1c		      .byte.b	$1C
     91  22d0		       1c		      .byte.b	$1C
     92  22d1		       1c		      .byte.b	$1C
     93  22d2		       1c		      .byte.b	$1C
     94  22d3		       1c		      .byte.b	$1C
     95  22d4		       1c		      .byte.b	$1C
     96  22d5		       1c		      .byte.b	$1C
     97  22d6		       1c		      .byte.b	$1C
     98  22d7		       1c		      .byte.b	$1C
     99  22d8		       1c		      .byte.b	$1C
    100  22d9		       0e		      .byte.b	$0E
    101  22da		       0e		      .byte.b	$0E
    102  22db		       0e		      .byte.b	$0E
    103  22dc
    104  22dc
    105  22dc					      if	>. != >[.+(bmp_96x2_1_height)]
    106  2300		       00 00 00 00*	      align	256
    107  2300					      endif
    108  2300
    109  2300
    110  2300				   bmp_96x2_1_00
    111  2300							; *** replace this block with your bimap_00 data block...
    112  2300		       00		      BYTE.b	%00000000
    113  2301		       00		      BYTE.b	%00000000
    114  2302		       00		      BYTE.b	%00000000
    115  2303		       00		      BYTE.b	%00000000
    116  2304		       00		      BYTE.b	%00000000
    117  2305		       00		      BYTE.b	%00000000
    118  2306		       00		      BYTE.b	%00000000
    119  2307		       00		      BYTE.b	%00000000
    120  2308		       00		      BYTE.b	%00000000
    121  2309		       00		      BYTE.b	%00000000
    122  230a		       00		      BYTE.b	%00000000
    123  230b		       00		      BYTE.b	%00000000
    124  230c		       00		      BYTE.b	%00000000
    125  230d		       00		      BYTE.b	%00000000
    126  230e		       00		      BYTE.b	%00000000
    127  230f		       00		      BYTE.b	%00000000
    128  2310		       00		      BYTE.b	%00000000
    129  2311		       00		      BYTE.b	%00000000
    130  2312		       00		      BYTE.b	%00000000
    131  2313		       00		      BYTE.b	%00000000
    132  2314		       00		      BYTE.b	%00000000
    133  2315		       00		      BYTE.b	%00000000
    134  2316		       00		      BYTE.b	%00000000
    135  2317		       00		      BYTE.b	%00000000
    136  2318		       00		      BYTE.b	%00000000
    137  2319		       00		      BYTE.b	%00000000
    138  231a		       00		      BYTE.b	%00000000
    139  231b		       00		      BYTE.b	%00000000
    140  231c		       00		      BYTE.b	%00000000
    141  231d		       00		      BYTE.b	%00000000
    142  231e		       00		      BYTE.b	%00000000
    143  231f		       00		      BYTE.b	%00000000
    144  2320		       00		      BYTE.b	%00000000
    145  2321		       00		      BYTE.b	%00000000
    146  2322		       00		      BYTE.b	%00000000
    147  2323		       00		      BYTE.b	%00000000
    148  2324		       00		      BYTE.b	%00000000
    149  2325		       00		      BYTE.b	%00000000
    150  2326		       00		      BYTE.b	%00000000
    151  2327		       00		      BYTE.b	%00000000
    152  2328		       00		      BYTE.b	%00000000
    153  2329		       7c		      BYTE.b	%01111100
    154  232a		       7c		      BYTE.b	%01111100
    155  232b		       7c		      BYTE.b	%01111100
    156  232c		       7c		      BYTE.b	%01111100
    157  232d		       7c		      BYTE.b	%01111100
    158  232e		       7c		      BYTE.b	%01111100
    159  232f		       7f		      BYTE.b	%01111111
    160  2330		       7f		      BYTE.b	%01111111
    161  2331		       7f		      BYTE.b	%01111111
    162  2332		       7f		      BYTE.b	%01111111
    163  2333		       7c		      BYTE.b	%01111100
    164  2334		       00		      BYTE.b	%00000000
    165  2335		       00		      BYTE.b	%00000000
    166  2336		       00		      BYTE.b	%00000000
    167  2337		       00		      BYTE.b	%00000000
    168  2338		       00		      BYTE.b	%00000000
    169  2339		       00		      BYTE.b	%00000000
    170  233a		       00		      BYTE.b	%00000000
    171  233b		       00		      BYTE.b	%00000000
    172  233c		       00		      BYTE.b	%00000000
    173  233d		       00		      BYTE.b	%00000000
    174  233e		       00		      BYTE.b	%00000000
    175  233f		       00		      BYTE.b	%00000000
    176  2340		       00		      BYTE.b	%00000000
    177  2341		       00		      BYTE.b	%00000000
    178  2342		       00		      BYTE.b	%00000000
    179  2343		       00		      BYTE.b	%00000000
    180  2344		       00		      BYTE.b	%00000000
    181  2345		       00		      BYTE.b	%00000000
    182  2346		       00		      BYTE.b	%00000000
    183  2347		       00		      BYTE.b	%00000000
    184  2348		       00		      BYTE.b	%00000000
    185  2349		       00		      BYTE.b	%00000000
    186  234a		       00		      BYTE.b	%00000000
    187  234b		       00		      BYTE.b	%00000000
    188  234c		       00		      BYTE.b	%00000000
    189  234d		       00		      BYTE.b	%00000000
    190  234e		       00		      BYTE.b	%00000000
    191  234f		       00		      BYTE.b	%00000000
    192  2350		       00		      BYTE.b	%00000000
    193  2351		       00		      BYTE.b	%00000000
    194  2352		       00		      BYTE.b	%00000000
    195  2353		       00		      BYTE.b	%00000000
    196  2354		       00		      BYTE.b	%00000000
    197  2355
    198  2355
    199  2355
    200  2355				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    201  2355				  -	      align	256
    202  2355					      endif
    203  2355
    204  2355
    205  2355				   bmp_96x2_1_01
    206  2355							; *** replace this block with your bimap_01 data block...
    207  2355		       00		      BYTE.b	%00000000
    208  2356		       00		      BYTE.b	%00000000
    209  2357		       00		      BYTE.b	%00000000
    210  2358		       00		      BYTE.b	%00000000
    211  2359		       00		      BYTE.b	%00000000
    212  235a		       00		      BYTE.b	%00000000
    213  235b		       00		      BYTE.b	%00000000
    214  235c		       00		      BYTE.b	%00000000
    215  235d		       00		      BYTE.b	%00000000
    216  235e		       00		      BYTE.b	%00000000
    217  235f		       00		      BYTE.b	%00000000
    218  2360		       00		      BYTE.b	%00000000
    219  2361		       00		      BYTE.b	%00000000
    220  2362		       00		      BYTE.b	%00000000
    221  2363		       00		      BYTE.b	%00000000
    222  2364		       00		      BYTE.b	%00000000
    223  2365		       00		      BYTE.b	%00000000
    224  2366		       00		      BYTE.b	%00000000
    225  2367		       00		      BYTE.b	%00000000
    226  2368		       00		      BYTE.b	%00000000
    227  2369		       00		      BYTE.b	%00000000
    228  236a		       00		      BYTE.b	%00000000
    229  236b		       00		      BYTE.b	%00000000
    230  236c		       00		      BYTE.b	%00000000
    231  236d		       00		      BYTE.b	%00000000
    232  236e		       00		      BYTE.b	%00000000
    233  236f		       00		      BYTE.b	%00000000
    234  2370		       00		      BYTE.b	%00000000
    235  2371		       00		      BYTE.b	%00000000
    236  2372		       00		      BYTE.b	%00000000
    237  2373		       00		      BYTE.b	%00000000
    238  2374		       00		      BYTE.b	%00000000
    239  2375		       00		      BYTE.b	%00000000
    240  2376		       00		      BYTE.b	%00000000
    241  2377		       00		      BYTE.b	%00000000
    242  2378		       00		      BYTE.b	%00000000
    243  2379		       00		      BYTE.b	%00000000
    244  237a		       00		      BYTE.b	%00000000
    245  237b		       00		      BYTE.b	%00000000
    246  237c		       00		      BYTE.b	%00000000
    247  237d		       00		      BYTE.b	%00000000
    248  237e		       0f		      BYTE.b	%00001111
    249  237f		       0f		      BYTE.b	%00001111
    250  2380		       0f		      BYTE.b	%00001111
    251  2381		       cf		      BYTE.b	%11001111
    252  2382		       cf		      BYTE.b	%11001111
    253  2383		       cf		      BYTE.b	%11001111
    254  2384		       ff		      BYTE.b	%11111111
    255  2385		       ff		      BYTE.b	%11111111
    256  2386		       3f		      BYTE.b	%00111111
    257  2387		       3f		      BYTE.b	%00111111
    258  2388		       0f		      BYTE.b	%00001111
    259  2389		       00		      BYTE.b	%00000000
    260  238a		       00		      BYTE.b	%00000000
    261  238b		       00		      BYTE.b	%00000000
    262  238c		       00		      BYTE.b	%00000000
    263  238d		       1f		      BYTE.b	%00011111
    264  238e		       1f		      BYTE.b	%00011111
    265  238f		       1f		      BYTE.b	%00011111
    266  2390		       1f		      BYTE.b	%00011111
    267  2391		       1f		      BYTE.b	%00011111
    268  2392		       1f		      BYTE.b	%00011111
    269  2393		       1f		      BYTE.b	%00011111
    270  2394		       1f		      BYTE.b	%00011111
    271  2395		       1f		      BYTE.b	%00011111
    272  2396		       1f		      BYTE.b	%00011111
    273  2397		       1f		      BYTE.b	%00011111
    274  2398		       00		      BYTE.b	%00000000
    275  2399		       00		      BYTE.b	%00000000
    276  239a		       00		      BYTE.b	%00000000
    277  239b		       00		      BYTE.b	%00000000
    278  239c		       00		      BYTE.b	%00000000
    279  239d		       00		      BYTE.b	%00000000
    280  239e		       00		      BYTE.b	%00000000
    281  239f		       00		      BYTE.b	%00000000
    282  23a0		       00		      BYTE.b	%00000000
    283  23a1		       00		      BYTE.b	%00000000
    284  23a2		       00		      BYTE.b	%00000000
    285  23a3		       00		      BYTE.b	%00000000
    286  23a4		       00		      BYTE.b	%00000000
    287  23a5		       00		      BYTE.b	%00000000
    288  23a6		       00		      BYTE.b	%00000000
    289  23a7		       00		      BYTE.b	%00000000
    290  23a8		       00		      BYTE.b	%00000000
    291  23a9		       00		      BYTE.b	%00000000
    292  23aa
    293  23aa
    294  23aa
    295  23aa				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    296  23aa				  -	      align	256
    297  23aa					      endif
    298  23aa
    299  23aa
    300  23aa				   bmp_96x2_1_02
    301  23aa							; *** replace this block with your bimap_02 data block...
    302  23aa		       00		      BYTE.b	%00000000
    303  23ab		       00		      BYTE.b	%00000000
    304  23ac		       00		      BYTE.b	%00000000
    305  23ad		       00		      BYTE.b	%00000000
    306  23ae		       00		      BYTE.b	%00000000
    307  23af		       00		      BYTE.b	%00000000
    308  23b0		       34		      BYTE.b	%00110100
    309  23b1		       44		      BYTE.b	%01000100
    310  23b2		       46		      BYTE.b	%01000110
    311  23b3		       30		      BYTE.b	%00110000
    312  23b4		       00		      BYTE.b	%00000000
    313  23b5		       00		      BYTE.b	%00000000
    314  23b6		       00		      BYTE.b	%00000000
    315  23b7		       00		      BYTE.b	%00000000
    316  23b8		       00		      BYTE.b	%00000000
    317  23b9		       00		      BYTE.b	%00000000
    318  23ba		       00		      BYTE.b	%00000000
    319  23bb		       00		      BYTE.b	%00000000
    320  23bc		       00		      BYTE.b	%00000000
    321  23bd		       00		      BYTE.b	%00000000
    322  23be		       00		      BYTE.b	%00000000
    323  23bf		       00		      BYTE.b	%00000000
    324  23c0		       00		      BYTE.b	%00000000
    325  23c1		       00		      BYTE.b	%00000000
    326  23c2		       00		      BYTE.b	%00000000
    327  23c3		       00		      BYTE.b	%00000000
    328  23c4		       00		      BYTE.b	%00000000
    329  23c5		       00		      BYTE.b	%00000000
    330  23c6		       00		      BYTE.b	%00000000
    331  23c7		       00		      BYTE.b	%00000000
    332  23c8		       00		      BYTE.b	%00000000
    333  23c9		       00		      BYTE.b	%00000000
    334  23ca		       00		      BYTE.b	%00000000
    335  23cb		       00		      BYTE.b	%00000000
    336  23cc		       00		      BYTE.b	%00000000
    337  23cd		       00		      BYTE.b	%00000000
    338  23ce		       00		      BYTE.b	%00000000
    339  23cf		       00		      BYTE.b	%00000000
    340  23d0		       00		      BYTE.b	%00000000
    341  23d1		       00		      BYTE.b	%00000000
    342  23d2		       00		      BYTE.b	%00000000
    343  23d3		       87		      BYTE.b	%10000111
    344  23d4		       87		      BYTE.b	%10000111
    345  23d5		       87		      BYTE.b	%10000111
    346  23d6		       87		      BYTE.b	%10000111
    347  23d7		       87		      BYTE.b	%10000111
    348  23d8		       87		      BYTE.b	%10000111
    349  23d9		       87		      BYTE.b	%10000111
    350  23da		       87		      BYTE.b	%10000111
    351  23db		       81		      BYTE.b	%10000001
    352  23dc		       81		      BYTE.b	%10000001
    353  23dd		       80		      BYTE.b	%10000000
    354  23de		       00		      BYTE.b	%00000000
    355  23df		       00		      BYTE.b	%00000000
    356  23e0		       00		      BYTE.b	%00000000
    357  23e1		       00		      BYTE.b	%00000000
    358  23e2		       ff		      BYTE.b	%11111111
    359  23e3		       ff		      BYTE.b	%11111111
    360  23e4		       03		      BYTE.b	%00000011
    361  23e5		       03		      BYTE.b	%00000011
    362  23e6		       03		      BYTE.b	%00000011
    363  23e7		       ff		      BYTE.b	%11111111
    364  23e8		       ff		      BYTE.b	%11111111
    365  23e9		       03		      BYTE.b	%00000011
    366  23ea		       03		      BYTE.b	%00000011
    367  23eb		       ff		      BYTE.b	%11111111
    368  23ec		       ff		      BYTE.b	%11111111
    369  23ed		       00		      BYTE.b	%00000000
    370  23ee		       00		      BYTE.b	%00000000
    371  23ef		       00		      BYTE.b	%00000000
    372  23f0		       00		      BYTE.b	%00000000
    373  23f1		       00		      BYTE.b	%00000000
    374  23f2		       00		      BYTE.b	%00000000
    375  23f3		       00		      BYTE.b	%00000000
    376  23f4		       00		      BYTE.b	%00000000
    377  23f5		       00		      BYTE.b	%00000000
    378  23f6		       00		      BYTE.b	%00000000
    379  23f7		       00		      BYTE.b	%00000000
    380  23f8		       00		      BYTE.b	%00000000
    381  23f9		       00		      BYTE.b	%00000000
    382  23fa		       00		      BYTE.b	%00000000
    383  23fb		       00		      BYTE.b	%00000000
    384  23fc		       00		      BYTE.b	%00000000
    385  23fd		       00		      BYTE.b	%00000000
    386  23fe		       00		      BYTE.b	%00000000
    387  23ff
    388  23ff
    389  23ff
    390  23ff					      if	>. != >[.+(bmp_96x2_1_height)]
    391  2400		       00		      align	256
    392  2400					      endif
    393  2400
    394  2400
    395  2400				   bmp_96x2_1_03
    396  2400							; *** replace this block with your bimap_03 data block...
    397  2400		       00		      BYTE.b	%00000000
    398  2401		       00		      BYTE.b	%00000000
    399  2402		       00		      BYTE.b	%00000000
    400  2403		       00		      BYTE.b	%00000000
    401  2404		       00		      BYTE.b	%00000000
    402  2405		       00		      BYTE.b	%00000000
    403  2406		       e6		      BYTE.b	%11100110
    404  2407		       ca		      BYTE.b	%11001010
    405  2408		       e6		      BYTE.b	%11100110
    406  2409		       00		      BYTE.b	%00000000
    407  240a		       00		      BYTE.b	%00000000
    408  240b		       00		      BYTE.b	%00000000
    409  240c		       00		      BYTE.b	%00000000
    410  240d		       00		      BYTE.b	%00000000
    411  240e		       00		      BYTE.b	%00000000
    412  240f		       00		      BYTE.b	%00000000
    413  2410		       00		      BYTE.b	%00000000
    414  2411		       00		      BYTE.b	%00000000
    415  2412		       00		      BYTE.b	%00000000
    416  2413		       00		      BYTE.b	%00000000
    417  2414		       00		      BYTE.b	%00000000
    418  2415		       00		      BYTE.b	%00000000
    419  2416		       00		      BYTE.b	%00000000
    420  2417		       00		      BYTE.b	%00000000
    421  2418		       00		      BYTE.b	%00000000
    422  2419		       00		      BYTE.b	%00000000
    423  241a		       00		      BYTE.b	%00000000
    424  241b		       00		      BYTE.b	%00000000
    425  241c		       02		      BYTE.b	%00000010
    426  241d		       03		      BYTE.b	%00000011
    427  241e		       02		      BYTE.b	%00000010
    428  241f		       03		      BYTE.b	%00000011
    429  2420		       00		      BYTE.b	%00000000
    430  2421		       00		      BYTE.b	%00000000
    431  2422		       00		      BYTE.b	%00000000
    432  2423		       00		      BYTE.b	%00000000
    433  2424		       00		      BYTE.b	%00000000
    434  2425		       00		      BYTE.b	%00000000
    435  2426		       00		      BYTE.b	%00000000
    436  2427		       00		      BYTE.b	%00000000
    437  2428		       00		      BYTE.b	%00000000
    438  2429		       80		      BYTE.b	%10000000
    439  242a		       80		      BYTE.b	%10000000
    440  242b		       80		      BYTE.b	%10000000
    441  242c		       ff		      BYTE.b	%11111111
    442  242d		       ff		      BYTE.b	%11111111
    443  242e		       80		      BYTE.b	%10000000
    444  242f		       80		      BYTE.b	%10000000
    445  2430		       c1		      BYTE.b	%11000001
    446  2431		       f7		      BYTE.b	%11110111
    447  2432		       ff		      BYTE.b	%11111111
    448  2433		       7f		      BYTE.b	%01111111
    449  2434		       00		      BYTE.b	%00000000
    450  2435		       00		      BYTE.b	%00000000
    451  2436		       00		      BYTE.b	%00000000
    452  2437		       00		      BYTE.b	%00000000
    453  2438		       83		      BYTE.b	%10000011
    454  2439		       83		      BYTE.b	%10000011
    455  243a		       e3		      BYTE.b	%11100011
    456  243b		       e3		      BYTE.b	%11100011
    457  243c		       e3		      BYTE.b	%11100011
    458  243d		       83		      BYTE.b	%10000011
    459  243e		       e3		      BYTE.b	%11100011
    460  243f		       e3		      BYTE.b	%11100011
    461  2440		       e3		      BYTE.b	%11100011
    462  2441		       c3		      BYTE.b	%11000011
    463  2442		       83		      BYTE.b	%10000011
    464  2443		       00		      BYTE.b	%00000000
    465  2444		       00		      BYTE.b	%00000000
    466  2445		       00		      BYTE.b	%00000000
    467  2446		       00		      BYTE.b	%00000000
    468  2447		       00		      BYTE.b	%00000000
    469  2448		       00		      BYTE.b	%00000000
    470  2449		       00		      BYTE.b	%00000000
    471  244a		       00		      BYTE.b	%00000000
    472  244b		       00		      BYTE.b	%00000000
    473  244c		       00		      BYTE.b	%00000000
    474  244d		       00		      BYTE.b	%00000000
    475  244e		       00		      BYTE.b	%00000000
    476  244f		       00		      BYTE.b	%00000000
    477  2450		       00		      BYTE.b	%00000000
    478  2451		       00		      BYTE.b	%00000000
    479  2452		       00		      BYTE.b	%00000000
    480  2453		       00		      BYTE.b	%00000000
    481  2454		       00		      BYTE.b	%00000000
    482  2455
    483  2455
    484  2455
    485  2455				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    486  2455				  -	      align	256
    487  2455					      endif
    488  2455
    489  2455
    490  2455				   bmp_96x2_1_04
    491  2455							; *** replace this block with your bimap_04 data block...
    492  2455		       00		      BYTE.b	%00000000
    493  2456		       00		      BYTE.b	%00000000
    494  2457		       00		      BYTE.b	%00000000
    495  2458		       00		      BYTE.b	%00000000
    496  2459		       00		      BYTE.b	%00000000
    497  245a		       00		      BYTE.b	%00000000
    498  245b		       4e		      BYTE.b	%01001110
    499  245c		       4c		      BYTE.b	%01001100
    500  245d		       ee		      BYTE.b	%11101110
    501  245e		       40		      BYTE.b	%01000000
    502  245f		       00		      BYTE.b	%00000000
    503  2460		       00		      BYTE.b	%00000000
    504  2461		       00		      BYTE.b	%00000000
    505  2462		       00		      BYTE.b	%00000000
    506  2463		       00		      BYTE.b	%00000000
    507  2464		       00		      BYTE.b	%00000000
    508  2465		       00		      BYTE.b	%00000000
    509  2466		       00		      BYTE.b	%00000000
    510  2467		       00		      BYTE.b	%00000000
    511  2468		       00		      BYTE.b	%00000000
    512  2469		       00		      BYTE.b	%00000000
    513  246a		       11		      BYTE.b	%00010001
    514  246b		       12		      BYTE.b	%00010010
    515  246c		       12		      BYTE.b	%00010010
    516  246d		       39		      BYTE.b	%00111001
    517  246e		       00		      BYTE.b	%00000000
    518  246f		       00		      BYTE.b	%00000000
    519  2470		       00		      BYTE.b	%00000000
    520  2471		       2b		      BYTE.b	%00101011
    521  2472		       32		      BYTE.b	%00110010
    522  2473		       ab		      BYTE.b	%10101011
    523  2474		       33		      BYTE.b	%00110011
    524  2475		       00		      BYTE.b	%00000000
    525  2476		       00		      BYTE.b	%00000000
    526  2477		       00		      BYTE.b	%00000000
    527  2478		       00		      BYTE.b	%00000000
    528  2479		       00		      BYTE.b	%00000000
    529  247a		       00		      BYTE.b	%00000000
    530  247b		       00		      BYTE.b	%00000000
    531  247c		       00		      BYTE.b	%00000000
    532  247d		       00		      BYTE.b	%00000000
    533  247e		       f8		      BYTE.b	%11111000
    534  247f		       f8		      BYTE.b	%11111000
    535  2480		       f8		      BYTE.b	%11111000
    536  2481		       f8		      BYTE.b	%11111000
    537  2482		       f8		      BYTE.b	%11111000
    538  2483		       f8		      BYTE.b	%11111000
    539  2484		       f8		      BYTE.b	%11111000
    540  2485		       f8		      BYTE.b	%11111000
    541  2486		       c0		      BYTE.b	%11000000
    542  2487		       c0		      BYTE.b	%11000000
    543  2488		       00		      BYTE.b	%00000000
    544  2489		       00		      BYTE.b	%00000000
    545  248a		       00		      BYTE.b	%00000000
    546  248b		       00		      BYTE.b	%00000000
    547  248c		       00		      BYTE.b	%00000000
    548  248d		       ff		      BYTE.b	%11111111
    549  248e		       ff		      BYTE.b	%11111111
    550  248f		       e0		      BYTE.b	%11100000
    551  2490		       e0		      BYTE.b	%11100000
    552  2491		       e0		      BYTE.b	%11100000
    553  2492		       ff		      BYTE.b	%11111111
    554  2493		       ff		      BYTE.b	%11111111
    555  2494		       e0		      BYTE.b	%11100000
    556  2495		       e0		      BYTE.b	%11100000
    557  2496		       ff		      BYTE.b	%11111111
    558  2497		       ff		      BYTE.b	%11111111
    559  2498		       00		      BYTE.b	%00000000
    560  2499		       00		      BYTE.b	%00000000
    561  249a		       00		      BYTE.b	%00000000
    562  249b		       00		      BYTE.b	%00000000
    563  249c		       00		      BYTE.b	%00000000
    564  249d		       00		      BYTE.b	%00000000
    565  249e		       00		      BYTE.b	%00000000
    566  249f		       00		      BYTE.b	%00000000
    567  24a0		       00		      BYTE.b	%00000000
    568  24a1		       00		      BYTE.b	%00000000
    569  24a2		       00		      BYTE.b	%00000000
    570  24a3		       00		      BYTE.b	%00000000
    571  24a4		       00		      BYTE.b	%00000000
    572  24a5		       00		      BYTE.b	%00000000
    573  24a6		       00		      BYTE.b	%00000000
    574  24a7		       00		      BYTE.b	%00000000
    575  24a8		       00		      BYTE.b	%00000000
    576  24a9		       00		      BYTE.b	%00000000
    577  24aa
    578  24aa
    579  24aa
    580  24aa				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    581  24aa				  -	      align	256
    582  24aa					      endif
    583  24aa
    584  24aa
    585  24aa				   bmp_96x2_1_05
    586  24aa							; *** replace this block with your bimap_05 data block...
    587  24aa		       00		      BYTE.b	%00000000
    588  24ab		       00		      BYTE.b	%00000000
    589  24ac		       00		      BYTE.b	%00000000
    590  24ad		       00		      BYTE.b	%00000000
    591  24ae		       00		      BYTE.b	%00000000
    592  24af		       00		      BYTE.b	%00000000
    593  24b0		       63		      BYTE.b	%01100011
    594  24b1		       a2		      BYTE.b	%10100010
    595  24b2		       63		      BYTE.b	%01100011
    596  24b3		       22		      BYTE.b	%00100010
    597  24b4		       00		      BYTE.b	%00000000
    598  24b5		       00		      BYTE.b	%00000000
    599  24b6		       00		      BYTE.b	%00000000
    600  24b7		       00		      BYTE.b	%00000000
    601  24b8		       00		      BYTE.b	%00000000
    602  24b9		       00		      BYTE.b	%00000000
    603  24ba		       00		      BYTE.b	%00000000
    604  24bb		       00		      BYTE.b	%00000000
    605  24bc		       00		      BYTE.b	%00000000
    606  24bd		       00		      BYTE.b	%00000000
    607  24be		       00		      BYTE.b	%00000000
    608  24bf		       0c		      BYTE.b	%00001100
    609  24c0		       82		      BYTE.b	%10000010
    610  24c1		       8c		      BYTE.b	%10001100
    611  24c2		       06		      BYTE.b	%00000110
    612  24c3		       00		      BYTE.b	%00000000
    613  24c4		       00		      BYTE.b	%00000000
    614  24c5		       00		      BYTE.b	%00000000
    615  24c6		       b3		      BYTE.b	%10110011
    616  24c7		       08		      BYTE.b	%00001000
    617  24c8		       33		      BYTE.b	%00110011
    618  24c9		       99		      BYTE.b	%10011001
    619  24ca		       00		      BYTE.b	%00000000
    620  24cb		       00		      BYTE.b	%00000000
    621  24cc		       00		      BYTE.b	%00000000
    622  24cd		       00		      BYTE.b	%00000000
    623  24ce		       00		      BYTE.b	%00000000
    624  24cf		       00		      BYTE.b	%00000000
    625  24d0		       00		      BYTE.b	%00000000
    626  24d1		       00		      BYTE.b	%00000000
    627  24d2		       00		      BYTE.b	%00000000
    628  24d3		       f8		      BYTE.b	%11111000
    629  24d4		       f8		      BYTE.b	%11111000
    630  24d5		       f8		      BYTE.b	%11111000
    631  24d6		       f8		      BYTE.b	%11111000
    632  24d7		       f8		      BYTE.b	%11111000
    633  24d8		       f9		      BYTE.b	%11111001
    634  24d9		       ff		      BYTE.b	%11111111
    635  24da		       ff		      BYTE.b	%11111111
    636  24db		       fe		      BYTE.b	%11111110
    637  24dc		       fe		      BYTE.b	%11111110
    638  24dd		       f8		      BYTE.b	%11111000
    639  24de		       00		      BYTE.b	%00000000
    640  24df		       00		      BYTE.b	%00000000
    641  24e0		       00		      BYTE.b	%00000000
    642  24e1		       00		      BYTE.b	%00000000
    643  24e2		       fc		      BYTE.b	%11111100
    644  24e3		       fc		      BYTE.b	%11111100
    645  24e4		       00		      BYTE.b	%00000000
    646  24e5		       00		      BYTE.b	%00000000
    647  24e6		       00		      BYTE.b	%00000000
    648  24e7		       f0		      BYTE.b	%11110000
    649  24e8		       f0		      BYTE.b	%11110000
    650  24e9		       00		      BYTE.b	%00000000
    651  24ea		       00		      BYTE.b	%00000000
    652  24eb		       fc		      BYTE.b	%11111100
    653  24ec		       fc		      BYTE.b	%11111100
    654  24ed		       00		      BYTE.b	%00000000
    655  24ee		       00		      BYTE.b	%00000000
    656  24ef		       00		      BYTE.b	%00000000
    657  24f0		       0f		      BYTE.b	%00001111
    658  24f1		       0f		      BYTE.b	%00001111
    659  24f2		       0f		      BYTE.b	%00001111
    660  24f3		       0f		      BYTE.b	%00001111
    661  24f4		       0f		      BYTE.b	%00001111
    662  24f5		       0f		      BYTE.b	%00001111
    663  24f6		       0f		      BYTE.b	%00001111
    664  24f7		       0f		      BYTE.b	%00001111
    665  24f8		       0f		      BYTE.b	%00001111
    666  24f9		       0f		      BYTE.b	%00001111
    667  24fa		       0f		      BYTE.b	%00001111
    668  24fb		       0f		      BYTE.b	%00001111
    669  24fc		       0f		      BYTE.b	%00001111
    670  24fd		       0f		      BYTE.b	%00001111
    671  24fe		       00		      BYTE.b	%00000000
    672  24ff
    673  24ff
    674  24ff
    675  24ff					      if	>. != >[.+(bmp_96x2_1_height)]
    676  2500		       00		      align	256
    677  2500					      endif
    678  2500
    679  2500
    680  2500				   bmp_96x2_1_06
    681  2500							; *** replace this block with your bimap_06 data block...
    682  2500		       00		      BYTE.b	%00000000
    683  2501		       00		      BYTE.b	%00000000
    684  2502		       00		      BYTE.b	%00000000
    685  2503		       00		      BYTE.b	%00000000
    686  2504		       00		      BYTE.b	%00000000
    687  2505		       00		      BYTE.b	%00000000
    688  2506		       20		      BYTE.b	%00100000
    689  2507		       90		      BYTE.b	%10010000
    690  2508		       28		      BYTE.b	%00101000
    691  2509		       00		      BYTE.b	%00000000
    692  250a		       00		      BYTE.b	%00000000
    693  250b		       00		      BYTE.b	%00000000
    694  250c		       00		      BYTE.b	%00000000
    695  250d		       00		      BYTE.b	%00000000
    696  250e		       00		      BYTE.b	%00000000
    697  250f		       00		      BYTE.b	%00000000
    698  2510		       00		      BYTE.b	%00000000
    699  2511		       00		      BYTE.b	%00000000
    700  2512		       00		      BYTE.b	%00000000
    701  2513		       00		      BYTE.b	%00000000
    702  2514		       00		      BYTE.b	%00000000
    703  2515		       4a		      BYTE.b	%01001010
    704  2516		       4e		      BYTE.b	%01001110
    705  2517		       4a		      BYTE.b	%01001010
    706  2518		       e4		      BYTE.b	%11100100
    707  2519		       00		      BYTE.b	%00000000
    708  251a		       00		      BYTE.b	%00000000
    709  251b		       00		      BYTE.b	%00000000
    710  251c		       08		      BYTE.b	%00001000
    711  251d		       88		      BYTE.b	%10001000
    712  251e		       0c		      BYTE.b	%00001100
    713  251f		       8e		      BYTE.b	%10001110
    714  2520		       00		      BYTE.b	%00000000
    715  2521		       00		      BYTE.b	%00000000
    716  2522		       00		      BYTE.b	%00000000
    717  2523		       00		      BYTE.b	%00000000
    718  2524		       00		      BYTE.b	%00000000
    719  2525		       00		      BYTE.b	%00000000
    720  2526		       00		      BYTE.b	%00000000
    721  2527		       00		      BYTE.b	%00000000
    722  2528		       00		      BYTE.b	%00000000
    723  2529		       1f		      BYTE.b	%00011111
    724  252a		       1f		      BYTE.b	%00011111
    725  252b		       1f		      BYTE.b	%00011111
    726  252c		       7f		      BYTE.b	%01111111
    727  252d		       7f		      BYTE.b	%01111111
    728  252e		       ff		      BYTE.b	%11111111
    729  252f		       ff		      BYTE.b	%11111111
    730  2530		       9f		      BYTE.b	%10011111
    731  2531		       1f		      BYTE.b	%00011111
    732  2532		       1f		      BYTE.b	%00011111
    733  2533		       1f		      BYTE.b	%00011111
    734  2534		       00		      BYTE.b	%00000000
    735  2535		       00		      BYTE.b	%00000000
    736  2536		       00		      BYTE.b	%00000000
    737  2537		       00		      BYTE.b	%00000000
    738  2538		       3f		      BYTE.b	%00111111
    739  2539		       3f		      BYTE.b	%00111111
    740  253a		       3e		      BYTE.b	%00111110
    741  253b		       3e		      BYTE.b	%00111110
    742  253c		       3e		      BYTE.b	%00111110
    743  253d		       3f		      BYTE.b	%00111111
    744  253e		       3f		      BYTE.b	%00111111
    745  253f		       3e		      BYTE.b	%00111110
    746  2540		       3e		      BYTE.b	%00111110
    747  2541		       3f		      BYTE.b	%00111111
    748  2542		       3f		      BYTE.b	%00111111
    749  2543		       00		      BYTE.b	%00000000
    750  2544		       00		      BYTE.b	%00000000
    751  2545		       00		      BYTE.b	%00000000
    752  2546		       fc		      BYTE.b	%11111100
    753  2547		       fc		      BYTE.b	%11111100
    754  2548		       ff		      BYTE.b	%11111111
    755  2549		       fc		      BYTE.b	%11111100
    756  254a		       fc		      BYTE.b	%11111100
    757  254b		       fc		      BYTE.b	%11111100
    758  254c		       fc		      BYTE.b	%11111100
    759  254d		       fc		      BYTE.b	%11111100
    760  254e		       ff		      BYTE.b	%11111111
    761  254f		       fc		      BYTE.b	%11111100
    762  2550		       fc		      BYTE.b	%11111100
    763  2551		       fc		      BYTE.b	%11111100
    764  2552		       fc		      BYTE.b	%11111100
    765  2553		       fc		      BYTE.b	%11111100
    766  2554		       00		      BYTE.b	%00000000
    767  2555
    768  2555
    769  2555
    770  2555				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    771  2555				  -	      align	256
    772  2555					      endif
    773  2555
    774  2555
    775  2555				   bmp_96x2_1_07
    776  2555							; *** replace this block with your bimap_07 data block...
    777  2555		       00		      BYTE.b	%00000000
    778  2556		       00		      BYTE.b	%00000000
    779  2557		       00		      BYTE.b	%00000000
    780  2558		       00		      BYTE.b	%00000000
    781  2559		       00		      BYTE.b	%00000000
    782  255a		       00		      BYTE.b	%00000000
    783  255b		       8c		      BYTE.b	%10001100
    784  255c		       c2		      BYTE.b	%11000010
    785  255d		       ac		      BYTE.b	%10101100
    786  255e		       c6		      BYTE.b	%11000110
    787  255f		       00		      BYTE.b	%00000000
    788  2560		       00		      BYTE.b	%00000000
    789  2561		       00		      BYTE.b	%00000000
    790  2562		       00		      BYTE.b	%00000000
    791  2563		       00		      BYTE.b	%00000000
    792  2564		       00		      BYTE.b	%00000000
    793  2565		       00		      BYTE.b	%00000000
    794  2566		       00		      BYTE.b	%00000000
    795  2567		       00		      BYTE.b	%00000000
    796  2568		       00		      BYTE.b	%00000000
    797  2569		       00		      BYTE.b	%00000000
    798  256a		       a4		      BYTE.b	%10100100
    799  256b		       c4		      BYTE.b	%11000100
    800  256c		       a4		      BYTE.b	%10100100
    801  256d		       ce		      BYTE.b	%11001110
    802  256e		       00		      BYTE.b	%00000000
    803  256f		       00		      BYTE.b	%00000000
    804  2570		       00		      BYTE.b	%00000000
    805  2571		       ab		      BYTE.b	%10101011
    806  2572		       b2		      BYTE.b	%10110010
    807  2573		       ab		      BYTE.b	%10101011
    808  2574		       b3		      BYTE.b	%10110011
    809  2575		       00		      BYTE.b	%00000000
    810  2576		       00		      BYTE.b	%00000000
    811  2577		       00		      BYTE.b	%00000000
    812  2578		       00		      BYTE.b	%00000000
    813  2579		       00		      BYTE.b	%00000000
    814  257a		       00		      BYTE.b	%00000000
    815  257b		       00		      BYTE.b	%00000000
    816  257c		       00		      BYTE.b	%00000000
    817  257d		       00		      BYTE.b	%00000000
    818  257e		       03		      BYTE.b	%00000011
    819  257f		       03		      BYTE.b	%00000011
    820  2580		       00		      BYTE.b	%00000000
    821  2581		       00		      BYTE.b	%00000000
    822  2582		       00		      BYTE.b	%00000000
    823  2583		       00		      BYTE.b	%00000000
    824  2584		       00		      BYTE.b	%00000000
    825  2585		       00		      BYTE.b	%00000000
    826  2586		       00		      BYTE.b	%00000000
    827  2587		       03		      BYTE.b	%00000011
    828  2588		       03		      BYTE.b	%00000011
    829  2589		       00		      BYTE.b	%00000000
    830  258a		       00		      BYTE.b	%00000000
    831  258b		       00		      BYTE.b	%00000000
    832  258c		       00		      BYTE.b	%00000000
    833  258d		       ff		      BYTE.b	%11111111
    834  258e		       ff		      BYTE.b	%11111111
    835  258f		       00		      BYTE.b	%00000000
    836  2590		       00		      BYTE.b	%00000000
    837  2591		       00		      BYTE.b	%00000000
    838  2592		       ff		      BYTE.b	%11111111
    839  2593		       fe		      BYTE.b	%11111110
    840  2594		       00		      BYTE.b	%00000000
    841  2595		       00		      BYTE.b	%00000000
    842  2596		       ff		      BYTE.b	%11111111
    843  2597		       ff		      BYTE.b	%11111111
    844  2598		       00		      BYTE.b	%00000000
    845  2599		       00		      BYTE.b	%00000000
    846  259a		       00		      BYTE.b	%00000000
    847  259b		       00		      BYTE.b	%00000000
    848  259c		       00		      BYTE.b	%00000000
    849  259d		       c0		      BYTE.b	%11000000
    850  259e		       40		      BYTE.b	%01000000
    851  259f		       40		      BYTE.b	%01000000
    852  25a0		       40		      BYTE.b	%01000000
    853  25a1		       40		      BYTE.b	%01000000
    854  25a2		       40		      BYTE.b	%01000000
    855  25a3		       c0		      BYTE.b	%11000000
    856  25a4		       00		      BYTE.b	%00000000
    857  25a5		       00		      BYTE.b	%00000000
    858  25a6		       00		      BYTE.b	%00000000
    859  25a7		       00		      BYTE.b	%00000000
    860  25a8		       00		      BYTE.b	%00000000
    861  25a9		       00		      BYTE.b	%00000000
    862  25aa
    863  25aa
    864  25aa
    865  25aa				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    866  25aa				  -	      align	256
    867  25aa					      endif
    868  25aa
    869  25aa
    870  25aa				   bmp_96x2_1_08
    871  25aa							; *** replace this block with your bimap_08 data block...
    872  25aa		       00		      BYTE.b	%00000000
    873  25ab		       00		      BYTE.b	%00000000
    874  25ac		       00		      BYTE.b	%00000000
    875  25ad		       00		      BYTE.b	%00000000
    876  25ae		       00		      BYTE.b	%00000000
    877  25af		       00		      BYTE.b	%00000000
    878  25b0		       ce		      BYTE.b	%11001110
    879  25b1		       a8		      BYTE.b	%10101000
    880  25b2		       ac		      BYTE.b	%10101100
    881  25b3		       ce		      BYTE.b	%11001110
    882  25b4		       00		      BYTE.b	%00000000
    883  25b5		       00		      BYTE.b	%00000000
    884  25b6		       00		      BYTE.b	%00000000
    885  25b7		       00		      BYTE.b	%00000000
    886  25b8		       00		      BYTE.b	%00000000
    887  25b9		       00		      BYTE.b	%00000000
    888  25ba		       00		      BYTE.b	%00000000
    889  25bb		       00		      BYTE.b	%00000000
    890  25bc		       00		      BYTE.b	%00000000
    891  25bd		       00		      BYTE.b	%00000000
    892  25be		       00		      BYTE.b	%00000000
    893  25bf		       00		      BYTE.b	%00000000
    894  25c0		       00		      BYTE.b	%00000000
    895  25c1		       00		      BYTE.b	%00000000
    896  25c2		       00		      BYTE.b	%00000000
    897  25c3		       00		      BYTE.b	%00000000
    898  25c4		       00		      BYTE.b	%00000000
    899  25c5		       00		      BYTE.b	%00000000
    900  25c6		       80		      BYTE.b	%10000000
    901  25c7		       00		      BYTE.b	%00000000
    902  25c8		       00		      BYTE.b	%00000000
    903  25c9		       80		      BYTE.b	%10000000
    904  25ca		       00		      BYTE.b	%00000000
    905  25cb		       00		      BYTE.b	%00000000
    906  25cc		       00		      BYTE.b	%00000000
    907  25cd		       00		      BYTE.b	%00000000
    908  25ce		       00		      BYTE.b	%00000000
    909  25cf		       00		      BYTE.b	%00000000
    910  25d0		       00		      BYTE.b	%00000000
    911  25d1		       00		      BYTE.b	%00000000
    912  25d2		       00		      BYTE.b	%00000000
    913  25d3		       ff		      BYTE.b	%11111111
    914  25d4		       ff		      BYTE.b	%11111111
    915  25d5		       3e		      BYTE.b	%00111110
    916  25d6		       3e		      BYTE.b	%00111110
    917  25d7		       3e		      BYTE.b	%00111110
    918  25d8		       3e		      BYTE.b	%00111110
    919  25d9		       3e		      BYTE.b	%00111110
    920  25da		       3e		      BYTE.b	%00111110
    921  25db		       3e		      BYTE.b	%00111110
    922  25dc		       ff		      BYTE.b	%11111111
    923  25dd		       ff		      BYTE.b	%11111111
    924  25de		       00		      BYTE.b	%00000000
    925  25df		       00		      BYTE.b	%00000000
    926  25e0		       00		      BYTE.b	%00000000
    927  25e1		       00		      BYTE.b	%00000000
    928  25e2		       c3		      BYTE.b	%11000011
    929  25e3		       c3		      BYTE.b	%11000011
    930  25e4		       03		      BYTE.b	%00000011
    931  25e5		       03		      BYTE.b	%00000011
    932  25e6		       03		      BYTE.b	%00000011
    933  25e7		       03		      BYTE.b	%00000011
    934  25e8		       03		      BYTE.b	%00000011
    935  25e9		       03		      BYTE.b	%00000011
    936  25ea		       03		      BYTE.b	%00000011
    937  25eb		       c3		      BYTE.b	%11000011
    938  25ec		       c3		      BYTE.b	%11000011
    939  25ed		       00		      BYTE.b	%00000000
    940  25ee		       00		      BYTE.b	%00000000
    941  25ef		       00		      BYTE.b	%00000000
    942  25f0		       00		      BYTE.b	%00000000
    943  25f1		       00		      BYTE.b	%00000000
    944  25f2		       00		      BYTE.b	%00000000
    945  25f3		       00		      BYTE.b	%00000000
    946  25f4		       00		      BYTE.b	%00000000
    947  25f5		       00		      BYTE.b	%00000000
    948  25f6		       00		      BYTE.b	%00000000
    949  25f7		       00		      BYTE.b	%00000000
    950  25f8		       00		      BYTE.b	%00000000
    951  25f9		       00		      BYTE.b	%00000000
    952  25fa		       00		      BYTE.b	%00000000
    953  25fb		       00		      BYTE.b	%00000000
    954  25fc		       00		      BYTE.b	%00000000
    955  25fd		       00		      BYTE.b	%00000000
    956  25fe		       00		      BYTE.b	%00000000
    957  25ff
    958  25ff
    959  25ff
    960  25ff					      if	>. != >[.+(bmp_96x2_1_height)]
    961  2600		       00		      align	256
    962  2600					      endif
    963  2600
    964  2600
    965  2600				   bmp_96x2_1_09
    966  2600							; *** replace this block with your bimap_09 data block...
    967  2600		       00		      BYTE.b	%00000000
    968  2601		       00		      BYTE.b	%00000000
    969  2602		       00		      BYTE.b	%00000000
    970  2603		       00		      BYTE.b	%00000000
    971  2604		       00		      BYTE.b	%00000000
    972  2605		       00		      BYTE.b	%00000000
    973  2606		       ae		      BYTE.b	%10101110
    974  2607		       a8		      BYTE.b	%10101000
    975  2608		       ec		      BYTE.b	%11101100
    976  2609		       ee		      BYTE.b	%11101110
    977  260a		       00		      BYTE.b	%00000000
    978  260b		       00		      BYTE.b	%00000000
    979  260c		       00		      BYTE.b	%00000000
    980  260d		       00		      BYTE.b	%00000000
    981  260e		       00		      BYTE.b	%00000000
    982  260f		       00		      BYTE.b	%00000000
    983  2610		       00		      BYTE.b	%00000000
    984  2611		       00		      BYTE.b	%00000000
    985  2612		       00		      BYTE.b	%00000000
    986  2613		       00		      BYTE.b	%00000000
    987  2614		       00		      BYTE.b	%00000000
    988  2615		       00		      BYTE.b	%00000000
    989  2616		       00		      BYTE.b	%00000000
    990  2617		       00		      BYTE.b	%00000000
    991  2618		       00		      BYTE.b	%00000000
    992  2619		       00		      BYTE.b	%00000000
    993  261a		       00		      BYTE.b	%00000000
    994  261b		       00		      BYTE.b	%00000000
    995  261c		       00		      BYTE.b	%00000000
    996  261d		       00		      BYTE.b	%00000000
    997  261e		       00		      BYTE.b	%00000000
    998  261f		       00		      BYTE.b	%00000000
    999  2620		       00		      BYTE.b	%00000000
   1000  2621		       00		      BYTE.b	%00000000
   1001  2622		       00		      BYTE.b	%00000000
   1002  2623		       00		      BYTE.b	%00000000
   1003  2624		       00		      BYTE.b	%00000000
   1004  2625		       00		      BYTE.b	%00000000
   1005  2626		       00		      BYTE.b	%00000000
   1006  2627		       00		      BYTE.b	%00000000
   1007  2628		       00		      BYTE.b	%00000000
   1008  2629		       f1		      BYTE.b	%11110001
   1009  262a		       f1		      BYTE.b	%11110001
   1010  262b		       01		      BYTE.b	%00000001
   1011  262c		       01		      BYTE.b	%00000001
   1012  262d		       01		      BYTE.b	%00000001
   1013  262e		       01		      BYTE.b	%00000001
   1014  262f		       01		      BYTE.b	%00000001
   1015  2630		       01		      BYTE.b	%00000001
   1016  2631		       00		      BYTE.b	%00000000
   1017  2632		       f0		      BYTE.b	%11110000
   1018  2633		       f0		      BYTE.b	%11110000
   1019  2634		       00		      BYTE.b	%00000000
   1020  2635		       00		      BYTE.b	%00000000
   1021  2636		       00		      BYTE.b	%00000000
   1022  2637		       00		      BYTE.b	%00000000
   1023  2638		       c1		      BYTE.b	%11000001
   1024  2639		       c3		      BYTE.b	%11000011
   1025  263a		       cf		      BYTE.b	%11001111
   1026  263b		       ff		      BYTE.b	%11111111
   1027  263c		       ff		      BYTE.b	%11111111
   1028  263d		       c3		      BYTE.b	%11000011
   1029  263e		       c1		      BYTE.b	%11000001
   1030  263f		       c0		      BYTE.b	%11000000
   1031  2640		       c0		      BYTE.b	%11000000
   1032  2641		       ff		      BYTE.b	%11111111
   1033  2642		       ff		      BYTE.b	%11111111
   1034  2643		       00		      BYTE.b	%00000000
   1035  2644		       00		      BYTE.b	%00000000
   1036  2645		       00		      BYTE.b	%00000000
   1037  2646		       00		      BYTE.b	%00000000
   1038  2647		       00		      BYTE.b	%00000000
   1039  2648		       00		      BYTE.b	%00000000
   1040  2649		       00		      BYTE.b	%00000000
   1041  264a		       00		      BYTE.b	%00000000
   1042  264b		       00		      BYTE.b	%00000000
   1043  264c		       00		      BYTE.b	%00000000
   1044  264d		       00		      BYTE.b	%00000000
   1045  264e		       00		      BYTE.b	%00000000
   1046  264f		       00		      BYTE.b	%00000000
   1047  2650		       00		      BYTE.b	%00000000
   1048  2651		       00		      BYTE.b	%00000000
   1049  2652		       00		      BYTE.b	%00000000
   1050  2653		       00		      BYTE.b	%00000000
   1051  2654		       00		      BYTE.b	%00000000
   1052  2655
   1053  2655
   1054  2655
   1055  2655				  -	      if	>. != >[.+(bmp_96x2_1_height)]
   1056  2655				  -	      align	256
   1057  2655					      endif
   1058  2655
   1059  2655
   1060  2655				   bmp_96x2_1_10
   1061  2655							; *** replace this block with your bimap_10 data block...
   1062  2655		       00		      BYTE.b	%00000000
   1063  2656		       00		      BYTE.b	%00000000
   1064  2657		       00		      BYTE.b	%00000000
   1065  2658		       00		      BYTE.b	%00000000
   1066  2659		       00		      BYTE.b	%00000000
   1067  265a		       00		      BYTE.b	%00000000
   1068  265b		       00		      BYTE.b	%00000000
   1069  265c		       00		      BYTE.b	%00000000
   1070  265d		       00		      BYTE.b	%00000000
   1071  265e		       00		      BYTE.b	%00000000
   1072  265f		       00		      BYTE.b	%00000000
   1073  2660		       00		      BYTE.b	%00000000
   1074  2661		       00		      BYTE.b	%00000000
   1075  2662		       00		      BYTE.b	%00000000
   1076  2663		       00		      BYTE.b	%00000000
   1077  2664		       00		      BYTE.b	%00000000
   1078  2665		       00		      BYTE.b	%00000000
   1079  2666		       00		      BYTE.b	%00000000
   1080  2667		       00		      BYTE.b	%00000000
   1081  2668		       00		      BYTE.b	%00000000
   1082  2669		       00		      BYTE.b	%00000000
   1083  266a		       00		      BYTE.b	%00000000
   1084  266b		       00		      BYTE.b	%00000000
   1085  266c		       00		      BYTE.b	%00000000
   1086  266d		       00		      BYTE.b	%00000000
   1087  266e		       00		      BYTE.b	%00000000
   1088  266f		       00		      BYTE.b	%00000000
   1089  2670		       00		      BYTE.b	%00000000
   1090  2671		       00		      BYTE.b	%00000000
   1091  2672		       00		      BYTE.b	%00000000
   1092  2673		       00		      BYTE.b	%00000000
   1093  2674		       00		      BYTE.b	%00000000
   1094  2675		       00		      BYTE.b	%00000000
   1095  2676		       00		      BYTE.b	%00000000
   1096  2677		       00		      BYTE.b	%00000000
   1097  2678		       00		      BYTE.b	%00000000
   1098  2679		       00		      BYTE.b	%00000000
   1099  267a		       00		      BYTE.b	%00000000
   1100  267b		       00		      BYTE.b	%00000000
   1101  267c		       00		      BYTE.b	%00000000
   1102  267d		       00		      BYTE.b	%00000000
   1103  267e		       f0		      BYTE.b	%11110000
   1104  267f		       f0		      BYTE.b	%11110000
   1105  2680		       f0		      BYTE.b	%11110000
   1106  2681		       ff		      BYTE.b	%11111111
   1107  2682		       ff		      BYTE.b	%11111111
   1108  2683		       f0		      BYTE.b	%11110000
   1109  2684		       f0		      BYTE.b	%11110000
   1110  2685		       f0		      BYTE.b	%11110000
   1111  2686		       3c		      BYTE.b	%00111100
   1112  2687		       3f		      BYTE.b	%00111111
   1113  2688		       0f		      BYTE.b	%00001111
   1114  2689		       00		      BYTE.b	%00000000
   1115  268a		       00		      BYTE.b	%00000000
   1116  268b		       00		      BYTE.b	%00000000
   1117  268c		       00		      BYTE.b	%00000000
   1118  268d		       fc		      BYTE.b	%11111100
   1119  268e		       fc		      BYTE.b	%11111100
   1120  268f		       e0		      BYTE.b	%11100000
   1121  2690		       e0		      BYTE.b	%11100000
   1122  2691		       80		      BYTE.b	%10000000
   1123  2692		       fc		      BYTE.b	%11111100
   1124  2693		       fc		      BYTE.b	%11111100
   1125  2694		       7c		      BYTE.b	%01111100
   1126  2695		       7c		      BYTE.b	%01111100
   1127  2696		       f8		      BYTE.b	%11111000
   1128  2697		       e0		      BYTE.b	%11100000
   1129  2698		       00		      BYTE.b	%00000000
   1130  2699		       00		      BYTE.b	%00000000
   1131  269a		       00		      BYTE.b	%00000000
   1132  269b		       00		      BYTE.b	%00000000
   1133  269c		       00		      BYTE.b	%00000000
   1134  269d		       00		      BYTE.b	%00000000
   1135  269e		       00		      BYTE.b	%00000000
   1136  269f		       00		      BYTE.b	%00000000
   1137  26a0		       00		      BYTE.b	%00000000
   1138  26a1		       00		      BYTE.b	%00000000
   1139  26a2		       00		      BYTE.b	%00000000
   1140  26a3		       00		      BYTE.b	%00000000
   1141  26a4		       00		      BYTE.b	%00000000
   1142  26a5		       00		      BYTE.b	%00000000
   1143  26a6		       00		      BYTE.b	%00000000
   1144  26a7		       00		      BYTE.b	%00000000
   1145  26a8		       00		      BYTE.b	%00000000
   1146  26a9		       00		      BYTE.b	%00000000
   1147  26aa
   1148  26aa
   1149  26aa
   1150  26aa				  -	      if	>. != >[.+(bmp_96x2_1_height)]
   1151  26aa				  -	      align	256
   1152  26aa					      endif
   1153  26aa
   1154  26aa
   1155  26aa				   bmp_96x2_1_11
   1156  26aa							; *** replace this block with your bimap_11 data block...
   1157  26aa		       00		      BYTE.b	%00000000
   1158  26ab		       00		      BYTE.b	%00000000
   1159  26ac		       00		      BYTE.b	%00000000
   1160  26ad		       00		      BYTE.b	%00000000
   1161  26ae		       00		      BYTE.b	%00000000
   1162  26af		       00		      BYTE.b	%00000000
   1163  26b0		       00		      BYTE.b	%00000000
   1164  26b1		       00		      BYTE.b	%00000000
   1165  26b2		       00		      BYTE.b	%00000000
   1166  26b3		       00		      BYTE.b	%00000000
   1167  26b4		       00		      BYTE.b	%00000000
   1168  26b5		       00		      BYTE.b	%00000000
   1169  26b6		       00		      BYTE.b	%00000000
   1170  26b7		       00		      BYTE.b	%00000000
   1171  26b8		       00		      BYTE.b	%00000000
   1172  26b9		       00		      BYTE.b	%00000000
   1173  26ba		       00		      BYTE.b	%00000000
   1174  26bb		       00		      BYTE.b	%00000000
   1175  26bc		       00		      BYTE.b	%00000000
   1176  26bd		       00		      BYTE.b	%00000000
   1177  26be		       00		      BYTE.b	%00000000
   1178  26bf		       00		      BYTE.b	%00000000
   1179  26c0		       00		      BYTE.b	%00000000
   1180  26c1		       00		      BYTE.b	%00000000
   1181  26c2		       00		      BYTE.b	%00000000
   1182  26c3		       00		      BYTE.b	%00000000
   1183  26c4		       00		      BYTE.b	%00000000
   1184  26c5		       00		      BYTE.b	%00000000
   1185  26c6		       00		      BYTE.b	%00000000
   1186  26c7		       00		      BYTE.b	%00000000
   1187  26c8		       00		      BYTE.b	%00000000
   1188  26c9		       00		      BYTE.b	%00000000
   1189  26ca		       00		      BYTE.b	%00000000
   1190  26cb		       00		      BYTE.b	%00000000
   1191  26cc		       00		      BYTE.b	%00000000
   1192  26cd		       00		      BYTE.b	%00000000
   1193  26ce		       00		      BYTE.b	%00000000
   1194  26cf		       00		      BYTE.b	%00000000
   1195  26d0		       00		      BYTE.b	%00000000
   1196  26d1		       00		      BYTE.b	%00000000
   1197  26d2		       00		      BYTE.b	%00000000
   1198  26d3		       3e		      BYTE.b	%00111110
   1199  26d4		       3e		      BYTE.b	%00111110
   1200  26d5		       3e		      BYTE.b	%00111110
   1201  26d6		       fe		      BYTE.b	%11111110
   1202  26d7		       fe		      BYTE.b	%11111110
   1203  26d8		       3e		      BYTE.b	%00111110
   1204  26d9		       3e		      BYTE.b	%00111110
   1205  26da		       3e		      BYTE.b	%00111110
   1206  26db		       f8		      BYTE.b	%11111000
   1207  26dc		       f8		      BYTE.b	%11111000
   1208  26dd		       e0		      BYTE.b	%11100000
   1209  26de		       00		      BYTE.b	%00000000
   1210  26df		       00		      BYTE.b	%00000000
   1211  26e0		       00		      BYTE.b	%00000000
   1212  26e1		       00		      BYTE.b	%00000000
   1213  26e2		       00		      BYTE.b	%00000000
   1214  26e3		       00		      BYTE.b	%00000000
   1215  26e4		       00		      BYTE.b	%00000000
   1216  26e5		       00		      BYTE.b	%00000000
   1217  26e6		       00		      BYTE.b	%00000000
   1218  26e7		       00		      BYTE.b	%00000000
   1219  26e8		       00		      BYTE.b	%00000000
   1220  26e9		       00		      BYTE.b	%00000000
   1221  26ea		       00		      BYTE.b	%00000000
   1222  26eb		       00		      BYTE.b	%00000000
   1223  26ec		       00		      BYTE.b	%00000000
   1224  26ed		       00		      BYTE.b	%00000000
   1225  26ee		       00		      BYTE.b	%00000000
   1226  26ef		       00		      BYTE.b	%00000000
   1227  26f0		       00		      BYTE.b	%00000000
   1228  26f1		       00		      BYTE.b	%00000000
   1229  26f2		       00		      BYTE.b	%00000000
   1230  26f3		       00		      BYTE.b	%00000000
   1231  26f4		       00		      BYTE.b	%00000000
   1232  26f5		       00		      BYTE.b	%00000000
   1233  26f6		       00		      BYTE.b	%00000000
   1234  26f7		       00		      BYTE.b	%00000000
   1235  26f8		       00		      BYTE.b	%00000000
   1236  26f9		       00		      BYTE.b	%00000000
   1237  26fa		       00		      BYTE.b	%00000000
   1238  26fb		       00		      BYTE.b	%00000000
   1239  26fc		       00		      BYTE.b	%00000000
   1240  26fd		       00		      BYTE.b	%00000000
   1241  26fe		       00		      BYTE.b	%00000000
------- FILE titlescreen/asm/titlescreen.asm
    126  26ff					      endif
    127  26ff				  -	      ifconst	mk_96x2_2_on
    128  26ff				  -	      include	"titlescreen/96x2_2_image.asm"
    129  26ff					      endif
    130  26ff				  -	      ifconst	mk_96x2_3_on
    131  26ff				  -	      include	"titlescreen/96x2_3_image.asm"
    132  26ff					      endif
    133  26ff				  -	      ifconst	mk_96x2_4_on
    134  26ff				  -	      include	"titlescreen/96x2_4_image.asm"
    135  26ff					      endif
    136  26ff				  -	      ifconst	mk_96x2_5_on
    137  26ff				  -	      include	"titlescreen/96x2_5_image.asm"
    138  26ff					      endif
    139  26ff				  -	      ifconst	mk_96x2_6_on
    140  26ff				  -	      include	"titlescreen/96x2_6_image.asm"
    141  26ff					      endif
    142  26ff				  -	      ifconst	mk_96x2_7_on
    143  26ff				  -	      include	"titlescreen/96x2_7_image.asm"
    144  26ff					      endif
    145  26ff				  -	      ifconst	mk_96x2_8_on
    146  26ff				  -	      include	"titlescreen/96x2_8_image.asm"
    147  26ff					      endif
    148  26ff
    149  26ff				  -	      ifconst	mk_player_on
    150  26ff				  -	      include	"titlescreen/player_image.asm"
    151  26ff					      endif
    152  26ff
    153  26ff				  -	      ifconst	mk_score_on
    154  26ff				  -	      include	"titlescreen/score_image.asm"
    155  26ff					      endif
    156  26ff
    157  26ff				  -	      ifconst	mk_gameselect_on
    158  26ff				  -	      include	"titlescreen/gameselect_image.asm"
    159  26ff					      endif
    160  26ff
    161  26ff				  -	      ifconst	mk_player_on
    162  26ff				  -	      include	"titlescreen/asm/player_kernel.asm"
    163  26ff					      endif		;mk_player_on
    164  26ff
    165  26ff
------- FILE beer_mania.bas.asm
    942  26ff
    943  26ff				   .
    944  26ff							;
    945  26ff
    946  26ff				   .L096		;  bank 3
    947  26ff
    948  26ff					      if	ECHO2
      2261 bytes of ROM space left in bank 2
    949  26ff					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
    950  26ff					      endif
    951  26ff		       00 01	   ECHO2      =	1
    952  2fd4					      ORG	$2FF4-bscode_length
    953  2fd4					      RORG	$BFF4-bscode_length
    954  2fd4		       a2 ff	   start_bank2 ldx	#$ff
    955  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
    956  2fd6				  -	      stx	FASTFETCH
    957  2fd6					      endif
    958  2fd6		       9a		      txs
    959  2fd7				  -	      if	bankswitch == 64
    960  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    961  2fd7					      else
    962  2fd7		       a9 f2		      lda	#>(start-1)
    963  2fd9					      endif
    964  2fd9		       48		      pha
    965  2fda		       a9 51		      lda	#<(start-1)
    966  2fdc		       48		      pha
    967  2fdd		       48		      pha
    968  2fde		       8a		      txa
    969  2fdf		       48		      pha
    970  2fe0		       ba		      tsx
    971  2fe1					      if	bankswitch != 64
    972  2fe1		       b5 04		      lda	4,x	; get high byte of return address
    973  2fe3		       2a		      rol
    974  2fe4		       2a		      rol
    975  2fe5		       2a		      rol
    976  2fe6		       2a		      rol
    977  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    978  2fe9		       aa		      tax
    979  2fea		       e8		      inx
    980  2feb				  -	      else
    981  2feb				  -	      lda	4,x	; get high byte of return address
    982  2feb				  -	      tay
    983  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    984  2feb				  -	      sta	4,x
    985  2feb				  -	      tya
    986  2feb				  -	      lsr
    987  2feb				  -	      lsr
    988  2feb				  -	      lsr
    989  2feb				  -	      lsr
    990  2feb				  -	      tax
    991  2feb				  -	      inx
    992  2feb					      endif
    993  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    994  2fee		       68		      pla
    995  2fef		       aa		      tax
    996  2ff0		       68		      pla
    997  2ff1		       60		      rts
    998  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    999  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1000  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1001  2ff2					      endif
   1002  2ffc					      ORG	$2FFC
   1003  2ffc					      RORG	$BFFC
   1004  2ffc		       d4 bf		      .word.w	(start_bank2 & $ffff)
   1005  2ffe		       d4 bf		      .word.w	(start_bank2 & $ffff)
   1006  3000					      ORG	$3000
   1007  3000					      RORG	$D000
   1008  3000				   .__Game_Over_Setup
   1009  3000							; __Game_Over_Setup
   1010  3000
   1011  3000				   .L097		;  player0y  =  200 :	player1y  =  200
   1012  3000
   1013  3000		       a9 c8		      LDA	#200
   1014  3002		       85 85		      STA	player0y
   1015  3004		       85 86		      STA	player1y
   1016  3006				   .
   1017  3006							;
   1018  3006
   1019  3006				   .L098		;  playfield:
   1020  3006
   1021  3006				  -	      ifconst	pfres
   1022  3006				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1023  3006					      else
   1024  3006		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1025  3008					      endif
   1026  3008		       4c 37 d0 	      jmp	pflabel1
   1027  300b				   PF_data1
   1028  300b		       7e bf		      .byte.b	%01111110, %10111111
   1029  300d					      if	(pfwidth>2)
   1030  300d		       ff 7d		      .byte.b	%11111111, %01111101
   1031  300f					      endif
   1032  300f		       60 b3		      .byte.b	%01100000, %10110011
   1033  3011					      if	(pfwidth>2)
   1034  3011		       99 0d		      .byte.b	%10011001, %00001101
   1035  3013					      endif
   1036  3013		       6e bf		      .byte.b	%01101110, %10111111
   1037  3015					      if	(pfwidth>2)
   1038  3015		       99 3d		      .byte.b	%10011001, %00111101
   1039  3017					      endif
   1040  3017		       66 b3		      .byte.b	%01100110, %10110011
   1041  3019					      if	(pfwidth>2)
   1042  3019		       99 0d		      .byte.b	%10011001, %00001101
   1043  301b					      endif
   1044  301b		       7e b3		      .byte.b	%01111110, %10110011
   1045  301d					      if	(pfwidth>2)
   1046  301d		       99 7d		      .byte.b	%10011001, %01111101
   1047  301f					      endif
   1048  301f		       00 00		      .byte.b	%00000000, %00000000
   1049  3021					      if	(pfwidth>2)
   1050  3021		       00 00		      .byte.b	%00000000, %00000000
   1051  3023					      endif
   1052  3023		       1f cd		      .byte.b	%00011111, %11001101
   1053  3025					      if	(pfwidth>2)
   1054  3025		       7d 1f		      .byte.b	%01111101, %00011111
   1055  3027					      endif
   1056  3027		       19 cd		      .byte.b	%00011001, %11001101
   1057  3029					      if	(pfwidth>2)
   1058  3029		       61 19		      .byte.b	%01100001, %00011001
   1059  302b					      endif
   1060  302b		       19 cd		      .byte.b	%00011001, %11001101
   1061  302d					      if	(pfwidth>2)
   1062  302d		       79 0f		      .byte.b	%01111001, %00001111
   1063  302f					      endif
   1064  302f		       19 cd		      .byte.b	%00011001, %11001101
   1065  3031					      if	(pfwidth>2)
   1066  3031		       61 19		      .byte.b	%01100001, %00011001
   1067  3033					      endif
   1068  3033		       1f 31		      .byte.b	%00011111, %00110001
   1069  3035					      if	(pfwidth>2)
   1070  3035		       7d 19		      .byte.b	%01111101, %00011001
   1071  3037					      endif
   1072  3037				   pflabel1
   1073  3037		       bd 0b d0 	      lda	PF_data1,x
   1074  303a		       95 a4		      sta	playfield,x
   1075  303c		       ca		      dex
   1076  303d		       10 f8		      bpl	pflabel1
   1077  303f				   .
   1078  303f							;
   1079  303f
   1080  303f				   .gameover_loop
   1081  303f							; gameover_loop
   1082  303f
   1083  303f				   .L099		;  drawscreen
   1084  303f
   1085  303f		       85 ee		      sta	temp7
   1086  3041		       a9 d0		      lda	#>(ret_point4-1)
   1087  3043		       48		      pha
   1088  3044		       a9 56		      lda	#<(ret_point4-1)
   1089  3046		       48		      pha
   1090  3047		       a9 f4		      lda	#>(drawscreen-1)
   1091  3049		       48		      pha
   1092  304a		       a9 3b		      lda	#<(drawscreen-1)
   1093  304c		       48		      pha
   1094  304d		       a5 ee		      lda	temp7
   1095  304f		       48		      pha
   1096  3050		       8a		      txa
   1097  3051		       48		      pha
   1098  3052		       a2 04		      ldx	#4
   1099  3054		       4c eb ff 	      jmp	BS_jsr
   1100  3057				   ret_point4
   1101  3057				   .L0100		;  if joy0fire  ||  switchreset then goto gamestart
   1102  3057
   1103  3057		       24 0c		      bit	INPT4
   1104  3059		       30 03		      BMI	.skipL0100
   1105  305b				   .condpart28
   1106  305b		       4c 65 d0 	      jmp	.condpart29
   1107  305e				   .skipL0100
   1108  305e		       a9 01		      lda	#1
   1109  3060		       2c 82 02 	      bit	SWCHB
   1110  3063		       d0 03		      BNE	.skip2OR
   1111  3065				   .condpart29
   1112  3065		       4c b0 90 	      jmp	.gamestart
   1113  3068
   1114  3068				   .skip2OR
   1115  3068				   .L0101		;  goto gameover_loop
   1116  3068		       4c 3f d0 	      jmp	.gameover_loop
   1117  306b					      if	ECHO3
      3945 bytes of ROM space left in bank 3
   1118  306b					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   1119  306b					      endif
   1120  306b		       00 01	   ECHO3      =	1
   1121  3fd4					      ORG	$3FF4-bscode_length
   1122  3fd4					      RORG	$DFF4-bscode_length
   1123  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   1124  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
   1125  3fd6				  -	      stx	FASTFETCH
   1126  3fd6					      endif
   1127  3fd6		       9a		      txs
   1128  3fd7				  -	      if	bankswitch == 64
   1129  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1130  3fd7					      else
   1131  3fd7		       a9 f2		      lda	#>(start-1)
   1132  3fd9					      endif
   1133  3fd9		       48		      pha
   1134  3fda		       a9 51		      lda	#<(start-1)
   1135  3fdc		       48		      pha
   1136  3fdd		       48		      pha
   1137  3fde		       8a		      txa
   1138  3fdf		       48		      pha
   1139  3fe0		       ba		      tsx
   1140  3fe1					      if	bankswitch != 64
   1141  3fe1		       b5 04		      lda	4,x	; get high byte of return address
   1142  3fe3		       2a		      rol
   1143  3fe4		       2a		      rol
   1144  3fe5		       2a		      rol
   1145  3fe6		       2a		      rol
   1146  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1147  3fe9		       aa		      tax
   1148  3fea		       e8		      inx
   1149  3feb				  -	      else
   1150  3feb				  -	      lda	4,x	; get high byte of return address
   1151  3feb				  -	      tay
   1152  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1153  3feb				  -	      sta	4,x
   1154  3feb				  -	      tya
   1155  3feb				  -	      lsr
   1156  3feb				  -	      lsr
   1157  3feb				  -	      lsr
   1158  3feb				  -	      lsr
   1159  3feb				  -	      tax
   1160  3feb				  -	      inx
   1161  3feb					      endif
   1162  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1163  3fee		       68		      pla
   1164  3fef		       aa		      tax
   1165  3ff0		       68		      pla
   1166  3ff1		       60		      rts
   1167  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1168  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1169  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1170  3ff2					      endif
   1171  3ffc					      ORG	$3FFC
   1172  3ffc					      RORG	$DFFC
   1173  3ffc		       d4 df		      .word.w	(start_bank3 & $ffff)
   1174  3ffe		       d4 df		      .word.w	(start_bank3 & $ffff)
   1175  4000					      ORG	$4000
   1176  4000					      RORG	$F000
   1177  4000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1178  4000
   1179  4000							; This is a 2-line kernel!
   1180  4000					      ifnconst	vertical_reflect
   1181  4000				   kernel
   1182  4000					      endif
   1183  4000		       85 02		      sta	WSYNC
   1184  4002		       a9 ff		      lda	#255
   1185  4004		       8d 96 02 	      sta	TIM64T
   1186  4007
   1187  4007		       a9 01		      lda	#1
   1188  4009		       85 27		      sta	VDELBL
   1189  400b		       85 25		      sta	VDELP0
   1190  400d		       a6 92		      ldx	ballheight
   1191  400f		       e8		      inx
   1192  4010		       e8		      inx
   1193  4011		       86 9f		      stx	temp4
   1194  4013		       a5 86		      lda	player1y
   1195  4015		       85 9e		      sta	temp3
   1196  4017
   1197  4017				  -	      ifconst	shakescreen
   1198  4017				  -	      jsr	doshakescreen
   1199  4017					      else
   1200  4017		       a6 90		      ldx	missile0height
   1201  4019		       e8		      inx
   1202  401a					      endif
   1203  401a
   1204  401a		       e8		      inx
   1205  401b		       86 f6		      stx	stack1
   1206  401d
   1207  401d		       a5 89		      lda	bally
   1208  401f		       85 f7		      sta	stack2
   1209  4021
   1210  4021		       a5 85		      lda	player0y
   1211  4023		       a2 00		      ldx	#0
   1212  4025		       85 02		      sta	WSYNC
   1213  4027		       86 1b		      stx	GRP0
   1214  4029		       86 1c		      stx	GRP1
   1215  402b		       86 0e		      stx	PF1L
   1216  402d		       86 0f		      stx	PF2
   1217  402f		       86 2c		      stx	CXCLR
   1218  4031				  -	      ifconst	readpaddle
   1219  4031				  -	      stx	paddle
   1220  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
   1222  4033					      endif
   1223  4033
   1224  4033		       95 9d		      sta	temp2,x
   1225  4035
   1226  4035							;store these so they can be retrieved later
   1227  4035					      ifnconst	pfres
   1228  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
   1229  4037				  -	      else
   1230  4037				  -	      ldx	#132-pfres*pfwidth
   1231  4037					      endif
   1232  4037
   1233  4037		       c6 85		      dec	player0y
   1234  4039
   1235  4039		       a5 91		      lda	missile0y
   1236  403b		       85 a0		      sta	temp5
   1237  403d		       a5 88		      lda	missile1y
   1238  403f		       85 a1		      sta	temp6
   1239  4041
   1240  4041		       a5 ef		      lda	playfieldpos
   1241  4043		       85 9c		      sta	temp1
   1242  4045
   1243  4045				  -	      ifconst	pfrowheight
   1244  4045				  -	      lda	#pfrowheight+2
   1245  4045					      else
   1246  4045					      ifnconst	pfres
   1247  4045		       a9 0a		      lda	#10
   1248  4047				  -	      else
   1249  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   1250  4047					      endif
   1251  4047					      endif
   1252  4047		       18		      clc
   1253  4048		       e5 ef		      sbc	playfieldpos
   1254  404a		       85 ef		      sta	playfieldpos
   1255  404c		       4c 74 f0 	      jmp	.startkernel
   1256  404f
   1257  404f				   .skipDrawP0
   1258  404f		       a9 00		      lda	#0
   1259  4051		       a8		      tay
   1260  4052		       4c a2 f0 	      jmp	.continueP0
   1261  4055
   1262  4055				   .skipDrawP1
   1263  4055		       a9 00		      lda	#0
   1264  4057		       a8		      tay
   1265  4058		       4c 7e f0 	      jmp	.continueP1
   1266  405b
   1267  405b				   .kerloop		; enter at cycle 59??
   1268  405b
   1269  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
   1271  405c				   continuekernel2
   1272  405c		       a5 92		      lda	ballheight
   1273  405e
   1274  405e				  -	      ifconst	pfres
   1275  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
   1276  405e				  -	      sty	PF1L	;3
   1277  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   1278  405e				  -	      sty	PF2L	;3
   1279  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
   1280  405e				  -	      sty	PF1R	; 3 too early?
   1281  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   1282  405e				  -	      sty	PF2R	;3
   1283  405e					      else
   1284  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
   1285  4060		       84 0e		      sty	PF1L	;3
   1286  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   1287  4064		       84 0f		      sty	PF2L	;3
   1288  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
   1289  4068		       84 0e		      sty	PF1R	; 3 too early?
   1290  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   1291  406c		       84 0f		      sty	PF2R	;3
   1292  406e					      endif
   1293  406e
   1294  406e							; should be playfield+$38 for width=2
   1295  406e
   1296  406e		       c7 89		      dcp	bally
   1297  4070		       2a		      rol
   1298  4071		       2a		      rol
   1299  4072							; rol
   1300  4072							; rol
   1301  4072				   goback
   1302  4072		       85 1f		      sta	ENABL
   1303  4074				   .startkernel
   1304  4074		       a5 8f		      lda	player1height	;3
   1305  4076		       c7 86		      dcp	player1y	;5
   1306  4078		       90 db		      bcc	.skipDrawP1	;2
   1307  407a		       a4 86		      ldy	player1y	;3
   1308  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   1309  407e							; so it doesn't cross a page boundary!
   1310  407e
   1311  407e				   .continueP1
   1312  407e		       85 1c		      sta	GRP1	;3
   1313  4080
   1314  4080				  -	      ifnconst	player1colors
   1315  4080				  -	      lda	missile1height	;3
   1316  4080				  -	      dcp	missile1y	;5
   1317  4080				  -	      rol		;2
   1318  4080				  -	      rol		;2
   1319  4080				  -	      sta	ENAM1	;3
   1320  4080					      else
   1321  4080		       b1 87		      lda	(player1color),y
   1322  4082		       85 07		      sta	COLUP1
   1323  4084					      ifnconst	playercolors
      0  4084					      sleep	7
      1  4084				   .CYCLES    SET	7
      2  4084
      3  4084				  -	      IF	.CYCLES < 2
      4  4084				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4084				  -	      ERR
      6  4084					      ENDIF
      7  4084
      8  4084					      IF	.CYCLES & 1
      9  4084					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4084		       04 00		      nop	0
     11  4086				  -	      ELSE
     12  4086				  -	      bit	VSYNC
     13  4086					      ENDIF
     14  4086				   .CYCLES    SET	.CYCLES - 3
     15  4086					      ENDIF
     16  4086
     17  4086					      REPEAT	.CYCLES / 2
     18  4086		       ea		      nop
     17  4086					      REPEND
     18  4087		       ea		      nop
     19  4088					      REPEND
   1325  4088				  -	      else
   1326  4088				  -	      lda.w	player0colorstore
   1327  4088				  -	      sta	COLUP0
   1328  4088					      endif
   1329  4088					      endif
   1330  4088
   1331  4088				  -	      ifconst	pfres
   1332  4088				  -	      lda	playfield+pfres*pfwidth-132,x
   1333  4088				  -	      sta	PF1L	;3
   1334  4088				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   1335  4088				  -	      sta	PF2L	;3
   1336  4088				  -	      lda	playfield+pfres*pfwidth-129,x
   1337  4088				  -	      sta	PF1R	; 3 too early?
   1338  4088				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   1339  4088				  -	      sta	PF2R	;3
   1340  4088					      else
   1341  4088		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
   1342  408a		       85 0e		      sta	PF1L	;3
   1343  408c		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   1344  408e		       85 0f		      sta	PF2L	;3
   1345  4090		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
   1346  4092		       85 0e		      sta	PF1R	; 3 too early?
   1347  4094		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   1348  4096		       85 0f		      sta	PF2R	;3
   1349  4098					      endif
   1350  4098							; sleep 3
   1351  4098
   1352  4098		       a5 8e		      lda	player0height
   1353  409a		       c7 85		      dcp	player0y
   1354  409c		       90 b1		      bcc	.skipDrawP0
   1355  409e		       a4 85		      ldy	player0y
   1356  40a0		       b1 8a		      lda	(player0pointer),y
   1357  40a2				   .continueP0
   1358  40a2		       85 1b		      sta	GRP0
   1359  40a4
   1360  40a4				  -	      ifnconst	no_blank_lines
   1361  40a4				  -	      ifnconst	playercolors
   1362  40a4				  -	      lda	missile0height	;3
   1363  40a4				  -	      dcp	missile0y	;5
   1364  40a4				  -	      sbc	stack1
   1365  40a4				  -	      sta	ENAM0	;3
   1366  40a4				  -	      else
   1367  40a4				  -	      lda	(player0color),y
   1368  40a4				  -	      sta	player0colorstore
   1369  40a4				  -	      sleep	6
   1370  40a4				  -	      endif
   1371  40a4				  -	      dec	temp1
   1372  40a4				  -	      bne	continuekernel
   1373  40a4					      else
   1374  40a4		       c6 9c		      dec	temp1
   1375  40a6		       f0 0c		      beq	altkernel2
   1376  40a8				  -	      ifconst	readpaddle
   1377  40a8				  -	      ldy	currentpaddle
   1378  40a8				  -	      lda	INPT0,y
   1379  40a8				  -	      bpl	noreadpaddle
   1380  40a8				  -	      inc	paddle
   1381  40a8				  -	      jmp	continuekernel2
   1382  40a8				  -noreadpaddle
   1383  40a8				  -	      sleep	2
   1384  40a8				  -	      jmp	continuekernel
   1385  40a8					      else
   1386  40a8					      ifnconst	playercolors
   1387  40a8					      ifconst	PFcolors
   1388  40a8		       8a		      txa
   1389  40a9		       a8		      tay
   1390  40aa		       b1 f0		      lda	(pfcolortable),y
   1391  40ac					      ifnconst	backgroundchange
   1392  40ac		       85 08		      sta	COLUPF
   1393  40ae				  -	      else
   1394  40ae				  -	      sta	COLUBK
   1395  40ae					      endif
   1396  40ae		       4c 5b f0 	      jmp	continuekernel
   1397  40b1				  -	      else
   1398  40b1				  -	      ifconst	kernelmacrodef
   1399  40b1				  -	      kernelmacro
   1400  40b1				  -	      else
   1401  40b1				  -	      sleep	12
   1402  40b1				  -	      endif
   1403  40b1					      endif
   1404  40b1				  -	      else
   1405  40b1				  -	      lda	(player0color),y
   1406  40b1				  -	      sta	player0colorstore
   1407  40b1				  -	      sleep	4
   1408  40b1					      endif
   1409  40b1		       4c 5b f0 	      jmp	continuekernel
   1410  40b4					      endif
   1411  40b4				   altkernel2
   1412  40b4		       8a		      txa
   1413  40b5					      ifnconst	vertical_reflect
   1414  40b5		       cb fc		      sbx	#256-pfwidth
   1415  40b7				  -	      else
   1416  40b7				  -	      sbx	#256-pfwidth/2
   1417  40b7					      endif
   1418  40b7		       30 24		      bmi	lastkernelline
   1419  40b9				  -	      ifconst	pfrowheight
   1420  40b9				  -	      lda	#pfrowheight
   1421  40b9					      else
   1422  40b9					      ifnconst	pfres
   1423  40b9		       a9 08		      lda	#8
   1424  40bb				  -	      else
   1425  40bb				  -	      lda	#(96/pfres)	; try to come close to the real size
   1426  40bb					      endif
   1427  40bb					      endif
   1428  40bb		       85 9c		      sta	temp1
   1429  40bd		       4c 5b f0 	      jmp	continuekernel
   1430  40c0					      endif
   1431  40c0
   1432  40c0				   altkernel
   1433  40c0
   1434  40c0				  -	      ifconst	PFmaskvalue
   1435  40c0				  -	      lda	#PFmaskvalue
   1436  40c0					      else
   1437  40c0		       a9 00		      lda	#0
   1438  40c2					      endif
   1439  40c2		       85 0e		      sta	PF1L
   1440  40c4		       85 0f		      sta	PF2
   1441  40c6
   1442  40c6
   1443  40c6							;sleep 3
   1444  40c6
   1445  40c6							;28 cycles to fix things
   1446  40c6							;minus 11=17
   1447  40c6
   1448  40c6							; lax temp4
   1449  40c6							; clc
   1450  40c6		       8a		      txa
   1451  40c7					      ifnconst	vertical_reflect
   1452  40c7		       cb fc		      sbx	#256-pfwidth
   1453  40c9				  -	      else
   1454  40c9				  -	      sbx	#256-pfwidth/2
   1455  40c9					      endif
   1456  40c9
   1457  40c9		       30 12		      bmi	lastkernelline
   1458  40cb
   1459  40cb				  -	      ifconst	PFcolorandheight
   1460  40cb				  -	      ifconst	pfres
   1461  40cb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   1462  40cb				  -	      else
   1463  40cb				  -	      ldy	playfieldcolorandheight-87,x
   1464  40cb				  -	      endif
   1465  40cb				  -	      ifnconst	backgroundchange
   1466  40cb				  -	      sty	COLUPF
   1467  40cb				  -	      else
   1468  40cb				  -	      sty	COLUBK
   1469  40cb				  -	      endif
   1470  40cb				  -	      ifconst	pfres
   1471  40cb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   1472  40cb				  -	      else
   1473  40cb				  -	      lda	playfieldcolorandheight-88,x
   1474  40cb				  -	      endif
   1475  40cb				  -	      sta.w	temp1
   1476  40cb					      endif
   1477  40cb				  -	      ifconst	PFheights
   1478  40cb				  -	      lsr
   1479  40cb				  -	      lsr
   1480  40cb				  -	      tay
   1481  40cb				  -	      lda	(pfheighttable),y
   1482  40cb				  -	      sta.w	temp1
   1483  40cb					      endif
   1484  40cb					      ifconst	PFcolors
   1485  40cb		       a8		      tay
   1486  40cc		       b1 f0		      lda	(pfcolortable),y
   1487  40ce					      ifnconst	backgroundchange
   1488  40ce		       85 08		      sta	COLUPF
   1489  40d0				  -	      else
   1490  40d0				  -	      sta	COLUBK
   1491  40d0					      endif
   1492  40d0				  -	      ifconst	pfrowheight
   1493  40d0				  -	      lda	#pfrowheight
   1494  40d0					      else
   1495  40d0					      ifnconst	pfres
   1496  40d0		       a9 08		      lda	#8
   1497  40d2				  -	      else
   1498  40d2				  -	      lda	#(96/pfres)	; try to come close to the real size
   1499  40d2					      endif
   1500  40d2					      endif
   1501  40d2		       85 9c		      sta	temp1
   1502  40d4					      endif
   1503  40d4					      ifnconst	PFcolorandheight
   1504  40d4				  -	      ifnconst	PFcolors
   1505  40d4				  -	      ifnconst	PFheights
   1506  40d4				  -	      ifnconst	no_blank_lines
   1507  40d4				  -			; read paddle 0
   1508  40d4				  -			; lo-res paddle read
   1509  40d4				  -			; bit INPT0
   1510  40d4				  -			; bmi paddleskipread
   1511  40d4				  -			; inc paddle0
   1512  40d4				  -			;donepaddleskip
   1513  40d4				  -	      sleep	10
   1514  40d4				  -	      ifconst	pfrowheight
   1515  40d4				  -	      lda	#pfrowheight
   1516  40d4				  -	      else
   1517  40d4				  -	      ifnconst	pfres
   1518  40d4				  -	      lda	#8
   1519  40d4				  -	      else
   1520  40d4				  -	      lda	#(96/pfres)	; try to come close to the real size
   1521  40d4				  -	      endif
   1522  40d4				  -	      endif
   1523  40d4				  -	      sta	temp1
   1524  40d4				  -	      endif
   1525  40d4				  -	      endif
   1526  40d4					      endif
   1527  40d4					      endif
   1528  40d4
   1529  40d4
   1530  40d4		       a5 92		      lda	ballheight
   1531  40d6		       c7 89		      dcp	bally
   1532  40d8		       e5 9f		      sbc	temp4
   1533  40da
   1534  40da
   1535  40da		       4c 72 f0 	      jmp	goback
   1536  40dd
   1537  40dd
   1538  40dd				  -	      ifnconst	no_blank_lines
   1539  40dd				  -lastkernelline
   1540  40dd				  -	      ifnconst	PFcolors
   1541  40dd				  -	      sleep	10
   1542  40dd				  -	      else
   1543  40dd				  -	      ldy	#124
   1544  40dd				  -	      lda	(pfcolortable),y
   1545  40dd				  -	      sta	COLUPF
   1546  40dd				  -	      endif
   1547  40dd				  -
   1548  40dd				  -	      ifconst	PFheights
   1549  40dd				  -	      ldx	#1
   1550  40dd				  -			;sleep 4
   1551  40dd				  -	      sleep	3	; this was over 1 cycle
   1552  40dd				  -	      else
   1553  40dd				  -	      ldx	playfieldpos
   1554  40dd				  -			;sleep 3
   1555  40dd				  -	      sleep	2	; this was over 1 cycle
   1556  40dd				  -	      endif
   1557  40dd				  -
   1558  40dd				  -	      jmp	enterlastkernel
   1559  40dd				  -
   1560  40dd					      else
   1561  40dd				   lastkernelline
   1562  40dd
   1563  40dd				  -	      ifconst	PFheights
   1564  40dd				  -	      ldx	#1
   1565  40dd				  -			;sleep 5
   1566  40dd				  -	      sleep	4	; this was over 1 cycle
   1567  40dd					      else
   1568  40dd		       a6 ef		      ldx	playfieldpos
   1569  40df							;sleep 4
      0  40df					      sleep	3	; this was over 1 cycle
      1  40df				   .CYCLES    SET	3
      2  40df
      3  40df				  -	      IF	.CYCLES < 2
      4  40df				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40df				  -	      ERR
      6  40df					      ENDIF
      7  40df
      8  40df					      IF	.CYCLES & 1
      9  40df					      IFNCONST	NO_ILLEGAL_OPCODES
     10  40df		       04 00		      nop	0
     11  40e1				  -	      ELSE
     12  40e1				  -	      bit	VSYNC
     13  40e1					      ENDIF
     14  40e1				   .CYCLES    SET	.CYCLES - 3
     15  40e1					      ENDIF
     16  40e1
     17  40e1				  -	      REPEAT	.CYCLES / 2
     18  40e1				  -	      nop
     19  40e1					      REPEND
   1571  40e1					      endif
   1572  40e1
   1573  40e1		       e0 00		      cpx	#0
   1574  40e3		       d0 22		      bne	.enterfromNBL
   1575  40e5		       4c 68 f1 	      jmp	no_blank_lines_bailout
   1576  40e8					      endif
   1577  40e8
   1578  40e8					      if	((<*)>$d5)
   1579  4100		       00 00 00 00*	      align	256
   1580  4100					      endif
   1581  4100							; this is a kludge to prevent page wrapping - fix!!!
   1582  4100
   1583  4100				   .skipDrawlastP1
   1584  4100		       a9 00		      lda	#0
   1585  4102		       a8		      tay		; added so we don't cross a page
   1586  4103		       4c 2d f1 	      jmp	.continuelastP1
   1587  4106
   1588  4106				   .endkerloop		; enter at cycle 59??
   1589  4106
   1590  4106		       ea		      nop
   1591  4107
   1592  4107				   .enterfromNBL
   1593  4107				  -	      ifconst	pfres
   1594  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
   1595  4107				  -	      sty	PF1L	;3
   1596  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   1597  4107				  -	      sty	PF2L	;3
   1598  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
   1599  4107				  -	      sty	PF1R	; possibly too early?
   1600  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   1601  4107				  -	      sty	PF2R	;3
   1602  4107					      else
   1603  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
   1604  410a		       84 0e		      sty	PF1L	;3
   1605  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   1606  410f		       84 0f		      sty	PF2L	;3
   1607  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
   1608  4114		       84 0e		      sty	PF1R	; possibly too early?
   1609  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   1610  4119		       84 0f		      sty	PF2R	;3
   1611  411b					      endif
   1612  411b
   1613  411b				   enterlastkernel
   1614  411b		       a5 92		      lda	ballheight
   1615  411d
   1616  411d							; tya
   1617  411d		       c7 89		      dcp	bally
   1618  411f							; sleep 4
   1619  411f
   1620  411f							; sbc stack3
   1621  411f		       2a		      rol
   1622  4120		       2a		      rol
   1623  4121		       85 1f		      sta	ENABL
   1624  4123
   1625  4123		       a5 8f		      lda	player1height	;3
   1626  4125		       c7 86		      dcp	player1y	;5
   1627  4127		       90 d7		      bcc	.skipDrawlastP1
   1628  4129		       a4 86		      ldy	player1y	;3
   1629  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   1630  412d							; so it doesn't cross a page boundary!
   1631  412d
   1632  412d				   .continuelastP1
   1633  412d		       85 1c		      sta	GRP1	;3
   1634  412f
   1635  412f				  -	      ifnconst	player1colors
   1636  412f				  -	      lda	missile1height	;3
   1637  412f				  -	      dcp	missile1y	;5
   1638  412f					      else
   1639  412f		       b1 87		      lda	(player1color),y
   1640  4131		       85 07		      sta	COLUP1
   1641  4133					      endif
   1642  4133
   1643  4133		       ca		      dex
   1644  4134							;dec temp4 ; might try putting this above PF writes
   1645  4134		       f0 34		      beq	endkernel
   1646  4136
   1647  4136
   1648  4136				  -	      ifconst	pfres
   1649  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
   1650  4136				  -	      sty	PF1L	;3
   1651  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   1652  4136				  -	      sty	PF2L	;3
   1653  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
   1654  4136				  -	      sty	PF1R	; possibly too early?
   1655  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   1656  4136				  -	      sty	PF2R	;3
   1657  4136					      else
   1658  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
   1659  4139		       84 0e		      sty	PF1L	;3
   1660  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   1661  413e		       84 0f		      sty	PF2L	;3
   1662  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
   1663  4143		       84 0e		      sty	PF1R	; possibly too early?
   1664  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   1665  4148		       84 0f		      sty	PF2R	;3
   1666  414a					      endif
   1667  414a
   1668  414a				  -	      ifnconst	player1colors
   1669  414a				  -	      rol		;2
   1670  414a				  -	      rol		;2
   1671  414a				  -	      sta	ENAM1	;3
   1672  414a					      else
   1673  414a					      ifnconst	playercolors
      0  414a					      sleep	7
      1  414a				   .CYCLES    SET	7
      2  414a
      3  414a				  -	      IF	.CYCLES < 2
      4  414a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  414a				  -	      ERR
      6  414a					      ENDIF
      7  414a
      8  414a					      IF	.CYCLES & 1
      9  414a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  414a		       04 00		      nop	0
     11  414c				  -	      ELSE
     12  414c				  -	      bit	VSYNC
     13  414c					      ENDIF
     14  414c				   .CYCLES    SET	.CYCLES - 3
     15  414c					      ENDIF
     16  414c
     17  414c					      REPEAT	.CYCLES / 2
     18  414c		       ea		      nop
     17  414c					      REPEND
     18  414d		       ea		      nop
     19  414e					      REPEND
   1675  414e				  -	      else
   1676  414e				  -	      lda.w	player0colorstore
   1677  414e				  -	      sta	COLUP0
   1678  414e					      endif
   1679  414e					      endif
   1680  414e
   1681  414e		       ad 8e 00 	      lda.w	player0height
   1682  4151		       c7 85		      dcp	player0y
   1683  4153		       90 0d		      bcc	.skipDrawlastP0
   1684  4155		       a4 85		      ldy	player0y
   1685  4157		       b1 8a		      lda	(player0pointer),y
   1686  4159				   .continuelastP0
   1687  4159		       85 1b		      sta	GRP0
   1688  415b
   1689  415b
   1690  415b
   1691  415b				  -	      ifnconst	no_blank_lines
   1692  415b				  -	      lda	missile0height	;3
   1693  415b				  -	      dcp	missile0y	;5
   1694  415b				  -	      sbc	stack1
   1695  415b				  -	      sta	ENAM0	;3
   1696  415b				  -	      jmp	.endkerloop
   1697  415b					      else
   1698  415b				  -	      ifconst	readpaddle
   1699  415b				  -	      ldy	currentpaddle
   1700  415b				  -	      lda	INPT0,y
   1701  415b				  -	      bpl	noreadpaddle2
   1702  415b				  -	      inc	paddle
   1703  415b				  -	      jmp	.endkerloop
   1704  415b				  -noreadpaddle2
   1705  415b				  -	      sleep	4
   1706  415b				  -	      jmp	.endkerloop
   1707  415b					      else		; no_blank_lines and no paddle reading
   1708  415b		       68		      pla
   1709  415c		       48		      pha		; 14 cycles in 4 bytes
   1710  415d		       68		      pla
   1711  415e		       48		      pha
   1712  415f							; sleep 14
   1713  415f		       4c 06 f1 	      jmp	.endkerloop
   1714  4162					      endif
   1715  4162					      endif
   1716  4162
   1717  4162
   1718  4162							; ifconst donepaddleskip
   1719  4162							;paddleskipread
   1720  4162							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   1721  4162							; plus we get a lo-res paddle read
   1722  4162							; bmi donepaddleskip
   1723  4162							; endif
   1724  4162
   1725  4162				   .skipDrawlastP0
   1726  4162		       a9 00		      lda	#0
   1727  4164		       a8		      tay
   1728  4165		       4c 59 f1 	      jmp	.continuelastP0
   1729  4168
   1730  4168					      ifconst	no_blank_lines
   1731  4168				   no_blank_lines_bailout
   1732  4168		       a2 00		      ldx	#0
   1733  416a					      endif
   1734  416a
   1735  416a				   endkernel
   1736  416a							; 6 digit score routine
   1737  416a		       86 0e		      stx	PF1
   1738  416c		       86 0f		      stx	PF2
   1739  416e		       86 0d		      stx	PF0
   1740  4170		       18		      clc
   1741  4171
   1742  4171				  -	      ifconst	pfrowheight
   1743  4171				  -	      lda	#pfrowheight+2
   1744  4171					      else
   1745  4171					      ifnconst	pfres
   1746  4171		       a9 0a		      lda	#10
   1747  4173				  -	      else
   1748  4173				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   1749  4173					      endif
   1750  4173					      endif
   1751  4173
   1752  4173		       e5 ef		      sbc	playfieldpos
   1753  4175		       85 ef		      sta	playfieldpos
   1754  4177		       8a		      txa
   1755  4178
   1756  4178				  -	      ifconst	shakescreen
   1757  4178				  -	      bit	shakescreen
   1758  4178				  -	      bmi	noshakescreen2
   1759  4178				  -	      ldx	#$3D
   1760  4178				  -noshakescreen2
   1761  4178					      endif
   1762  4178
   1763  4178		       95 02		      sta	WSYNC,x
   1764  417a
   1765  417a							; STA WSYNC ;first one, need one more
   1766  417a		       85 0b		      sta	REFP0
   1767  417c		       85 0c		      sta	REFP1
   1768  417e		       85 1b		      STA	GRP0
   1769  4180		       85 1c		      STA	GRP1
   1770  4182							; STA PF1
   1771  4182							; STA PF2
   1772  4182		       85 2b		      sta	HMCLR
   1773  4184		       85 1d		      sta	ENAM0
   1774  4186		       85 1e		      sta	ENAM1
   1775  4188		       85 1f		      sta	ENABL
   1776  418a
   1777  418a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   1778  418c		       85 85		      sta	player0y
   1779  418e		       a5 9e		      lda	temp3
   1780  4190		       85 86		      sta	player1y
   1781  4192				  -	      ifnconst	player1colors
   1782  4192				  -	      lda	temp6
   1783  4192				  -	      sta	missile1y
   1784  4192					      endif
   1785  4192					      ifnconst	playercolors
   1786  4192					      ifnconst	readpaddle
   1787  4192		       a5 a0		      lda	temp5
   1788  4194		       85 91		      sta	missile0y
   1789  4196					      endif
   1790  4196					      endif
   1791  4196		       a5 f7		      lda	stack2
   1792  4198		       85 89		      sta	bally
   1793  419a
   1794  419a							; strangely, this isn't required any more. might have
   1795  419a							; resulted from the no_blank_lines score bounce fix
   1796  419a							;ifconst no_blank_lines
   1797  419a							;sta WSYNC
   1798  419a							;endif
   1799  419a
   1800  419a		       ad 84 02 	      lda	INTIM
   1801  419d		       18		      clc
   1802  419e				  -	      ifnconst	vblank_time
   1803  419e				  -	      adc	#43+12+87
   1804  419e					      else
   1805  419e		       69 8e		      adc	#vblank_time+12+87
   1806  41a0
   1807  41a0					      endif
   1808  41a0							; sta WSYNC
   1809  41a0		       8d 96 02 	      sta	TIM64T
   1810  41a3
   1811  41a3				  -	      ifconst	minikernel
   1812  41a3				  -	      jsr	minikernel
   1813  41a3					      endif
   1814  41a3
   1815  41a3							; now reassign temp vars for score pointers
   1816  41a3
   1817  41a3							; score pointers contain:
   1818  41a3							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1819  41a3							; swap lo2->temp1
   1820  41a3							; swap lo4->temp3
   1821  41a3							; swap lo6->temp5
   1822  41a3					      ifnconst	noscore
   1823  41a3		       a5 97		      lda	scorepointers+1
   1824  41a5							; ldy temp1
   1825  41a5		       85 9c		      sta	temp1
   1826  41a7							; sty scorepointers+1
   1827  41a7
   1828  41a7		       a5 99		      lda	scorepointers+3
   1829  41a9							; ldy temp3
   1830  41a9		       85 9e		      sta	temp3
   1831  41ab							; sty scorepointers+3
   1832  41ab
   1833  41ab
   1834  41ab		       85 2b		      sta	HMCLR
   1835  41ad		       ba		      tsx
   1836  41ae		       86 f6		      stx	stack1
   1837  41b0		       a2 e0		      ldx	#$E0
   1838  41b2		       86 20		      stx	HMP0
   1839  41b4
   1840  41b4		       a5 a3		      LDA	scorecolor
   1841  41b6		       85 06		      STA	COLUP0
   1842  41b8		       85 07		      STA	COLUP1
   1843  41ba				  -	      ifconst	scorefade
   1844  41ba				  -	      STA	stack2
   1845  41ba					      endif
   1846  41ba					      ifconst	pfscore
   1847  41ba		       a5 f4		      lda	pfscorecolor
   1848  41bc		       85 08		      sta	COLUPF
   1849  41be					      endif
   1850  41be		       85 02		      sta	WSYNC
   1851  41c0		       a2 00		      ldx	#0
   1852  41c2		       86 1b		      STx	GRP0
   1853  41c4		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1854  41c6
   1855  41c6		       a5 9b		      lda	scorepointers+5
   1856  41c8							; ldy temp5
   1857  41c8		       95 a0		      sta	temp5,x
   1858  41ca							; sty scorepointers+5
   1859  41ca		       a9 ff		      lda	#>scoretable
   1860  41cc		       85 97		      sta	scorepointers+1
   1861  41ce		       85 99		      sta	scorepointers+3
   1862  41d0		       85 9b		      sta	scorepointers+5
   1863  41d2		       85 9d		      sta	temp2
   1864  41d4		       85 9f		      sta	temp4
   1865  41d6		       85 a1		      sta	temp6
   1866  41d8		       a0 07		      LDY	#7
   1867  41da		       84 25		      STY	VDELP0
   1868  41dc		       85 10		      STA	RESP0
   1869  41de		       85 11		      STA	RESP1
   1870  41e0
   1871  41e0
   1872  41e0		       a9 03		      LDA	#$03
   1873  41e2		       85 04		      STA	NUSIZ0
   1874  41e4		       85 05		      STA	NUSIZ1
   1875  41e6		       85 26		      STA	VDELP1
   1876  41e8		       a9 f0		      LDA	#$F0
   1877  41ea		       85 21		      STA	HMP1
   1878  41ec		       b1 96		      lda	(scorepointers),y
   1879  41ee		       85 1b		      sta	GRP0
   1880  41f0		       85 2a		      STA	HMOVE	; cycle 73 ?
   1881  41f2		       4c 09 f2 	      jmp	beginscore
   1882  41f5
   1883  41f5
   1884  41f5					      if	((<*)>$d4)
   1885  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   1886  4200					      endif
   1887  4200
   1888  4200				   loop2
   1889  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
   1890  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   1891  4204					      ifconst	pfscore
   1892  4204		       ad f2 00 	      lda.w	pfscore1
   1893  4207		       85 0e		      sta	PF1
   1894  4209				  -	      else
   1895  4209				  -	      ifconst	scorefade
   1896  4209				  -	      sleep	2
   1897  4209				  -	      dec	stack2	; decrement the temporary scorecolor
   1898  4209				  -	      else
   1899  4209				  -	      sleep	7
   1900  4209				  -	      endif
   1901  4209					      endif
   1902  4209							; cycle 0
   1903  4209				   beginscore
   1904  4209		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   1905  420b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   1906  420d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   1907  420f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   1908  4211		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   1909  4213		       9a		      txs
   1910  4214		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   1911  4216				  -	      ifconst	scorefade
   1912  4216				  -	      lda	stack2
   1913  4216					      else
      0  4216					      sleep	3
      1  4216				   .CYCLES    SET	3
      2  4216
      3  4216				  -	      IF	.CYCLES < 2
      4  4216				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4216				  -	      ERR
      6  4216					      ENDIF
      7  4216
      8  4216					      IF	.CYCLES & 1
      9  4216					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4216		       04 00		      nop	0
     11  4218				  -	      ELSE
     12  4218				  -	      bit	VSYNC
     13  4218					      ENDIF
     14  4218				   .CYCLES    SET	.CYCLES - 3
     15  4218					      ENDIF
     16  4218
     17  4218				  -	      REPEAT	.CYCLES / 2
     18  4218				  -	      nop
     19  4218					      REPEND
   1915  4218					      endif
   1916  4218
   1917  4218					      ifconst	pfscore
   1918  4218		       a5 f3		      lda	pfscore2
   1919  421a		       85 0e		      sta	PF1
   1920  421c				  -	      else
   1921  421c				  -	      ifconst	scorefade
   1922  421c				  -	      sta	COLUP0
   1923  421c				  -	      sta	COLUP1
   1924  421c				  -	      else
   1925  421c				  -	      sleep	6
   1926  421c				  -	      endif
   1927  421c					      endif
   1928  421c
   1929  421c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   1930  421e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   1931  4220		       ba		      tsx
   1932  4221		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   1933  4223		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   1934  4225		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   1935  4227		       88		      dey
   1936  4228		       10 d6		      bpl	loop2	;+2 60 180
   1937  422a
   1938  422a		       a6 f6		      ldx	stack1
   1939  422c		       9a		      txs
   1940  422d							; lda scorepointers+1
   1941  422d		       a4 9c		      ldy	temp1
   1942  422f							; sta temp1
   1943  422f		       84 97		      sty	scorepointers+1
   1944  4231
   1945  4231		       a9 00		      LDA	#0
   1946  4233		       85 0e		      sta	PF1
   1947  4235		       85 1b		      STA	GRP0
   1948  4237		       85 1c		      STA	GRP1
   1949  4239		       85 25		      STA	VDELP0
   1950  423b		       85 26		      STA	VDELP1	;do we need these
   1951  423d		       85 04		      STA	NUSIZ0
   1952  423f		       85 05		      STA	NUSIZ1
   1953  4241
   1954  4241							; lda scorepointers+3
   1955  4241		       a4 9e		      ldy	temp3
   1956  4243							; sta temp3
   1957  4243		       84 99		      sty	scorepointers+3
   1958  4245
   1959  4245							; lda scorepointers+5
   1960  4245		       a4 a0		      ldy	temp5
   1961  4247							; sta temp5
   1962  4247		       84 9b		      sty	scorepointers+5
   1963  4249					      endif		;noscore
   1964  4249		       a9 c2		      LDA	#%11000010
   1965  424b		       85 02		      sta	WSYNC
   1966  424d		       85 01		      STA	VBLANK
      0  424f					      RETURN
      1  424f				  -	      ifnconst	bankswitch
      2  424f				  -	      rts
      3  424f					      else
      4  424f		       4c dd ff 	      jmp	BS_return
      5  4252					      endif
   1968  4252
   1969  4252				  -	      ifconst	shakescreen
   1970  4252				  -doshakescreen
   1971  4252				  -	      bit	shakescreen
   1972  4252				  -	      bmi	noshakescreen
   1973  4252				  -	      sta	WSYNC
   1974  4252				  -noshakescreen
   1975  4252				  -	      ldx	missile0height
   1976  4252				  -	      inx
   1977  4252				  -	      rts
   1978  4252					      endif
   1979  4252
   1980  4252							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1981  4252
   1982  4252				   start
   1983  4252		       78		      sei
   1984  4253		       d8		      cld
   1985  4254		       a0 00		      ldy	#0
   1986  4256		       a5 d0		      lda	$D0
   1987  4258		       c9 2c		      cmp	#$2C	;check RAM location #1
   1988  425a		       d0 07		      bne	MachineIs2600
   1989  425c		       a5 d1		      lda	$D1
   1990  425e		       c9 a9		      cmp	#$A9	;check RAM location #2
   1991  4260		       d0 01		      bne	MachineIs2600
   1992  4262		       88		      dey
   1993  4263				   MachineIs2600
   1994  4263		       a2 00		      ldx	#0
   1995  4265		       8a		      txa
   1996  4266				   clearmem
   1997  4266		       e8		      inx
   1998  4267		       9a		      txs
   1999  4268		       48		      pha
   2000  4269		       d0 fb		      bne	clearmem
   2001  426b		       84 9c		      sty	temp1
   2002  426d					      ifnconst	multisprite
   2003  426d				  -	      ifconst	pfrowheight
   2004  426d				  -	      lda	#pfrowheight
   2005  426d					      else
   2006  426d				  -	      ifconst	pfres
   2007  426d				  -	      lda	#(96/pfres)
   2008  426d					      else
   2009  426d		       a9 08		      lda	#8
   2010  426f					      endif
   2011  426f					      endif
   2012  426f		       85 ef		      sta	playfieldpos
   2013  4271					      endif
   2014  4271		       a2 05		      ldx	#5
   2015  4273				   initscore
   2016  4273		       a9 74		      lda	#<scoretable
   2017  4275		       95 96		      sta	scorepointers,x
   2018  4277		       ca		      dex
   2019  4278		       10 f9		      bpl	initscore
   2020  427a		       a9 01		      lda	#1
   2021  427c		       85 0a		      sta	CTRLPF
   2022  427e		       0d 84 02 	      ora	INTIM
   2023  4281		       85 a2		      sta	rand
   2024  4283
   2025  4283				  -	      ifconst	multisprite
   2026  4283				  -	      jsr	multisprite_setup
   2027  4283					      endif
   2028  4283
   2029  4283				  -	      ifnconst	bankswitch
   2030  4283				  -	      jmp	game
   2031  4283					      else
   2032  4283		       a9 8f		      lda	#>(game-1)
   2033  4285		       48		      pha
   2034  4286		       a9 ff		      lda	#<(game-1)
   2035  4288		       48		      pha
   2036  4289		       48		      pha
   2037  428a		       48		      pha
   2038  428b		       a2 01		      ldx	#1
   2039  428d		       4c eb ff 	      jmp	BS_jsr
   2040  4290					      endif
   2041  4290							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2042  4290
   2043  4290							; playfield drawing routines
   2044  4290							; you get a 32x12 bitmapped display in a single color :)
   2045  4290							; 0-31 and 0-11
   2046  4290
   2047  4290				   pfclear		; clears playfield - or fill with pattern
   2048  4290				  -	      ifconst	pfres
   2049  4290				  -	      ldx	#pfres*pfwidth-1
   2050  4290					      else
   2051  4290		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   2052  4292					      endif
   2053  4292				   pfclear_loop
   2054  4292					      ifnconst	superchip
   2055  4292		       95 a4		      sta	playfield,x
   2056  4294				  -	      else
   2057  4294				  -	      sta	playfield-128,x
   2058  4294					      endif
   2059  4294		       ca		      dex
   2060  4295		       10 fb		      bpl	pfclear_loop
      0  4297					      RETURN
      1  4297				  -	      ifnconst	bankswitch
      2  4297				  -	      rts
      3  4297					      else
      4  4297		       4c dd ff 	      jmp	BS_return
      5  429a					      endif
   2062  429a
   2063  429a				   setuppointers
   2064  429a		       86 9d		      stx	temp2	; store on.off.flip value
   2065  429c		       aa		      tax		; put x-value in x 
   2066  429d		       4a		      lsr
   2067  429e		       4a		      lsr
   2068  429f		       4a		      lsr		; divide x pos by 8 
   2069  42a0		       85 9c		      sta	temp1
   2070  42a2		       98		      tya
   2071  42a3		       0a		      asl
   2072  42a4					      if	pfwidth=4
   2073  42a4		       0a		      asl		; multiply y pos by 4
   2074  42a5					      endif		; else multiply by 2
   2075  42a5		       18		      clc
   2076  42a6		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   2077  42a8		       a8		      tay		; put the value in y
   2078  42a9		       a5 9d		      lda	temp2	; restore on.off.flip value
   2079  42ab		       60		      rts
   2080  42ac
   2081  42ac				   pfread
   2082  42ac							;x=xvalue, y=yvalue
   2083  42ac		       20 9a f2 	      jsr	setuppointers
   2084  42af		       bd 44 f3 	      lda	setbyte,x
   2085  42b2		       39 a4 00 	      and	playfield,y
   2086  42b5		       5d 44 f3 	      eor	setbyte,x
   2087  42b8							; beq readzero
   2088  42b8							; lda #1
   2089  42b8							; readzero
      0  42b8					      RETURN
      1  42b8				  -	      ifnconst	bankswitch
      2  42b8				  -	      rts
      3  42b8					      else
      4  42b8		       4c dd ff 	      jmp	BS_return
      5  42bb					      endif
   2091  42bb
   2092  42bb				   pfpixel
   2093  42bb							;x=xvalue, y=yvalue, a=0,1,2
   2094  42bb		       20 9a f2 	      jsr	setuppointers
   2095  42be
   2096  42be					      ifconst	bankswitch
   2097  42be		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   2098  42c0		       f0 0f		      beq	pixelon_r	; if "on" go to on
   2099  42c2		       4a		      lsr
   2100  42c3		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   2101  42c5		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   2102  42c8		       5d 44 f3 	      eor	setbyte,x
   2103  42cb				  -	      ifconst	superchip
   2104  42cb				  -	      sta	playfield-128,y
   2105  42cb					      else
   2106  42cb		       99 a4 00 	      sta	playfield,y
   2107  42ce					      endif
      0  42ce					      RETURN
      1  42ce				  -	      ifnconst	bankswitch
      2  42ce				  -	      rts
      3  42ce					      else
      4  42ce		       4c dd ff 	      jmp	BS_return
      5  42d1					      endif
   2109  42d1				   pixelon_r
   2110  42d1		       b9 a4 00 	      lda	playfield,y
   2111  42d4		       1d 44 f3 	      ora	setbyte,x
   2112  42d7				  -	      ifconst	superchip
   2113  42d7				  -	      sta	playfield-128,y
   2114  42d7					      else
   2115  42d7		       99 a4 00 	      sta	playfield,y
   2116  42da					      endif
      0  42da					      RETURN
      1  42da				  -	      ifnconst	bankswitch
      2  42da				  -	      rts
      3  42da					      else
      4  42da		       4c dd ff 	      jmp	BS_return
      5  42dd					      endif
   2118  42dd				   pixeloff_r
   2119  42dd		       bd 44 f3 	      lda	setbyte,x
   2120  42e0		       49 ff		      eor	#$ff
   2121  42e2		       39 a4 00 	      and	playfield,y
   2122  42e5				  -	      ifconst	superchip
   2123  42e5				  -	      sta	playfield-128,y
   2124  42e5					      else
   2125  42e5		       99 a4 00 	      sta	playfield,y
   2126  42e8					      endif
      0  42e8					      RETURN
      1  42e8				  -	      ifnconst	bankswitch
      2  42e8				  -	      rts
      3  42e8					      else
      4  42e8		       4c dd ff 	      jmp	BS_return
      5  42eb					      endif
   2128  42eb
   2129  42eb				  -	      else
   2130  42eb				  -	      jmp	plotpoint
   2131  42eb					      endif
   2132  42eb
   2133  42eb				   pfhline
   2134  42eb							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   2135  42eb		       20 9a f2 	      jsr	setuppointers
   2136  42ee		       4c f8 f2 	      jmp	noinc
   2137  42f1				   keepgoing
   2138  42f1		       e8		      inx
   2139  42f2		       8a		      txa
   2140  42f3		       29 07		      and	#7
   2141  42f5		       d0 01		      bne	noinc
   2142  42f7		       c8		      iny
   2143  42f8				   noinc
   2144  42f8		       20 1d f3 	      jsr	plotpoint
   2145  42fb		       e4 9e		      cpx	temp3
   2146  42fd		       30 f2		      bmi	keepgoing
      0  42ff					      RETURN
      1  42ff				  -	      ifnconst	bankswitch
      2  42ff				  -	      rts
      3  42ff					      else
      4  42ff		       4c dd ff 	      jmp	BS_return
      5  4302					      endif
   2148  4302
   2149  4302				   pfvline
   2150  4302							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   2151  4302		       20 9a f2 	      jsr	setuppointers
   2152  4305		       84 9c		      sty	temp1	; store memory location offset
   2153  4307		       e6 9e		      inc	temp3	; increase final x by 1 
   2154  4309		       a5 9e		      lda	temp3
   2155  430b		       0a		      asl
   2156  430c					      if	pfwidth=4
   2157  430c		       0a		      asl		; multiply by 4
   2158  430d					      endif		; else multiply by 2
   2159  430d		       85 9e		      sta	temp3	; store it
   2160  430f							; Thanks to Michael Rideout for fixing a bug in this code
   2161  430f							; right now, temp1=y=starting memory location, temp3=final
   2162  430f							; x should equal original x value
   2163  430f				   keepgoingy
   2164  430f		       20 1d f3 	      jsr	plotpoint
   2165  4312		       c8		      iny
   2166  4313		       c8		      iny
   2167  4314					      if	pfwidth=4
   2168  4314		       c8		      iny
   2169  4315		       c8		      iny
   2170  4316					      endif
   2171  4316		       c4 9e		      cpy	temp3
   2172  4318		       30 f5		      bmi	keepgoingy
      0  431a					      RETURN
      1  431a				  -	      ifnconst	bankswitch
      2  431a				  -	      rts
      3  431a					      else
      4  431a		       4c dd ff 	      jmp	BS_return
      5  431d					      endif
   2174  431d
   2175  431d				   plotpoint
   2176  431d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   2177  431f		       f0 0d		      beq	pixelon	; if "on" go to on
   2178  4321		       4a		      lsr
   2179  4322		       b0 14		      bcs	pixeloff	; value is 1 if true
   2180  4324		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   2181  4327		       5d 44 f3 	      eor	setbyte,x
   2182  432a				  -	      ifconst	superchip
   2183  432a				  -	      sta	playfield-128,y
   2184  432a					      else
   2185  432a		       99 a4 00 	      sta	playfield,y
   2186  432d					      endif
   2187  432d		       60		      rts
   2188  432e				   pixelon
   2189  432e		       b9 a4 00 	      lda	playfield,y
   2190  4331		       1d 44 f3 	      ora	setbyte,x
   2191  4334				  -	      ifconst	superchip
   2192  4334				  -	      sta	playfield-128,y
   2193  4334					      else
   2194  4334		       99 a4 00 	      sta	playfield,y
   2195  4337					      endif
   2196  4337		       60		      rts
   2197  4338				   pixeloff
   2198  4338		       bd 44 f3 	      lda	setbyte,x
   2199  433b		       49 ff		      eor	#$ff
   2200  433d		       39 a4 00 	      and	playfield,y
   2201  4340				  -	      ifconst	superchip
   2202  4340				  -	      sta	playfield-128,y
   2203  4340					      else
   2204  4340		       99 a4 00 	      sta	playfield,y
   2205  4343					      endif
   2206  4343		       60		      rts
   2207  4344
   2208  4344				   setbyte
   2209  4344					      ifnconst	pfcenter
   2210  4344		       80		      .byte.b	$80
   2211  4345		       40		      .byte.b	$40
   2212  4346		       20		      .byte.b	$20
   2213  4347		       10		      .byte.b	$10
   2214  4348		       08		      .byte.b	$08
   2215  4349		       04		      .byte.b	$04
   2216  434a		       02		      .byte.b	$02
   2217  434b		       01		      .byte.b	$01
   2218  434c					      endif
   2219  434c		       01		      .byte.b	$01
   2220  434d		       02		      .byte.b	$02
   2221  434e		       04		      .byte.b	$04
   2222  434f		       08		      .byte.b	$08
   2223  4350		       10		      .byte.b	$10
   2224  4351		       20		      .byte.b	$20
   2225  4352		       40		      .byte.b	$40
   2226  4353		       80		      .byte.b	$80
   2227  4354		       80		      .byte.b	$80
   2228  4355		       40		      .byte.b	$40
   2229  4356		       20		      .byte.b	$20
   2230  4357		       10		      .byte.b	$10
   2231  4358		       08		      .byte.b	$08
   2232  4359		       04		      .byte.b	$04
   2233  435a		       02		      .byte.b	$02
   2234  435b		       01		      .byte.b	$01
   2235  435c		       01		      .byte.b	$01
   2236  435d		       02		      .byte.b	$02
   2237  435e		       04		      .byte.b	$04
   2238  435f		       08		      .byte.b	$08
   2239  4360		       10		      .byte.b	$10
   2240  4361		       20		      .byte.b	$20
   2241  4362		       40		      .byte.b	$40
   2242  4363		       80		      .byte.b	$80
   2243  4364							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2244  4364
   2245  4364				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   2246  4364		       d0 15		      bne	notleft
   2247  4366							;left
   2248  4366				  -	      ifconst	pfres
   2249  4366				  -	      ldx	#pfres*4
   2250  4366					      else
   2251  4366		       a2 30		      ldx	#48
   2252  4368					      endif
   2253  4368				   leftloop
   2254  4368		       b5 a3		      lda	playfield-1,x
   2255  436a		       4a		      lsr
   2256  436b
   2257  436b				  -	      ifconst	superchip
   2258  436b				  -	      lda	playfield-2,x
   2259  436b				  -	      rol
   2260  436b				  -	      sta	playfield-130,x
   2261  436b				  -	      lda	playfield-3,x
   2262  436b				  -	      ror
   2263  436b				  -	      sta	playfield-131,x
   2264  436b				  -	      lda	playfield-4,x
   2265  436b				  -	      rol
   2266  436b				  -	      sta	playfield-132,x
   2267  436b				  -	      lda	playfield-1,x
   2268  436b				  -	      ror
   2269  436b				  -	      sta	playfield-129,x
   2270  436b					      else
   2271  436b		       36 a2		      rol	playfield-2,x
   2272  436d		       76 a1		      ror	playfield-3,x
   2273  436f		       36 a0		      rol	playfield-4,x
   2274  4371		       76 a3		      ror	playfield-1,x
   2275  4373					      endif
   2276  4373
   2277  4373		       8a		      txa
   2278  4374		       cb 04		      sbx	#4
   2279  4376		       d0 f0		      bne	leftloop
      0  4378					      RETURN
      1  4378				  -	      ifnconst	bankswitch
      2  4378				  -	      rts
      3  4378					      else
      4  4378		       4c dd ff 	      jmp	BS_return
      5  437b					      endif
   2281  437b
   2282  437b				   notleft
   2283  437b		       4a		      lsr
   2284  437c		       90 15		      bcc	notright
   2285  437e							;right
   2286  437e
   2287  437e				  -	      ifconst	pfres
   2288  437e				  -	      ldx	#pfres*4
   2289  437e					      else
   2290  437e		       a2 30		      ldx	#48
   2291  4380					      endif
   2292  4380				   rightloop
   2293  4380		       b5 a0		      lda	playfield-4,x
   2294  4382		       4a		      lsr
   2295  4383				  -	      ifconst	superchip
   2296  4383				  -	      lda	playfield-3,x
   2297  4383				  -	      rol
   2298  4383				  -	      sta	playfield-131,x
   2299  4383				  -	      lda	playfield-2,x
   2300  4383				  -	      ror
   2301  4383				  -	      sta	playfield-130,x
   2302  4383				  -	      lda	playfield-1,x
   2303  4383				  -	      rol
   2304  4383				  -	      sta	playfield-129,x
   2305  4383				  -	      lda	playfield-4,x
   2306  4383				  -	      ror
   2307  4383				  -	      sta	playfield-132,x
   2308  4383					      else
   2309  4383		       36 a1		      rol	playfield-3,x
   2310  4385		       76 a2		      ror	playfield-2,x
   2311  4387		       36 a3		      rol	playfield-1,x
   2312  4389		       76 a0		      ror	playfield-4,x
   2313  438b					      endif
   2314  438b		       8a		      txa
   2315  438c		       cb 04		      sbx	#4
   2316  438e		       d0 f0		      bne	rightloop
      0  4390					      RETURN
      1  4390				  -	      ifnconst	bankswitch
      2  4390				  -	      rts
      3  4390					      else
      4  4390		       4c dd ff 	      jmp	BS_return
      5  4393					      endif
   2318  4393
   2319  4393				   notright
   2320  4393		       4a		      lsr
   2321  4394		       90 4b		      bcc	notup
   2322  4396							;up
   2323  4396		       4a		      lsr
   2324  4397		       90 02		      bcc	onedecup
   2325  4399		       c6 ef		      dec	playfieldpos
   2326  439b				   onedecup
   2327  439b		       c6 ef		      dec	playfieldpos
   2328  439d		       f0 02		      beq	shiftdown
   2329  439f		       10 3d		      bpl	noshiftdown2
   2330  43a1				   shiftdown
   2331  43a1				  -	      ifconst	pfrowheight
   2332  43a1				  -	      lda	#pfrowheight
   2333  43a1					      else
   2334  43a1					      ifnconst	pfres
   2335  43a1		       a9 08		      lda	#8
   2336  43a3				  -	      else
   2337  43a3				  -	      lda	#(96/pfres)	; try to come close to the real size
   2338  43a3					      endif
   2339  43a3					      endif
   2340  43a3
   2341  43a3		       85 ef		      sta	playfieldpos
   2342  43a5		       a5 a7		      lda	playfield+3
   2343  43a7		       85 9f		      sta	temp4
   2344  43a9		       a5 a6		      lda	playfield+2
   2345  43ab		       85 9e		      sta	temp3
   2346  43ad		       a5 a5		      lda	playfield+1
   2347  43af		       85 9d		      sta	temp2
   2348  43b1		       a5 a4		      lda	playfield
   2349  43b3		       85 9c		      sta	temp1
   2350  43b5		       a2 00		      ldx	#0
   2351  43b7				   up2
   2352  43b7		       b5 a8		      lda	playfield+4,x
   2353  43b9				  -	      ifconst	superchip
   2354  43b9				  -	      sta	playfield-128,x
   2355  43b9				  -	      lda	playfield+5,x
   2356  43b9				  -	      sta	playfield-127,x
   2357  43b9				  -	      lda	playfield+6,x
   2358  43b9				  -	      sta	playfield-126,x
   2359  43b9				  -	      lda	playfield+7,x
   2360  43b9				  -	      sta	playfield-125,x
   2361  43b9					      else
   2362  43b9		       95 a4		      sta	playfield,x
   2363  43bb		       b5 a9		      lda	playfield+5,x
   2364  43bd		       95 a5		      sta	playfield+1,x
   2365  43bf		       b5 aa		      lda	playfield+6,x
   2366  43c1		       95 a6		      sta	playfield+2,x
   2367  43c3		       b5 ab		      lda	playfield+7,x
   2368  43c5		       95 a7		      sta	playfield+3,x
   2369  43c7					      endif
   2370  43c7		       8a		      txa
   2371  43c8		       cb fc		      sbx	#252
   2372  43ca				  -	      ifconst	pfres
   2373  43ca				  -	      cpx	#(pfres-1)*4
   2374  43ca					      else
   2375  43ca		       e0 2c		      cpx	#44
   2376  43cc					      endif
   2377  43cc		       d0 e9		      bne	up2
   2378  43ce
   2379  43ce		       a5 9f		      lda	temp4
   2380  43d0
   2381  43d0				  -	      ifconst	superchip
   2382  43d0				  -	      ifconst	pfres
   2383  43d0				  -	      sta	playfield+pfres*4-129
   2384  43d0				  -	      lda	temp3
   2385  43d0				  -	      sta	playfield+pfres*4-130
   2386  43d0				  -	      lda	temp2
   2387  43d0				  -	      sta	playfield+pfres*4-131
   2388  43d0				  -	      lda	temp1
   2389  43d0				  -	      sta	playfield+pfres*4-132
   2390  43d0				  -	      else
   2391  43d0				  -	      sta	playfield+47-128
   2392  43d0				  -	      lda	temp3
   2393  43d0				  -	      sta	playfield+46-128
   2394  43d0				  -	      lda	temp2
   2395  43d0				  -	      sta	playfield+45-128
   2396  43d0				  -	      lda	temp1
   2397  43d0				  -	      sta	playfield+44-128
   2398  43d0				  -	      endif
   2399  43d0					      else
   2400  43d0				  -	      ifconst	pfres
   2401  43d0				  -	      sta	playfield+pfres*4-1
   2402  43d0				  -	      lda	temp3
   2403  43d0				  -	      sta	playfield+pfres*4-2
   2404  43d0				  -	      lda	temp2
   2405  43d0				  -	      sta	playfield+pfres*4-3
   2406  43d0				  -	      lda	temp1
   2407  43d0				  -	      sta	playfield+pfres*4-4
   2408  43d0					      else
   2409  43d0		       85 d3		      sta	playfield+47
   2410  43d2		       a5 9e		      lda	temp3
   2411  43d4		       85 d2		      sta	playfield+46
   2412  43d6		       a5 9d		      lda	temp2
   2413  43d8		       85 d1		      sta	playfield+45
   2414  43da		       a5 9c		      lda	temp1
   2415  43dc		       85 d0		      sta	playfield+44
   2416  43de					      endif
   2417  43de					      endif
   2418  43de				   noshiftdown2
      0  43de					      RETURN
      1  43de				  -	      ifnconst	bankswitch
      2  43de				  -	      rts
      3  43de					      else
      4  43de		       4c dd ff 	      jmp	BS_return
      5  43e1					      endif
   2420  43e1
   2421  43e1
   2422  43e1				   notup
   2423  43e1							;down
   2424  43e1		       4a		      lsr
   2425  43e2		       b0 02		      bcs	oneincup
   2426  43e4		       e6 ef		      inc	playfieldpos
   2427  43e6				   oneincup
   2428  43e6		       e6 ef		      inc	playfieldpos
   2429  43e8		       a5 ef		      lda	playfieldpos
   2430  43ea
   2431  43ea				  -	      ifconst	pfrowheight
   2432  43ea				  -	      cmp	#pfrowheight+1
   2433  43ea					      else
   2434  43ea					      ifnconst	pfres
   2435  43ea		       c9 09		      cmp	#9
   2436  43ec				  -	      else
   2437  43ec				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   2438  43ec					      endif
   2439  43ec					      endif
   2440  43ec
   2441  43ec		       90 3b		      bcc	noshiftdown
   2442  43ee		       a9 01		      lda	#1
   2443  43f0		       85 ef		      sta	playfieldpos
   2444  43f2
   2445  43f2				  -	      ifconst	pfres
   2446  43f2				  -	      lda	playfield+pfres*4-1
   2447  43f2				  -	      sta	temp4
   2448  43f2				  -	      lda	playfield+pfres*4-2
   2449  43f2				  -	      sta	temp3
   2450  43f2				  -	      lda	playfield+pfres*4-3
   2451  43f2				  -	      sta	temp2
   2452  43f2				  -	      lda	playfield+pfres*4-4
   2453  43f2					      else
   2454  43f2		       a5 d3		      lda	playfield+47
   2455  43f4		       85 9f		      sta	temp4
   2456  43f6		       a5 d2		      lda	playfield+46
   2457  43f8		       85 9e		      sta	temp3
   2458  43fa		       a5 d1		      lda	playfield+45
   2459  43fc		       85 9d		      sta	temp2
   2460  43fe		       a5 d0		      lda	playfield+44
   2461  4400					      endif
   2462  4400
   2463  4400		       85 9c		      sta	temp1
   2464  4402
   2465  4402				  -	      ifconst	pfres
   2466  4402				  -	      ldx	#(pfres-1)*4
   2467  4402					      else
   2468  4402		       a2 2c		      ldx	#44
   2469  4404					      endif
   2470  4404				   down2
   2471  4404		       b5 a3		      lda	playfield-1,x
   2472  4406				  -	      ifconst	superchip
   2473  4406				  -	      sta	playfield-125,x
   2474  4406				  -	      lda	playfield-2,x
   2475  4406				  -	      sta	playfield-126,x
   2476  4406				  -	      lda	playfield-3,x
   2477  4406				  -	      sta	playfield-127,x
   2478  4406				  -	      lda	playfield-4,x
   2479  4406				  -	      sta	playfield-128,x
   2480  4406					      else
   2481  4406		       95 a7		      sta	playfield+3,x
   2482  4408		       b5 a2		      lda	playfield-2,x
   2483  440a		       95 a6		      sta	playfield+2,x
   2484  440c		       b5 a1		      lda	playfield-3,x
   2485  440e		       95 a5		      sta	playfield+1,x
   2486  4410		       b5 a0		      lda	playfield-4,x
   2487  4412		       95 a4		      sta	playfield,x
   2488  4414					      endif
   2489  4414		       8a		      txa
   2490  4415		       cb 04		      sbx	#4
   2491  4417		       d0 eb		      bne	down2
   2492  4419
   2493  4419		       a5 9f		      lda	temp4
   2494  441b				  -	      ifconst	superchip
   2495  441b				  -	      sta	playfield-125
   2496  441b				  -	      lda	temp3
   2497  441b				  -	      sta	playfield-126
   2498  441b				  -	      lda	temp2
   2499  441b				  -	      sta	playfield-127
   2500  441b				  -	      lda	temp1
   2501  441b				  -	      sta	playfield-128
   2502  441b					      else
   2503  441b		       85 a7		      sta	playfield+3
   2504  441d		       a5 9e		      lda	temp3
   2505  441f		       85 a6		      sta	playfield+2
   2506  4421		       a5 9d		      lda	temp2
   2507  4423		       85 a5		      sta	playfield+1
   2508  4425		       a5 9c		      lda	temp1
   2509  4427		       85 a4		      sta	playfield
   2510  4429					      endif
   2511  4429				   noshiftdown
      0  4429					      RETURN
      1  4429				  -	      ifnconst	bankswitch
      2  4429				  -	      rts
      3  4429					      else
      4  4429		       4c dd ff 	      jmp	BS_return
      5  442c					      endif
   2513  442c							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2514  442c
   2515  442c							;standard routines needed for pretty much all games
   2516  442c							; just the random number generator is left - maybe we should remove this asm file altogether?
   2517  442c							; repositioning code and score pointer setup moved to overscan
   2518  442c							; read switches, joysticks now compiler generated (more efficient)
   2519  442c
   2520  442c				   randomize
   2521  442c		       a5 a2		      lda	rand
   2522  442e		       4a		      lsr
   2523  442f					      ifconst	rand16
   2524  442f		       26 e1		      rol	rand16
   2525  4431					      endif
   2526  4431		       90 02		      bcc	noeor
   2527  4433		       49 b4		      eor	#$B4
   2528  4435				   noeor
   2529  4435		       85 a2		      sta	rand
   2530  4437					      ifconst	rand16
   2531  4437		       45 e1		      eor	rand16
   2532  4439					      endif
      0  4439					      RETURN
      1  4439				  -	      ifnconst	bankswitch
      2  4439				  -	      rts
      3  4439					      else
      4  4439		       4c dd ff 	      jmp	BS_return
      5  443c					      endif
   2534  443c							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2535  443c
   2536  443c				   drawscreen
   2537  443c				  -	      ifconst	debugscore
   2538  443c				  -	      ldx	#14
   2539  443c				  -	      lda	INTIM	; display # cycles left in the score
   2540  443c				  -
   2541  443c				  -	      ifconst	mincycles
   2542  443c				  -	      lda	mincycles
   2543  443c				  -	      cmp	INTIM
   2544  443c				  -	      lda	mincycles
   2545  443c				  -	      bcc	nochange
   2546  443c				  -	      lda	INTIM
   2547  443c				  -	      sta	mincycles
   2548  443c				  -nochange
   2549  443c				  -	      endif
   2550  443c				  -
   2551  443c				  -			; cmp #$2B
   2552  443c				  -			; bcs no_cycles_left
   2553  443c				  -	      bmi	cycles_left
   2554  443c				  -	      ldx	#64
   2555  443c				  -	      eor	#$ff	;make negative
   2556  443c				  -cycles_left
   2557  443c				  -	      stx	scorecolor
   2558  443c				  -	      and	#$7f	; clear sign bit
   2559  443c				  -	      tax
   2560  443c				  -	      lda	scorebcd,x
   2561  443c				  -	      sta	score+2
   2562  443c				  -	      lda	scorebcd1,x
   2563  443c				  -	      sta	score+1
   2564  443c				  -	      jmp	done_debugscore
   2565  443c				  -scorebcd
   2566  443c				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   2567  443c				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   2568  443c				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   2569  443c				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   2570  443c				  -scorebcd1
   2571  443c				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   2572  443c				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   2573  443c				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   2574  443c				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   2575  443c				  -done_debugscore
   2576  443c					      endif
   2577  443c
   2578  443c				  -	      ifconst	debugcycles
   2579  443c				  -	      lda	INTIM	; if we go over, it mucks up the background color
   2580  443c				  -			; cmp #$2B
   2581  443c				  -			; BCC overscan
   2582  443c				  -	      bmi	overscan
   2583  443c				  -	      sta	COLUBK
   2584  443c				  -	      bcs	doneoverscan
   2585  443c					      endif
   2586  443c
   2587  443c				   overscan
   2588  443c				  -	      ifconst	interlaced
   2589  443c				  -	      PHP
   2590  443c				  -	      PLA
   2591  443c				  -	      EOR	#4	; flip interrupt bit
   2592  443c				  -	      PHA
   2593  443c				  -	      PLP
   2594  443c				  -	      AND	#4	; isolate the interrupt bit
   2595  443c				  -	      TAX		; save it for later
   2596  443c					      endif
   2597  443c
   2598  443c				   overscanloop
   2599  443c		       ad 84 02 	      lda	INTIM	;wait for sync
   2600  443f		       30 fb		      bmi	overscanloop
   2601  4441				   doneoverscan
   2602  4441
   2603  4441							;do VSYNC
   2604  4441
   2605  4441				  -	      ifconst	interlaced
   2606  4441				  -	      CPX	#4
   2607  4441				  -	      BNE	oddframevsync
   2608  4441					      endif
   2609  4441
   2610  4441		       a9 02		      lda	#2
   2611  4443		       85 02		      sta	WSYNC
   2612  4445		       85 00		      sta	VSYNC
   2613  4447		       85 02		      STA	WSYNC
   2614  4449		       85 02		      STA	WSYNC
   2615  444b		       4a		      lsr
   2616  444c		       85 02		      STA	WSYNC
   2617  444e		       85 00		      STA	VSYNC
   2618  4450		       85 01		      sta	VBLANK
   2619  4452				  -	      ifnconst	overscan_time
   2620  4452				  -	      lda	#37+128
   2621  4452					      else
   2622  4452		       a9 a5		      lda	#overscan_time+128
   2623  4454					      endif
   2624  4454		       8d 96 02 	      sta	TIM64T
   2625  4457
   2626  4457				  -	      ifconst	interlaced
   2627  4457				  -	      jmp	postsync
   2628  4457				  -
   2629  4457				  -oddframevsync
   2630  4457				  -	      sta	WSYNC
   2631  4457				  -
   2632  4457				  -	      LDA	($80,X)	; 11 waste
   2633  4457				  -	      LDA	($80,X)	; 11 waste
   2634  4457				  -	      LDA	($80,X)	; 11 waste
   2635  4457				  -
   2636  4457				  -	      lda	#2
   2637  4457				  -	      sta	VSYNC
   2638  4457				  -	      sta	WSYNC
   2639  4457				  -	      sta	WSYNC
   2640  4457				  -	      sta	WSYNC
   2641  4457				  -
   2642  4457				  -	      LDA	($80,X)	; 11 waste
   2643  4457				  -	      LDA	($80,X)	; 11 waste
   2644  4457				  -	      LDA	($80,X)	; 11 waste
   2645  4457				  -
   2646  4457				  -	      lda	#0
   2647  4457				  -	      sta	VSYNC
   2648  4457				  -	      sta	VBLANK
   2649  4457				  -	      ifnconst	overscan_time
   2650  4457				  -	      lda	#37+128
   2651  4457				  -	      else
   2652  4457				  -	      lda	#overscan_time+128
   2653  4457				  -	      endif
   2654  4457				  -	      sta	TIM64T
   2655  4457				  -
   2656  4457				  -postsync
   2657  4457					      endif
   2658  4457
   2659  4457				  -	      ifconst	legacy
   2660  4457				  -	      if	legacy < 100
   2661  4457				  -	      ldx	#4
   2662  4457				  -adjustloop
   2663  4457				  -	      lda	player0x,x
   2664  4457				  -	      sec
   2665  4457				  -	      sbc	#14	;?
   2666  4457				  -	      sta	player0x,x
   2667  4457				  -	      dex
   2668  4457				  -	      bpl	adjustloop
   2669  4457				  -	      endif
   2670  4457					      endif
   2671  4457				  -	      if	((<*)>$e9)&&((<*)<$fa)
   2672  4457				  -	      repeat	($fa-(<*))
   2673  4457				  -	      nop
   2674  4457				  -	      repend
   2675  4457					      endif
   2676  4457		       85 02		      sta	WSYNC
   2677  4459		       a2 04		      ldx	#4
      0  445b					      SLEEP	3
      1  445b				   .CYCLES    SET	3
      2  445b
      3  445b				  -	      IF	.CYCLES < 2
      4  445b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  445b				  -	      ERR
      6  445b					      ENDIF
      7  445b
      8  445b					      IF	.CYCLES & 1
      9  445b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  445b		       04 00		      nop	0
     11  445d				  -	      ELSE
     12  445d				  -	      bit	VSYNC
     13  445d					      ENDIF
     14  445d				   .CYCLES    SET	.CYCLES - 3
     15  445d					      ENDIF
     16  445d
     17  445d				  -	      REPEAT	.CYCLES / 2
     18  445d				  -	      nop
     19  445d					      REPEND
   2679  445d				   HorPosLoop		; 5
   2680  445d		       b5 80		      lda	player0x,X	;+4 9
   2681  445f		       38		      sec		;+2 11
   2682  4460				   DivideLoop
   2683  4460		       e9 0f		      sbc	#15
   2684  4462		       b0 fc		      bcs	DivideLoop	;+4 15
   2685  4464		       95 9c		      sta	temp1,X	;+4 19
   2686  4466		       95 10		      sta	RESP0,X	;+4 23
   2687  4468		       85 02		      sta	WSYNC
   2688  446a		       ca		      dex
   2689  446b		       10 f0		      bpl	HorPosLoop	;+5 5
   2690  446d							; 4
   2691  446d
   2692  446d		       a2 04		      ldx	#4
   2693  446f		       b4 9c		      ldy	temp1,X
   2694  4471		       b9 cd f3 	      lda	repostable-256,Y
   2695  4474		       95 20		      sta	HMP0,X	;+14 18
   2696  4476
   2697  4476		       ca		      dex
   2698  4477		       b4 9c		      ldy	temp1,X
   2699  4479		       b9 cd f3 	      lda	repostable-256,Y
   2700  447c		       95 20		      sta	HMP0,X	;+14 32
   2701  447e
   2702  447e		       ca		      dex
   2703  447f		       b4 9c		      ldy	temp1,X
   2704  4481		       b9 cd f3 	      lda	repostable-256,Y
   2705  4484		       95 20		      sta	HMP0,X	;+14 46
   2706  4486
   2707  4486		       ca		      dex
   2708  4487		       b4 9c		      ldy	temp1,X
   2709  4489		       b9 cd f3 	      lda	repostable-256,Y
   2710  448c		       95 20		      sta	HMP0,X	;+14 60
   2711  448e
   2712  448e		       ca		      dex
   2713  448f		       b4 9c		      ldy	temp1,X
   2714  4491		       b9 cd f3 	      lda	repostable-256,Y
   2715  4494		       95 20		      sta	HMP0,X	;+14 74
   2716  4496
   2717  4496		       85 02		      sta	WSYNC
   2718  4498
   2719  4498		       85 2a		      sta	HMOVE	;+3 3
   2720  449a
   2721  449a
   2722  449a				  -	      ifconst	legacy
   2723  449a				  -	      if	legacy < 100
   2724  449a				  -	      ldx	#4
   2725  449a				  -adjustloop2
   2726  449a				  -	      lda	player0x,x
   2727  449a				  -	      clc
   2728  449a				  -	      adc	#14	;?
   2729  449a				  -	      sta	player0x,x
   2730  449a				  -	      dex
   2731  449a				  -	      bpl	adjustloop2
   2732  449a				  -	      endif
   2733  449a					      endif
   2734  449a
   2735  449a
   2736  449a
   2737  449a
   2738  449a							;set score pointers
   2739  449a		       a7 95		      lax	score+2
   2740  449c		       20 cd f4 	      jsr	scorepointerset
   2741  449f		       84 9b		      sty	scorepointers+5
   2742  44a1		       86 98		      stx	scorepointers+2
   2743  44a3		       a7 94		      lax	score+1
   2744  44a5		       20 cd f4 	      jsr	scorepointerset
   2745  44a8		       84 9a		      sty	scorepointers+4
   2746  44aa		       86 97		      stx	scorepointers+1
   2747  44ac		       a7 93		      lax	score
   2748  44ae		       20 cd f4 	      jsr	scorepointerset
   2749  44b1		       84 99		      sty	scorepointers+3
   2750  44b3		       86 96		      stx	scorepointers
   2751  44b5
   2752  44b5				   vblk
   2753  44b5							; run possible vblank bB code
   2754  44b5				  -	      ifconst	vblank_bB_code
   2755  44b5				  -	      jsr	vblank_bB_code
   2756  44b5					      endif
   2757  44b5				   vblk2
   2758  44b5		       ad 84 02 	      LDA	INTIM
   2759  44b8		       30 fb		      bmi	vblk2
   2760  44ba		       4c 00 f0 	      jmp	kernel
   2761  44bd
   2762  44bd
   2763  44bd		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   2764  44c6		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   2765  44cd				   repostable
   2766  44cd
   2767  44cd				   scorepointerset
   2768  44cd		       29 0f		      and	#$0F
   2769  44cf		       0a		      asl
   2770  44d0		       0a		      asl
   2771  44d1		       0a		      asl
   2772  44d2		       69 74		      adc	#<scoretable
   2773  44d4		       a8		      tay
   2774  44d5		       8a		      txa
   2775  44d6							; and #$F0
   2776  44d6							; lsr
   2777  44d6		       4b f0		      asr	#$F0
   2778  44d8		       69 74		      adc	#<scoretable
   2779  44da		       aa		      tax
   2780  44db		       60		      rts
   2781  44dc							;bB.asm
   2782  44dc							; bB.asm file is split here
   2783  44dc				  -	      ifconst	pfres
   2784  44dc				  -	      if	(<*) > (254-pfres*pfwidth)
   2785  44dc				  -	      align	256
   2786  44dc				  -	      endif
   2787  44dc				  -	      if	(<*) < (136-pfres*pfwidth)
   2788  44dc				  -	      repeat	((136-pfres*pfwidth)-(<*))
   2789  44dc				  -	      .byte	0
   2790  44dc				  -	      repend
   2791  44dc				  -	      endif
   2792  44dc					      else
   2793  44dc					      if	(<*) > 206
   2794  4500		       00 00 00 00*	      align	256
   2795  4500					      endif
   2796  4500					      if	(<*) < 88
   2797  4500					      repeat	(88-(<*))
   2798  4500		       00		      .byte.b	0
   2797  4500					      repend
   2798  4501		       00		      .byte.b	0
   2797  4501					      repend
   2798  4502		       00		      .byte.b	0
   2797  4502					      repend
   2798  4503		       00		      .byte.b	0
   2797  4503					      repend
   2798  4504		       00		      .byte.b	0
   2797  4504					      repend
   2798  4505		       00		      .byte.b	0
   2797  4505					      repend
   2798  4506		       00		      .byte.b	0
   2797  4506					      repend
   2798  4507		       00		      .byte.b	0
   2797  4507					      repend
   2798  4508		       00		      .byte.b	0
   2797  4508					      repend
   2798  4509		       00		      .byte.b	0
   2797  4509					      repend
   2798  450a		       00		      .byte.b	0
   2797  450a					      repend
   2798  450b		       00		      .byte.b	0
   2797  450b					      repend
   2798  450c		       00		      .byte.b	0
   2797  450c					      repend
   2798  450d		       00		      .byte.b	0
   2797  450d					      repend
   2798  450e		       00		      .byte.b	0
   2797  450e					      repend
   2798  450f		       00		      .byte.b	0
   2797  450f					      repend
   2798  4510		       00		      .byte.b	0
   2797  4510					      repend
   2798  4511		       00		      .byte.b	0
   2797  4511					      repend
   2798  4512		       00		      .byte.b	0
   2797  4512					      repend
   2798  4513		       00		      .byte.b	0
   2797  4513					      repend
   2798  4514		       00		      .byte.b	0
   2797  4514					      repend
   2798  4515		       00		      .byte.b	0
   2797  4515					      repend
   2798  4516		       00		      .byte.b	0
   2797  4516					      repend
   2798  4517		       00		      .byte.b	0
   2797  4517					      repend
   2798  4518		       00		      .byte.b	0
   2797  4518					      repend
   2798  4519		       00		      .byte.b	0
   2797  4519					      repend
   2798  451a		       00		      .byte.b	0
   2797  451a					      repend
   2798  451b		       00		      .byte.b	0
   2797  451b					      repend
   2798  451c		       00		      .byte.b	0
   2797  451c					      repend
   2798  451d		       00		      .byte.b	0
   2797  451d					      repend
   2798  451e		       00		      .byte.b	0
   2797  451e					      repend
   2798  451f		       00		      .byte.b	0
   2797  451f					      repend
   2798  4520		       00		      .byte.b	0
   2797  4520					      repend
   2798  4521		       00		      .byte.b	0
   2797  4521					      repend
   2798  4522		       00		      .byte.b	0
   2797  4522					      repend
   2798  4523		       00		      .byte.b	0
   2797  4523					      repend
   2798  4524		       00		      .byte.b	0
   2797  4524					      repend
   2798  4525		       00		      .byte.b	0
   2797  4525					      repend
   2798  4526		       00		      .byte.b	0
   2797  4526					      repend
   2798  4527		       00		      .byte.b	0
   2797  4527					      repend
   2798  4528		       00		      .byte.b	0
   2797  4528					      repend
   2798  4529		       00		      .byte.b	0
   2797  4529					      repend
   2798  452a		       00		      .byte.b	0
   2797  452a					      repend
   2798  452b		       00		      .byte.b	0
   2797  452b					      repend
   2798  452c		       00		      .byte.b	0
   2797  452c					      repend
   2798  452d		       00		      .byte.b	0
   2797  452d					      repend
   2798  452e		       00		      .byte.b	0
   2797  452e					      repend
   2798  452f		       00		      .byte.b	0
   2797  452f					      repend
   2798  4530		       00		      .byte.b	0
   2797  4530					      repend
   2798  4531		       00		      .byte.b	0
   2797  4531					      repend
   2798  4532		       00		      .byte.b	0
   2797  4532					      repend
   2798  4533		       00		      .byte.b	0
   2797  4533					      repend
   2798  4534		       00		      .byte.b	0
   2797  4534					      repend
   2798  4535		       00		      .byte.b	0
   2797  4535					      repend
   2798  4536		       00		      .byte.b	0
   2797  4536					      repend
   2798  4537		       00		      .byte.b	0
   2797  4537					      repend
   2798  4538		       00		      .byte.b	0
   2797  4538					      repend
   2798  4539		       00		      .byte.b	0
   2797  4539					      repend
   2798  453a		       00		      .byte.b	0
   2797  453a					      repend
   2798  453b		       00		      .byte.b	0
   2797  453b					      repend
   2798  453c		       00		      .byte.b	0
   2797  453c					      repend
   2798  453d		       00		      .byte.b	0
   2797  453d					      repend
   2798  453e		       00		      .byte.b	0
   2797  453e					      repend
   2798  453f		       00		      .byte.b	0
   2797  453f					      repend
   2798  4540		       00		      .byte.b	0
   2797  4540					      repend
   2798  4541		       00		      .byte.b	0
   2797  4541					      repend
   2798  4542		       00		      .byte.b	0
   2797  4542					      repend
   2798  4543		       00		      .byte.b	0
   2797  4543					      repend
   2798  4544		       00		      .byte.b	0
   2797  4544					      repend
   2798  4545		       00		      .byte.b	0
   2797  4545					      repend
   2798  4546		       00		      .byte.b	0
   2797  4546					      repend
   2798  4547		       00		      .byte.b	0
   2797  4547					      repend
   2798  4548		       00		      .byte.b	0
   2797  4548					      repend
   2798  4549		       00		      .byte.b	0
   2797  4549					      repend
   2798  454a		       00		      .byte.b	0
   2797  454a					      repend
   2798  454b		       00		      .byte.b	0
   2797  454b					      repend
   2798  454c		       00		      .byte.b	0
   2797  454c					      repend
   2798  454d		       00		      .byte.b	0
   2797  454d					      repend
   2798  454e		       00		      .byte.b	0
   2797  454e					      repend
   2798  454f		       00		      .byte.b	0
   2797  454f					      repend
   2798  4550		       00		      .byte.b	0
   2797  4550					      repend
   2798  4551		       00		      .byte.b	0
   2797  4551					      repend
   2798  4552		       00		      .byte.b	0
   2797  4552					      repend
   2798  4553		       00		      .byte.b	0
   2797  4553					      repend
   2798  4554		       00		      .byte.b	0
   2797  4554					      repend
   2798  4555		       00		      .byte.b	0
   2797  4555					      repend
   2798  4556		       00		      .byte.b	0
   2797  4556					      repend
   2798  4557		       00		      .byte.b	0
   2799  4558					      repend
   2800  4558					      endif
   2801  4558					      endif
   2802  4558				   pfcolorlabel13
   2803  4558		       9e 00 00 00	      .byte.b	$9E ,0,0,0
   2804  455c		       9e 00 00 00	      .byte.b	$9E,0,0,0
   2805  4560		       9e 00 00 00	      .byte.b	$9E,0,0,0
   2806  4564		       9e 00 00 00	      .byte.b	$9E,0,0,0
   2807  4568		       9e 00 00 00	      .byte.b	$9E,0,0,0
   2808  456c		       9e 00 00 00	      .byte.b	$9E,0,0,0
   2809  4570		       9e 00 00 00	      .byte.b	$9E,0,0,0
   2810  4574		       9e 00 00 00	      .byte.b	$9E,0,0,0
   2811  4578		       9e 00 00 00	      .byte.b	$9E,0,0,0
   2812  457c		       9e 00 00 00	      .byte.b	$9E,0,0,0
   2813  4580				  -	      if	(<*) > (<(*+9))
   2814  4580				  -	      repeat	($100-<*)
   2815  4580				  -	      .byte	0
   2816  4580				  -	      repend
   2817  4580					      endif
   2818  4580				   playerL046_0
   2819  4580		       42		      .byte.b	%01000010
   2820  4581		       64		      .byte.b	%01100100
   2821  4582		       1c		      .byte.b	%00011100
   2822  4583		       3c		      .byte.b	%00111100
   2823  4584		       1c		      .byte.b	%00011100
   2824  4585		       18		      .byte.b	%00011000
   2825  4586		       0c		      .byte.b	%00001100
   2826  4587		       0c		      .byte.b	%00001100
   2827  4588		       0c		      .byte.b	%00001100
   2828  4589		       00		      .byte.b	%00000000
   2829  458a				  -	      if	(<*) > (<(*+7))
   2830  458a				  -	      repeat	($100-<*)
   2831  458a				  -	      .byte	0
   2832  458a				  -	      repend
   2833  458a					      endif
   2834  458a				   playerL047_1
   2835  458a		       fc		      .byte.b	%11111100
   2836  458b		       ff		      .byte.b	%11111111
   2837  458c		       fd		      .byte.b	%11111101
   2838  458d		       fd		      .byte.b	%11111101
   2839  458e		       ff		      .byte.b	%11111111
   2840  458f		       fc		      .byte.b	%11111100
   2841  4590		       fc		      .byte.b	%11111100
   2842  4591		       fc		      .byte.b	%11111100
   2843  4592				  -	      if	(<*) > (<(*+10))
   2844  4592				  -	      repeat	($100-<*)
   2845  4592				  -	      .byte	0
   2846  4592				  -	      repend
   2847  4592					      endif
   2848  4592				   playercolorL048_0
   2849  4592		       84		      .byte.b	$84	;
   2850  4593		       84		      .byte.b	$84	;
   2851  4594		       84		      .byte.b	$84	;
   2852  4595		       b4		      .byte.b	$B4	;
   2853  4596		       b4		      .byte.b	$B4	;
   2854  4597		       b4		      .byte.b	$B4	;
   2855  4598		       fe		      .byte.b	$FE	;
   2856  4599		       fe		      .byte.b	$FE	;
   2857  459a		       fe		      .byte.b	$FE	;
   2858  459b		       fe		      .byte.b	$FE	;
   2859  459c		       0e		      .byte.b	$0E	;
   2860  459d				  -	      if	(<*) > (<(*+7))
   2861  459d				  -	      repeat	($100-<*)
   2862  459d				  -	      .byte	0
   2863  459d				  -	      repend
   2864  459d					      endif
   2865  459d				   playercolorL049_1
   2866  459d		       1c		      .byte.b	$1C	;
   2867  459e		       1c		      .byte.b	$1C	;
   2868  459f		       1c		      .byte.b	$1C	;
   2869  45a0		       1c		      .byte.b	$1C	;
   2870  45a1		       1c		      .byte.b	$1C	;
   2871  45a2		       1c		      .byte.b	$1C	;
   2872  45a3		       0e		      .byte.b	$0E	;
   2873  45a4		       0e		      .byte.b	$0E	;
   2874  45a5				  -	      if	(<*) > (<(*+9))
   2875  45a5				  -	      repeat	($100-<*)
   2876  45a5				  -	      .byte	0
   2877  45a5				  -	      repend
   2878  45a5					      endif
   2879  45a5				   player2then_0
   2880  45a5		       06		      .byte.b	%00000110
   2881  45a6		       64		      .byte.b	%01100100
   2882  45a7		       1c		      .byte.b	%00011100
   2883  45a8		       5a		      .byte.b	%01011010
   2884  45a9		       3c		      .byte.b	%00111100
   2885  45aa		       18		      .byte.b	%00011000
   2886  45ab		       0c		      .byte.b	%00001100
   2887  45ac		       0c		      .byte.b	%00001100
   2888  45ad		       0c		      .byte.b	%00001100
   2889  45ae		       00		      .byte.b	%00000000
   2890  45af				  -	      if	(<*) > (<(*+9))
   2891  45af				  -	      repeat	($100-<*)
   2892  45af				  -	      .byte	0
   2893  45af				  -	      repend
   2894  45af					      endif
   2895  45af				   playercolor3then_0
   2896  45af		       84		      .byte.b	$84	;
   2897  45b0		       84		      .byte.b	$84	;
   2898  45b1		       84		      .byte.b	$84	;
   2899  45b2		       b4		      .byte.b	$B4	;
   2900  45b3		       b4		      .byte.b	$B4	;
   2901  45b4		       b4		      .byte.b	$B4	;
   2902  45b5		       fe		      .byte.b	$FE	;
   2903  45b6		       fe		      .byte.b	$FE	;
   2904  45b7		       fe		      .byte.b	$FE	;
   2905  45b8		       fe		      .byte.b	$FE	;
   2906  45b9				  -	      if	(<*) > (<(*+9))
   2907  45b9				  -	      repeat	($100-<*)
   2908  45b9				  -	      .byte	0
   2909  45b9				  -	      repend
   2910  45b9					      endif
   2911  45b9				   player4then_0
   2912  45b9		       18		      .byte.b	%00011000
   2913  45ba		       38		      .byte.b	%00111000
   2914  45bb		       18		      .byte.b	%00011000
   2915  45bc		       18		      .byte.b	%00011000
   2916  45bd		       18		      .byte.b	%00011000
   2917  45be		       18		      .byte.b	%00011000
   2918  45bf		       0c		      .byte.b	%00001100
   2919  45c0		       0c		      .byte.b	%00001100
   2920  45c1		       0c		      .byte.b	%00001100
   2921  45c2		       00		      .byte.b	%00000000
   2922  45c3				  -	      if	(<*) > (<(*+9))
   2923  45c3				  -	      repeat	($100-<*)
   2924  45c3				  -	      .byte	0
   2925  45c3				  -	      repend
   2926  45c3					      endif
   2927  45c3				   playercolor5then_0
   2928  45c3		       84		      .byte.b	$84	;
   2929  45c4		       84		      .byte.b	$84	;
   2930  45c5		       84		      .byte.b	$84	;
   2931  45c6		       b4		      .byte.b	$B4	;
   2932  45c7		       b4		      .byte.b	$B4	;
   2933  45c8		       b4		      .byte.b	$B4	;
   2934  45c9		       fe		      .byte.b	$FE	;
   2935  45ca		       fe		      .byte.b	$FE	;
   2936  45cb		       fe		      .byte.b	$FE	;
   2937  45cc		       fe		      .byte.b	$FE	;
   2938  45cd				  -	      if	(<*) > (<(*+9))
   2939  45cd				  -	      repeat	($100-<*)
   2940  45cd				  -	      .byte	0
   2941  45cd				  -	      repend
   2942  45cd					      endif
   2943  45cd				   player6then_0
   2944  45cd		       40		      .byte.b	%01000000
   2945  45ce		       50		      .byte.b	%01010000
   2946  45cf		       48		      .byte.b	%01001000
   2947  45d0		       38		      .byte.b	%00111000
   2948  45d1		       78		      .byte.b	%01111000
   2949  45d2		       38		      .byte.b	%00111000
   2950  45d3		       30		      .byte.b	%00110000
   2951  45d4		       18		      .byte.b	%00011000
   2952  45d5		       18		      .byte.b	%00011000
   2953  45d6		       18		      .byte.b	%00011000
   2954  45d7					      if	ECHOFIRST
      2461 bytes of ROM space left in bank 4
   2955  45d7					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   2956  45d7					      endif
   2957  45d7		       00 01	   ECHOFIRST  =	1
   2958  45d7
   2959  45d7
   2960  45d7							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2961  45d7
   2962  45d7							; feel free to modify the score graphics - just keep each digit 8 high
   2963  45d7							; and keep the conditional compilation stuff intact
   2964  45d7				  -	      ifconst	ROM2k
   2965  45d7				  -	      ORG	$F7AC-8
   2966  45d7					      else
   2967  45d7					      ifconst	bankswitch
   2968  45d7				  -	      if	bankswitch == 8
   2969  45d7				  -	      ORG	$2F94-bscode_length
   2970  45d7				  -	      RORG	$FF94-bscode_length
   2971  45d7					      endif
   2972  45d7					      if	bankswitch == 16
   2973  4f74					      ORG	$4F94-bscode_length
   2974  4f74					      RORG	$FF94-bscode_length
   2975  4f74					      endif
   2976  4f74				  -	      if	bankswitch == 32
   2977  4f74				  -	      ORG	$8F94-bscode_length
   2978  4f74				  -	      RORG	$FF94-bscode_length
   2979  4f74					      endif
   2980  4f74				  -	      if	bankswitch == 64
   2981  4f74				  -	      ORG	$10F80-bscode_length
   2982  4f74				  -	      RORG	$1FF80-bscode_length
   2983  4f74					      endif
   2984  4f74				  -	      else
   2985  4f74				  -	      ORG	$FF9C
   2986  4f74					      endif
   2987  4f74					      endif
   2988  4f74
   2989  4f74							; font equates
   2990  4f74		       00 01	   .21stcentury =	1
   2991  4f74		       00 02	   alarmclock =	2
   2992  4f74		       00 03	   handwritten =	3
   2993  4f74		       00 04	   interrupted =	4
   2994  4f74		       00 05	   retroputer =	5
   2995  4f74		       00 06	   whimsey    =	6
   2996  4f74		       00 07	   tiny       =	7
   2997  4f74		       00 08	   hex	      =	8
   2998  4f74
   2999  4f74				  -	      ifconst	font
   3000  4f74				  -	      if	font == hex
   3001  4f74				  -	      ORG	. - 48
   3002  4f74				  -	      endif
   3003  4f74					      endif
   3004  4f74
   3005  4f74				   scoretable
   3006  4f74
   3007  4f74				  -	      ifconst	font
   3008  4f74				  -	      if	font == .21stcentury
   3009  4f74				  -	      include	"score_graphics.asm.21stcentury"
   3010  4f74				  -	      endif
   3011  4f74				  -	      if	font == alarmclock
   3012  4f74				  -	      include	"score_graphics.asm.alarmclock"
   3013  4f74				  -	      endif
   3014  4f74				  -	      if	font == handwritten
   3015  4f74				  -	      include	"score_graphics.asm.handwritten"
   3016  4f74				  -	      endif
   3017  4f74				  -	      if	font == interrupted
   3018  4f74				  -	      include	"score_graphics.asm.interrupted"
   3019  4f74				  -	      endif
   3020  4f74				  -	      if	font == retroputer
   3021  4f74				  -	      include	"score_graphics.asm.retroputer"
   3022  4f74				  -	      endif
   3023  4f74				  -	      if	font == whimsey
   3024  4f74				  -	      include	"score_graphics.asm.whimsey"
   3025  4f74				  -	      endif
   3026  4f74				  -	      if	font == tiny
   3027  4f74				  -	      include	"score_graphics.asm.tiny"
   3028  4f74				  -	      endif
   3029  4f74				  -	      if	font == hex
   3030  4f74				  -	      include	"score_graphics.asm.hex"
   3031  4f74				  -	      endif
   3032  4f74					      else		; default font
   3033  4f74
   3034  4f74		       3c		      .byte.b	%00111100
   3035  4f75		       66		      .byte.b	%01100110
   3036  4f76		       66		      .byte.b	%01100110
   3037  4f77		       66		      .byte.b	%01100110
   3038  4f78		       66		      .byte.b	%01100110
   3039  4f79		       66		      .byte.b	%01100110
   3040  4f7a		       66		      .byte.b	%01100110
   3041  4f7b		       3c		      .byte.b	%00111100
   3042  4f7c
   3043  4f7c		       7e		      .byte.b	%01111110
   3044  4f7d		       18		      .byte.b	%00011000
   3045  4f7e		       18		      .byte.b	%00011000
   3046  4f7f		       18		      .byte.b	%00011000
   3047  4f80		       18		      .byte.b	%00011000
   3048  4f81		       38		      .byte.b	%00111000
   3049  4f82		       18		      .byte.b	%00011000
   3050  4f83		       08		      .byte.b	%00001000
   3051  4f84
   3052  4f84		       7e		      .byte.b	%01111110
   3053  4f85		       60		      .byte.b	%01100000
   3054  4f86		       60		      .byte.b	%01100000
   3055  4f87		       3c		      .byte.b	%00111100
   3056  4f88		       06		      .byte.b	%00000110
   3057  4f89		       06		      .byte.b	%00000110
   3058  4f8a		       46		      .byte.b	%01000110
   3059  4f8b		       3c		      .byte.b	%00111100
   3060  4f8c
   3061  4f8c		       3c		      .byte.b	%00111100
   3062  4f8d		       46		      .byte.b	%01000110
   3063  4f8e		       06		      .byte.b	%00000110
   3064  4f8f		       06		      .byte.b	%00000110
   3065  4f90		       1c		      .byte.b	%00011100
   3066  4f91		       06		      .byte.b	%00000110
   3067  4f92		       46		      .byte.b	%01000110
   3068  4f93		       3c		      .byte.b	%00111100
   3069  4f94
   3070  4f94		       0c		      .byte.b	%00001100
   3071  4f95		       0c		      .byte.b	%00001100
   3072  4f96		       7e		      .byte.b	%01111110
   3073  4f97		       4c		      .byte.b	%01001100
   3074  4f98		       4c		      .byte.b	%01001100
   3075  4f99		       2c		      .byte.b	%00101100
   3076  4f9a		       1c		      .byte.b	%00011100
   3077  4f9b		       0c		      .byte.b	%00001100
   3078  4f9c
   3079  4f9c		       3c		      .byte.b	%00111100
   3080  4f9d		       46		      .byte.b	%01000110
   3081  4f9e		       06		      .byte.b	%00000110
   3082  4f9f		       06		      .byte.b	%00000110
   3083  4fa0		       3c		      .byte.b	%00111100
   3084  4fa1		       60		      .byte.b	%01100000
   3085  4fa2		       60		      .byte.b	%01100000
   3086  4fa3		       7e		      .byte.b	%01111110
   3087  4fa4
   3088  4fa4		       3c		      .byte.b	%00111100
   3089  4fa5		       66		      .byte.b	%01100110
   3090  4fa6		       66		      .byte.b	%01100110
   3091  4fa7		       66		      .byte.b	%01100110
   3092  4fa8		       7c		      .byte.b	%01111100
   3093  4fa9		       60		      .byte.b	%01100000
   3094  4faa		       62		      .byte.b	%01100010
   3095  4fab		       3c		      .byte.b	%00111100
   3096  4fac
   3097  4fac		       30		      .byte.b	%00110000
   3098  4fad		       30		      .byte.b	%00110000
   3099  4fae		       30		      .byte.b	%00110000
   3100  4faf		       18		      .byte.b	%00011000
   3101  4fb0		       0c		      .byte.b	%00001100
   3102  4fb1		       06		      .byte.b	%00000110
   3103  4fb2		       42		      .byte.b	%01000010
   3104  4fb3		       3e		      .byte.b	%00111110
   3105  4fb4
   3106  4fb4		       3c		      .byte.b	%00111100
   3107  4fb5		       66		      .byte.b	%01100110
   3108  4fb6		       66		      .byte.b	%01100110
   3109  4fb7		       66		      .byte.b	%01100110
   3110  4fb8		       3c		      .byte.b	%00111100
   3111  4fb9		       66		      .byte.b	%01100110
   3112  4fba		       66		      .byte.b	%01100110
   3113  4fbb		       3c		      .byte.b	%00111100
   3114  4fbc
   3115  4fbc		       3c		      .byte.b	%00111100
   3116  4fbd		       46		      .byte.b	%01000110
   3117  4fbe		       06		      .byte.b	%00000110
   3118  4fbf		       3e		      .byte.b	%00111110
   3119  4fc0		       66		      .byte.b	%01100110
   3120  4fc1		       66		      .byte.b	%01100110
   3121  4fc2		       66		      .byte.b	%01100110
   3122  4fc3		       3c		      .byte.b	%00111100
   3123  4fc4
   3124  4fc4					      ifnconst	DPC_kernel_options
   3125  4fc4
   3126  4fc4		       00		      .byte.b	%00000000
   3127  4fc5		       00		      .byte.b	%00000000
   3128  4fc6		       00		      .byte.b	%00000000
   3129  4fc7		       00		      .byte.b	%00000000
   3130  4fc8		       00		      .byte.b	%00000000
   3131  4fc9		       00		      .byte.b	%00000000
   3132  4fca		       00		      .byte.b	%00000000
   3133  4fcb		       00		      .byte.b	%00000000
   3134  4fcc
   3135  4fcc					      endif
   3136  4fcc
   3137  4fcc					      endif
   3138  4fcc
   3139  4fcc				  -	      ifconst	ROM2k
   3140  4fcc				  -	      ORG	$F7FC
   3141  4fcc					      else
   3142  4fcc					      ifconst	bankswitch
   3143  4fcc				  -	      if	bankswitch == 8
   3144  4fcc				  -	      ORG	$2FF4-bscode_length
   3145  4fcc				  -	      RORG	$FFF4-bscode_length
   3146  4fcc					      endif
   3147  4fcc					      if	bankswitch == 16
   3148  4fd4					      ORG	$4FF4-bscode_length
   3149  4fd4					      RORG	$FFF4-bscode_length
   3150  4fd4					      endif
   3151  4fd4				  -	      if	bankswitch == 32
   3152  4fd4				  -	      ORG	$8FF4-bscode_length
   3153  4fd4				  -	      RORG	$FFF4-bscode_length
   3154  4fd4					      endif
   3155  4fd4				  -	      if	bankswitch == 64
   3156  4fd4				  -	      ORG	$10FE0-bscode_length
   3157  4fd4				  -	      RORG	$1FFE0-bscode_length
   3158  4fd4					      endif
   3159  4fd4				  -	      else
   3160  4fd4				  -	      ORG	$FFFC
   3161  4fd4					      endif
   3162  4fd4					      endif
   3163  4fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3164  4fd4
   3165  4fd4							; every bank has this stuff at the same place
   3166  4fd4							; this code can switch to/from any bank at any entry point
   3167  4fd4							; and can preserve register values
   3168  4fd4							; note: lines not starting with a space are not placed in all banks
   3169  4fd4							;
   3170  4fd4							; line below tells the compiler how long this is - do not remove
   3171  4fd4							;size=32
   3172  4fd4
   3173  4fd4				   begin_bscode
   3174  4fd4		       a2 ff		      ldx	#$ff
   3175  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3176  4fd6				  -	      stx	FASTFETCH
   3177  4fd6					      endif
   3178  4fd6		       9a		      txs
   3179  4fd7				  -	      if	bankswitch == 64
   3180  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3181  4fd7					      else
   3182  4fd7		       a9 f2		      lda	#>(start-1)
   3183  4fd9					      endif
   3184  4fd9		       48		      pha
   3185  4fda		       a9 51		      lda	#<(start-1)
   3186  4fdc		       48		      pha
   3187  4fdd
   3188  4fdd				   BS_return
   3189  4fdd		       48		      pha
   3190  4fde		       8a		      txa
   3191  4fdf		       48		      pha
   3192  4fe0		       ba		      tsx
   3193  4fe1
   3194  4fe1					      if	bankswitch != 64
   3195  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   3196  4fe3
   3197  4fe3		       2a		      rol
   3198  4fe4		       2a		      rol
   3199  4fe5		       2a		      rol
   3200  4fe6		       2a		      rol
   3201  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3202  4fe9		       aa		      tax
   3203  4fea		       e8		      inx
   3204  4feb				  -	      else
   3205  4feb				  -	      lda	4,x	; get high byte of return address
   3206  4feb				  -	      tay
   3207  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3208  4feb				  -	      sta	4,x
   3209  4feb				  -	      tya
   3210  4feb				  -	      lsr
   3211  4feb				  -	      lsr
   3212  4feb				  -	      lsr
   3213  4feb				  -	      lsr
   3214  4feb				  -	      tax
   3215  4feb				  -	      inx
   3216  4feb					      endif
   3217  4feb
   3218  4feb				   BS_jsr
   3219  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   3220  4fee		       68		      pla
   3221  4fef		       aa		      tax
   3222  4ff0		       68		      pla
   3223  4ff1		       60		      rts
   3224  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3225  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3226  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3227  4ff2					      endif
   3228  4ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3229  4ff2
   3230  4ff2					      ifconst	bankswitch
   3231  4ff2				  -	      if	bankswitch == 8
   3232  4ff2				  -	      ORG	$2FFC
   3233  4ff2				  -	      RORG	$FFFC
   3234  4ff2					      endif
   3235  4ff2					      if	bankswitch == 16
   3236  4ffc					      ORG	$4FFC
   3237  4ffc					      RORG	$FFFC
   3238  4ffc					      endif
   3239  4ffc				  -	      if	bankswitch == 32
   3240  4ffc				  -	      ORG	$8FFC
   3241  4ffc				  -	      RORG	$FFFC
   3242  4ffc					      endif
   3243  4ffc				  -	      if	bankswitch == 64
   3244  4ffc				  -	      ORG	$10FF0
   3245  4ffc				  -	      RORG	$1FFF0
   3246  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3247  4ffc				  -	      ORG	$10FF8
   3248  4ffc				  -	      RORG	$1FFF8
   3249  4ffc				  -	      ifconst	superchip
   3250  4ffc				  -	      .byte	"E","F","S","C"
   3251  4ffc				  -	      else
   3252  4ffc				  -	      .byte	"E","F","E","F"
   3253  4ffc				  -	      endif
   3254  4ffc				  -	      ORG	$10FFC
   3255  4ffc				  -	      RORG	$1FFFC
   3256  4ffc					      endif
   3257  4ffc				  -	      else
   3258  4ffc				  -	      ifconst	ROM2k
   3259  4ffc				  -	      ORG	$F7FC
   3260  4ffc				  -	      else
   3261  4ffc				  -	      ORG	$FFFC
   3262  4ffc				  -	      endif
   3263  4ffc					      endif
   3264  4ffc		       52 f2		      .word.w	(start & $ffff)
   3265  4ffe		       52 f2		      .word.w	(start & $ffff)
