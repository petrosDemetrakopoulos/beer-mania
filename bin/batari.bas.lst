------- FILE batari.bas.asm LEVEL 1 PASS 2
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE batari.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE batari.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 01	   pfscore    =	1
      5  5000 ????
      6  5000 ????	       00 e1	   rand16     =	n
      7  5000 ????
      8  5000 ????	       00 d6	   bmp_player0_index =	c
      9  5000 ????
     10  5000 ????	       00 d7	   missed     =	d
     11  5000 ????
     12  5000 ????	       00 4b	   logo_height =	75
     13  5000 ????
     14  5000 ????	       00 1c	   logo_color =	$1C
     15  5000 ????
     16  5000 ????	       00 d5	   addvalue   =	b
     17  5000 ????
     18  5000 ????	       00 d4	   frame      =	a
     19  5000 ????
     20  5000 ????	       00 ec	   _Bit2_Game_Control =	y
     21  5000 ????
     22  5000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
     23  5000 ????
     24  5000 ????	       00 2b	   vblank_time =	43
     25  5000 ????	       00 25	   overscan_time =	37
     26  5000 ????	       00 01	   PFcolors   =	1
     27  5000 ????	       00 01	   player1colors =	1
     28  5000 ????	       00 01	   playercolors =	1
     29  5000 ????	       00 01	   player1colors =	1
     30  5000 ????	       00 03	   bs_mask    =	3
     31  5000 ????	       00 10	   bankswitch =	16
     32  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????			  -	      ifconst	superchip
    199  5000 ????			  -playfieldbase =	$10D0
    200  5000 ????			  -	      include	superchip.h
    201  5000 ????				      else
    202  5000 ????	       00 a4	   playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????				      ifnconst	pfres
    231  5000 ????	       00 a4	   playfield  =	playfieldbase
    232  5000 ????			  -	      else
    233  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE batari.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 01	   pfscore    =	1
      5  5000 ????
      6  5000 ????	       00 e1	   rand16     =	n
      7  5000 ????
      8  5000 ????	       00 d6	   bmp_player0_index =	c
      9  5000 ????
     10  5000 ????	       00 d7	   missed     =	d
     11  5000 ????
     12  5000 ????	       00 4b	   logo_height =	75
     13  5000 ????
     14  5000 ????	       00 1c	   logo_color =	$1C
     15  5000 ????
     16  5000 ????	       00 d5	   addvalue   =	b
     17  5000 ????
     18  5000 ????	       00 d4	   frame      =	a
     19  5000 ????
     20  5000 ????	       00 ec	   _Bit2_Game_Control =	y
     21  5000 ????
     22  5000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
     23  5000 ????
     24  5000 ????	       00 2b	   vblank_time =	43
     25  5000 ????	       00 25	   overscan_time =	37
     26  5000 ????	       00 01	   PFcolors   =	1
     27  5000 ????	       00 01	   player1colors =	1
     28  5000 ????	       00 01	   playercolors =	1
     29  5000 ????	       00 01	   player1colors =	1
     30  5000 ????	       00 03	   bs_mask    =	3
     31  5000 ????	       00 10	   bankswitch =	16
     32  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE batari.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .L00 		;  set romsize 16k
     36  1000
     37  1000				   .L01 		;  set kernel_options player1colors playercolors pfcolors
     38  1000
     39  1000				   .L02 		;  set optimization inlinerand
     40  1000
     41  1000				   .
     42  1000							;
     43  1000
     44  1000				   .
     45  1000							;
     46  1000
     47  1000				   .L03 		;  set tv ntsc
     48  1000
     49  1000				   .
     50  1000							;
     51  1000
     52  1000				   .
     53  1000							;
     54  1000
     55  1000				   .L04 		;  pfclear
     56  1000
     57  1000		       a9 00		      LDA	#0
     58  1002		       85 ee		      sta	temp7
     59  1004		       a9 90		      lda	#>(ret_point1-1)
     60  1006		       48		      pha
     61  1007		       a9 19		      lda	#<(ret_point1-1)
     62  1009		       48		      pha
     63  100a		       a9 f2		      lda	#>(pfclear-1)
     64  100c		       48		      pha
     65  100d		       a9 8f		      lda	#<(pfclear-1)
     66  100f		       48		      pha
     67  1010		       a5 ee		      lda	temp7
     68  1012		       48		      pha
     69  1013		       8a		      txa
     70  1014		       48		      pha
     71  1015		       a2 04		      ldx	#4
     72  1017		       4c eb ff 	      jmp	BS_jsr
     73  101a				   ret_point1
     74  101a				   .
     75  101a							;
     76  101a
     77  101a				   .
     78  101a							;
     79  101a
     80  101a				   .L05 		;  AUDV0  =  0  :  AUDV1  =  0
     81  101a
     82  101a		       a9 00		      LDA	#0
     83  101c		       85 19		      STA	AUDV0
     84  101e		       85 1a		      STA	AUDV1
     85  1020				   .
     86  1020							;
     87  1020
     88  1020				   .
     89  1020							;
     90  1020
     91  1020				   .L06 		;  dim _Bit0_Reset_Restrainer	=  y
     92  1020
     93  1020				   .L07 		;  dim _Bit2_Game_Control  =  y
     94  1020
     95  1020				   .
     96  1020							;
     97  1020
     98  1020				   .
     99  1020							;
    100  1020
    101  1020				   .L08 		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
    102  1020
    103  1020		       a9 00		      LDA	#0
    104  1022		       85 d4		      STA	a
    105  1024		       85 d5		      STA	b
    106  1026		       85 d6		      STA	c
    107  1028		       85 d7		      STA	d
    108  102a		       85 d8		      STA	e
    109  102c		       85 d9		      STA	f
    110  102e		       85 da		      STA	g
    111  1030		       85 db		      STA	h
    112  1032		       85 dc		      STA	i
    113  1034				   .L09 		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
    114  1034
    115  1034		       a9 00		      LDA	#0
    116  1036		       85 dd		      STA	j
    117  1038		       85 de		      STA	k
    118  103a		       85 df		      STA	l
    119  103c		       85 e0		      STA	m
    120  103e		       85 e1		      STA	n
    121  1040		       85 e2		      STA	o
    122  1042		       85 e3		      STA	p
    123  1044		       85 e4		      STA	q
    124  1046		       85 e5		      STA	r
    125  1048				   .L010		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0
    126  1048
    127  1048		       a9 00		      LDA	#0
    128  104a		       85 e6		      STA	s
    129  104c		       85 e7		      STA	t
    130  104e		       85 e8		      STA	u
    131  1050		       85 e9		      STA	v
    132  1052		       85 ea		      STA	w
    133  1054		       85 eb		      STA	x
    134  1056		       85 ec		      STA	y
    135  1058		       85 ed		      STA	z
    136  105a				   .L011		;  var0  =  0	:  var1  =  0  :  var2	=  0  :  var3  =  0  :	var4  =  0
    137  105a
    138  105a		       a9 00		      LDA	#0
    139  105c		       85 a4		      STA	var0
    140  105e		       85 a5		      STA	var1
    141  1060		       85 a6		      STA	var2
    142  1062		       85 a7		      STA	var3
    143  1064		       85 a8		      STA	var4
    144  1066				   .L012		;  var5  =  0	:  var6  =  0  :  var7	=  0  :  var8  =  0
    145  1066
    146  1066		       a9 00		      LDA	#0
    147  1068		       85 a9		      STA	var5
    148  106a		       85 aa		      STA	var6
    149  106c		       85 ab		      STA	var7
    150  106e		       85 ac		      STA	var8
    151  1070				   .
    152  1070							;
    153  1070
    154  1070				   .L013		;  dim frame = a
    155  1070
    156  1070				   .L014		;  dim addvalue = b
    157  1070
    158  1070				   .L015		;  const logo_color = $1C
    159  1070
    160  1070				   .L016		;  const logo_height = 75
    161  1070
    162  1070				   .L017		;  dim missed = d
    163  1070
    164  1070				   .L018		;  rem ** we define this because player 0 has multiple frames...
    165  1070
    166  1070				   .L019		;  dim bmp_player0_index = c
    167  1070
    168  1070				   .L020		;  dim rand16 = n
    169  1070
    170  1070				   .
    171  1070							;
    172  1070
    173  1070				   .L021		;  const pfscore  =  1
    174  1070
    175  1070				   .L022		;  pfscore1  =  %10101010
    176  1070
    177  1070		       a9 aa		      LDA	#%10101010
    178  1072		       85 f2		      STA	pfscore1
    179  1074				   .
    180  1074							;
    181  1074
    182  1074				   .L023		;  scorecolor = $8a
    183  1074
    184  1074		       a9 8a		      LDA	#$8a
    185  1076		       85 a3		      STA	scorecolor
    186  1078				   .L024		;  pfscorecolor  =  $8a
    187  1078
    188  1078		       a9 8a		      LDA	#$8a
    189  107a		       85 f4		      STA	pfscorecolor
    190  107c				   .
    191  107c							;
    192  107c
    193  107c				   .resettitlepage
    194  107c							; resettitlepage
    195  107c
    196  107c				   .L025		;  frame = 0
    197  107c
    198  107c		       a9 00		      LDA	#0
    199  107e		       85 d4		      STA	frame
    200  1080				   .L026		;  player0x = 50
    201  1080
    202  1080		       a9 32		      LDA	#50
    203  1082		       85 80		      STA	player0x
    204  1084				   .L027		;  player0y = 11
    205  1084
    206  1084		       a9 0b		      LDA	#11
    207  1086		       85 85		      STA	player0y
    208  1088				   .L028		;  addvalue = 1
    209  1088
    210  1088		       a9 01		      LDA	#1
    211  108a		       85 d5		      STA	addvalue
    212  108c				   .
    213  108c							;
    214  108c
    215  108c				   .titlepage
    216  108c							; titlepage
    217  108c
    218  108c				   .L029		;  gosub titledrawscreen bank2
    219  108c
    220  108c		       85 ee		      sta	temp7
    221  108e		       a9 90		      lda	#>(ret_point2-1)
    222  1090		       48		      pha
    223  1091		       a9 a3		      lda	#<(ret_point2-1)
    224  1093		       48		      pha
    225  1094		       a9 b0		      lda	#>(.titledrawscreen-1)
    226  1096		       48		      pha
    227  1097		       a9 05		      lda	#<(.titledrawscreen-1)
    228  1099		       48		      pha
    229  109a		       a5 ee		      lda	temp7
    230  109c		       48		      pha
    231  109d		       8a		      txa
    232  109e		       48		      pha
    233  109f		       a2 02		      ldx	#2
    234  10a1		       4c eb ff 	      jmp	BS_jsr
    235  10a4				   ret_point2
    236  10a4				   .
    237  10a4							;
    238  10a4
    239  10a4				   .L030		;  if joy0fire  ||  switchreset then player0y = 200 : goto gamestart
    240  10a4
    241  10a4		       24 0c		      bit	INPT4
    242  10a6		       30 03		      BMI	.skipL030
    243  10a8				   .condpart0
    244  10a8		       4c b2 90 	      jmp	.condpart1
    245  10ab				   .skipL030
    246  10ab		       a9 01		      lda	#1
    247  10ad		       2c 82 02 	      bit	SWCHB
    248  10b0		       d0 07		      BNE	.skip0OR
    249  10b2				   .condpart1
    250  10b2		       a9 c8		      LDA	#200
    251  10b4		       85 85		      STA	player0y
    252  10b6		       4c bc 90 	      jmp	.gamestart
    253  10b9
    254  10b9				   .skip0OR
    255  10b9				   .L031		;  goto titlepage
    256  10b9
    257  10b9		       4c 8c 90 	      jmp	.titlepage
    258  10bc
    259  10bc				   .
    260  10bc							;
    261  10bc
    262  10bc				   .L032		;  rem *** Our fake game start. If you move the joystick it goes back to the
    263  10bc
    264  10bc				   .L033		;  rem *** title screen.
    265  10bc
    266  10bc				   .gamestart
    267  10bc							; gamestart
    268  10bc
    269  10bc				   .
    270  10bc							;
    271  10bc
    272  10bc				   .L034		;  _Bit2_Game_Control{2}  =  0
    273  10bc
    274  10bc		       a5 ec		      LDA	_Bit2_Game_Control
    275  10be		       29 fb		      AND	#251
    276  10c0		       85 ec		      STA	_Bit2_Game_Control
    277  10c2				   .
    278  10c2							;
    279  10c2
    280  10c2				   .L035		;  player0x  =  50
    281  10c2
    282  10c2		       a9 32		      LDA	#50
    283  10c4		       85 80		      STA	player0x
    284  10c6				   .L036		;  player0y  =  80
    285  10c6
    286  10c6		       a9 50		      LDA	#80
    287  10c8		       85 85		      STA	player0y
    288  10ca				   .
    289  10ca							;
    290  10ca
    291  10ca				   .L037		;  player1x  =  20
    292  10ca
    293  10ca		       a9 14		      LDA	#20
    294  10cc		       85 81		      STA	player1x
    295  10ce				   .L038		;  player1y  =  20
    296  10ce
    297  10ce		       a9 14		      LDA	#20
    298  10d0		       85 86		      STA	player1y
    299  10d2				   .
    300  10d2							;
    301  10d2
    302  10d2				   .L039		;  playfield:
    303  10d2
    304  10d2				  -	      ifconst	pfres
    305  10d2				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
    306  10d2					      else
    307  10d2		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
    308  10d4					      endif
    309  10d4		       4c 03 91 	      jmp	pflabel0
    310  10d7				   PF_data0
    311  10d7		       00 00		      .byte.b	%00000000, %00000000
    312  10d9					      if	(pfwidth>2)
    313  10d9		       00 00		      .byte.b	%00000000, %00000000
    314  10db					      endif
    315  10db		       00 00		      .byte.b	%00000000, %00000000
    316  10dd					      if	(pfwidth>2)
    317  10dd		       00 00		      .byte.b	%00000000, %00000000
    318  10df					      endif
    319  10df		       00 00		      .byte.b	%00000000, %00000000
    320  10e1					      if	(pfwidth>2)
    321  10e1		       00 00		      .byte.b	%00000000, %00000000
    322  10e3					      endif
    323  10e3		       00 00		      .byte.b	%00000000, %00000000
    324  10e5					      if	(pfwidth>2)
    325  10e5		       00 00		      .byte.b	%00000000, %00000000
    326  10e7					      endif
    327  10e7		       00 00		      .byte.b	%00000000, %00000000
    328  10e9					      if	(pfwidth>2)
    329  10e9		       00 00		      .byte.b	%00000000, %00000000
    330  10eb					      endif
    331  10eb		       00 00		      .byte.b	%00000000, %00000000
    332  10ed					      if	(pfwidth>2)
    333  10ed		       00 00		      .byte.b	%00000000, %00000000
    334  10ef					      endif
    335  10ef		       00 00		      .byte.b	%00000000, %00000000
    336  10f1					      if	(pfwidth>2)
    337  10f1		       00 00		      .byte.b	%00000000, %00000000
    338  10f3					      endif
    339  10f3		       00 00		      .byte.b	%00000000, %00000000
    340  10f5					      if	(pfwidth>2)
    341  10f5		       00 00		      .byte.b	%00000000, %00000000
    342  10f7					      endif
    343  10f7		       00 00		      .byte.b	%00000000, %00000000
    344  10f9					      if	(pfwidth>2)
    345  10f9		       00 00		      .byte.b	%00000000, %00000000
    346  10fb					      endif
    347  10fb		       00 00		      .byte.b	%00000000, %00000000
    348  10fd					      if	(pfwidth>2)
    349  10fd		       00 00		      .byte.b	%00000000, %00000000
    350  10ff					      endif
    351  10ff		       ff ff		      .byte.b	%11111111, %11111111
    352  1101					      if	(pfwidth>2)
    353  1101		       ff ff		      .byte.b	%11111111, %11111111
    354  1103					      endif
    355  1103				   pflabel0
    356  1103		       bd d7 90 	      lda	PF_data0,x
    357  1106		       95 a4		      sta	playfield,x
    358  1108		       ca		      dex
    359  1109		       10 f8		      bpl	pflabel0
    360  110b				   .
    361  110b							;
    362  110b
    363  110b				   .L040		;  pfcolors:
    364  110b
    365  110b		       a9 ca		      lda	# $CA
    366  110d		       85 08		      sta	COLUPF
    367  110f				  -	      ifconst	pfres
    368  110f				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
    369  110f					      else
    370  110f		       a9 f5		      lda	#>(pfcolorlabel13-84)
    371  1111					      endif
    372  1111		       85 f1		      sta	pfcolortable+1
    373  1113				  -	      ifconst	pfres
    374  1113				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
    375  1113					      else
    376  1113		       a9 04		      lda	#<(pfcolorlabel13-84)
    377  1115					      endif
    378  1115		       85 f0		      sta	pfcolortable
    379  1117				   .
    380  1117							;
    381  1117
    382  1117				   .L041		;  player0:
    383  1117
    384  1117		       a2 80		      LDX	#<playerL041_0
    385  1119		       86 8a		      STX	player0pointerlo
    386  111b		       a9 f5		      LDA	#>playerL041_0
    387  111d		       85 8b		      STA	player0pointerhi
    388  111f		       a9 09		      LDA	#9
    389  1121		       85 8e		      STA	player0height
    390  1123				   .
    391  1123							;
    392  1123
    393  1123				   .L042		;  player1:
    394  1123
    395  1123		       a2 8a		      LDX	#<playerL042_1
    396  1125		       86 8c		      STX	player1pointerlo
    397  1127		       a9 f5		      LDA	#>playerL042_1
    398  1129		       85 8d		      STA	player1pointerhi
    399  112b		       a9 09		      LDA	#9
    400  112d		       85 8f		      STA	player1height
    401  112f				   .
    402  112f							;
    403  112f
    404  112f				   .L043		;  player0color:
    405  112f
    406  112f		       a2 94		      LDX	#<playercolorL043_0
    407  1131		       86 90		      STX	player0color
    408  1133		       a9 f5		      LDA	#>playercolorL043_0
    409  1135		       85 91		      STA	player0color+1
    410  1137				   .
    411  1137							;
    412  1137
    413  1137				   .L044		;  player1color:
    414  1137
    415  1137		       a2 9f		      LDX	#<playercolorL044_1
    416  1139		       86 87		      STX	player1color
    417  113b		       a9 f5		      LDA	#>playercolorL044_1
    418  113d		       85 88		      STA	player1color+1
    419  113f				   .
    420  113f							;
    421  113f
    422  113f				   .gameloop
    423  113f							; gameloop
    424  113f
    425  113f				   .L045		;  f = f + 1
    426  113f
    427  113f		       e6 d9		      INC	f
    428  1141				   .
    429  1141							;
    430  1141
    431  1141				   .L046		;  if f  =  10 then player0:
    432  1141
    433  1141		       a5 d9		      LDA	f
    434  1143		       c9 0a		      CMP	#10
    435  1145		       d0 0c		      BNE	.skipL046
    436  1147				   .condpart2
    437  1147		       a2 a8		      LDX	#<player2then_0
    438  1149		       86 8a		      STX	player0pointerlo
    439  114b		       a9 f5		      LDA	#>player2then_0
    440  114d		       85 8b		      STA	player0pointerhi
    441  114f		       a9 09		      LDA	#9
    442  1151		       85 8e		      STA	player0height
    443  1153				   .skipL046
    444  1153				   .L047		;  if f  =  10 then player0color:
    445  1153
    446  1153		       a5 d9		      LDA	f
    447  1155		       c9 0a		      CMP	#10
    448  1157		       d0 08		      BNE	.skipL047
    449  1159				   .condpart3
    450  1159		       a2 b2		      LDX	#<playercolor3then_0
    451  115b		       86 90		      STX	player0color
    452  115d		       a9 f5		      LDA	#>playercolor3then_0
    453  115f		       85 91		      STA	player0color+1
    454  1161				   .skipL047
    455  1161				   .L048		;  if f  =  20 then player0:
    456  1161
    457  1161		       a5 d9		      LDA	f
    458  1163		       c9 14		      CMP	#20
    459  1165		       d0 0c		      BNE	.skipL048
    460  1167				   .condpart4
    461  1167		       a2 bc		      LDX	#<player4then_0
    462  1169		       86 8a		      STX	player0pointerlo
    463  116b		       a9 f5		      LDA	#>player4then_0
    464  116d		       85 8b		      STA	player0pointerhi
    465  116f		       a9 09		      LDA	#9
    466  1171		       85 8e		      STA	player0height
    467  1173				   .skipL048
    468  1173				   .L049		;  if f  =  20 then player0color:
    469  1173
    470  1173		       a5 d9		      LDA	f
    471  1175		       c9 14		      CMP	#20
    472  1177		       d0 08		      BNE	.skipL049
    473  1179				   .condpart5
    474  1179		       a2 c6		      LDX	#<playercolor5then_0
    475  117b		       86 90		      STX	player0color
    476  117d		       a9 f5		      LDA	#>playercolor5then_0
    477  117f		       85 91		      STA	player0color+1
    478  1181				   .skipL049
    479  1181				   .
    480  1181							;
    481  1181
    482  1181				   .L050		;  if f  =  30 then player0:
    483  1181
    484  1181		       a5 d9		      LDA	f
    485  1183		       c9 1e		      CMP	#30
    486  1185		       d0 0c		      BNE	.skipL050
    487  1187				   .condpart6
    488  1187		       a2 d0		      LDX	#<player6then_0
    489  1189		       86 8a		      STX	player0pointerlo
    490  118b		       a9 f5		      LDA	#>player6then_0
    491  118d		       85 8b		      STA	player0pointerhi
    492  118f		       a9 09		      LDA	#9
    493  1191		       85 8e		      STA	player0height
    494  1193				   .skipL050
    495  1193				   .L051		;  if f  =  30 then player0color:
    496  1193
    497  1193		       a5 d9		      LDA	f
    498  1195		       c9 1e		      CMP	#30
    499  1197		       d0 08		      BNE	.skipL051
    500  1199				   .condpart7
    501  1199		       a2 da		      LDX	#<playercolor7then_0
    502  119b		       86 90		      STX	player0color
    503  119d		       a9 f5		      LDA	#>playercolor7then_0
    504  119f		       85 91		      STA	player0color+1
    505  11a1				   .skipL051
    506  11a1				   .
    507  11a1							;
    508  11a1
    509  11a1				   .L052		;  player1y  =  player1y  +  1
    510  11a1
    511  11a1		       e6 86		      INC	player1y
    512  11a3				   .L053		;  if f = 30 then f = 0
    513  11a3
    514  11a3		       a5 d9		      LDA	f
    515  11a5		       c9 1e		      CMP	#30
    516  11a7		       d0 04		      BNE	.skipL053
    517  11a9				   .condpart8
    518  11a9		       a9 00		      LDA	#0
    519  11ab		       85 d9		      STA	f
    520  11ad				   .skipL053
    521  11ad				   .
    522  11ad							;
    523  11ad
    524  11ad				   .L054		;  if joy0right then REFP0  =	0
    525  11ad
    526  11ad		       2c 80 02 	      bit	SWCHA
    527  11b0		       30 04		      BMI	.skipL054
    528  11b2				   .condpart9
    529  11b2		       a9 00		      LDA	#0
    530  11b4		       85 0b		      STA	REFP0
    531  11b6				   .skipL054
    532  11b6				   .L055		;  if joy0left then REFP0  =  8
    533  11b6
    534  11b6		       2c 80 02 	      bit	SWCHA
    535  11b9		       70 04		      BVS	.skipL055
    536  11bb				   .condpart10
    537  11bb		       a9 08		      LDA	#8
    538  11bd		       85 0b		      STA	REFP0
    539  11bf				   .skipL055
    540  11bf				   .
    541  11bf							;
    542  11bf
    543  11bf				   .L056		;  drawscreen
    544  11bf
    545  11bf		       85 ee		      sta	temp7
    546  11c1		       a9 91		      lda	#>(ret_point3-1)
    547  11c3		       48		      pha
    548  11c4		       a9 d6		      lda	#<(ret_point3-1)
    549  11c6		       48		      pha
    550  11c7		       a9 f4		      lda	#>(drawscreen-1)
    551  11c9		       48		      pha
    552  11ca		       a9 3b		      lda	#<(drawscreen-1)
    553  11cc		       48		      pha
    554  11cd		       a5 ee		      lda	temp7
    555  11cf		       48		      pha
    556  11d0		       8a		      txa
    557  11d1		       48		      pha
    558  11d2		       a2 04		      ldx	#4
    559  11d4		       4c eb ff 	      jmp	BS_jsr
    560  11d7				   ret_point3
    561  11d7				   .
    562  11d7							;
    563  11d7
    564  11d7				   .L057		;  if joy0right then player0x	=  player0x  +	1
    565  11d7
    566  11d7		       2c 80 02 	      bit	SWCHA
    567  11da		       30 02		      BMI	.skipL057
    568  11dc				   .condpart11
    569  11dc		       e6 80		      INC	player0x
    570  11de				   .skipL057
    571  11de				   .L058		;  if joy0left then player0x  =  player0x  -  1
    572  11de
    573  11de		       2c 80 02 	      bit	SWCHA
    574  11e1		       70 02		      BVS	.skipL058
    575  11e3				   .condpart12
    576  11e3		       c6 80		      DEC	player0x
    577  11e5				   .skipL058
    578  11e5				   .L059		;  if joy0up then player0y  =	player0y  -  1
    579  11e5
    580  11e5		       a9 10		      lda	#$10
    581  11e7		       2c 80 02 	      bit	SWCHA
    582  11ea		       d0 02		      BNE	.skipL059
    583  11ec				   .condpart13
    584  11ec		       c6 85		      DEC	player0y
    585  11ee				   .skipL059
    586  11ee				   .L060		;  if joy0down then player0y  =  player0y  +  1
    587  11ee
    588  11ee		       a9 20		      lda	#$20
    589  11f0		       2c 80 02 	      bit	SWCHA
    590  11f3		       d0 02		      BNE	.skipL060
    591  11f5				   .condpart14
    592  11f5		       e6 85		      INC	player0y
    593  11f7				   .skipL060
    594  11f7				   .L061		;  if player0y  >=  80 then player0y  =  80
    595  11f7
    596  11f7		       a5 85		      LDA	player0y
    597  11f9		       c9 50		      CMP	#80
    598  11fb		       90 04		      BCC	.skipL061
    599  11fd				   .condpart15
    600  11fd		       a9 50		      LDA	#80
    601  11ff		       85 85		      STA	player0y
    602  1201				   .skipL061
    603  1201				   .L062		;  if player0x  <= 1 then player0x  =	1
    604  1201
    605  1201		       a9 01		      LDA	#1
    606  1203		       c5 80		      CMP	player0x
    607  1205		       90 04		      BCC	.skipL062
    608  1207				   .condpart16
    609  1207		       a9 01		      LDA	#1
    610  1209		       85 80		      STA	player0x
    611  120b				   .skipL062
    612  120b				   .L063		;  if player0x  >=  123 then player0x	=  123
    613  120b
    614  120b		       a5 80		      LDA	player0x
    615  120d		       c9 7b		      CMP	#123
    616  120f		       90 04		      BCC	.skipL063
    617  1211				   .condpart17
    618  1211		       a9 7b		      LDA	#123
    619  1213		       85 80		      STA	player0x
    620  1215				   .skipL063
    621  1215				   .
    622  1215							;
    623  1215
    624  1215				   .L064		;  if collision(player0,player1) then score  =  score	+  10  :  player1y  =  20  :  player1x	=  rand16 & 127
    625  1215
    626  1215		       24 07		      bit	CXPPMM
    627  1217		       10 2a		      BPL	.skipL064
    628  1219				   .condpart18
    629  1219		       f8		      SED
    630  121a		       18		      CLC
    631  121b		       a5 95		      LDA	score+2
    632  121d		       69 10		      ADC	#$10
    633  121f		       85 95		      STA	score+2
    634  1221		       a5 94		      LDA	score+1
    635  1223		       69 00		      ADC	#$00
    636  1225		       85 94		      STA	score+1
    637  1227		       a5 93		      LDA	score
    638  1229		       69 00		      ADC	#$00
    639  122b		       85 93		      STA	score
    640  122d		       d8		      CLD
    641  122e		       a9 14		      LDA	#20
    642  1230		       85 86		      STA	player1y
    643  1232		       a5 a2		      lda	rand
    644  1234		       4a		      lsr
    645  1235					      ifconst	rand16
    646  1235		       26 e1		      rol	rand16
    647  1237					      endif
    648  1237		       90 02		      bcc	*+4
    649  1239		       49 b4		      eor	#$B4
    650  123b		       85 a2		      sta	rand
    651  123d					      ifconst	rand16
    652  123d		       45 e1		      eor	rand16
    653  123f					      endif
    654  123f		       29 7f		      AND	#127
    655  1241		       85 81		      STA	player1x
    656  1243				   .skipL064
    657  1243				   .L065		;  if player1y  =  80	&&  !collision(player0,player1) then missed  =	missed	+  1  :  player1y  =  20  :  player1x  =  rand16 & 127 :  pfscore1  =  pfscore1 / 4
    658  1243
    659  1243		       a5 86		      LDA	player1y
    660  1245		       c9 50		      CMP	#80
    661  1247		       d0 21		      BNE	.skipL065
    662  1249				   .condpart19
    663  1249		       24 07		      bit	CXPPMM
    664  124b		       30 1d		      BMI	.skip19then
    665  124d				   .condpart20
    666  124d		       e6 d7		      INC	missed
    667  124f		       a9 14		      LDA	#20
    668  1251		       85 86		      STA	player1y
    669  1253		       a5 a2		      lda	rand
    670  1255		       4a		      lsr
    671  1256					      ifconst	rand16
    672  1256		       26 e1		      rol	rand16
    673  1258					      endif
    674  1258		       90 02		      bcc	*+4
    675  125a		       49 b4		      eor	#$B4
    676  125c		       85 a2		      sta	rand
    677  125e					      ifconst	rand16
    678  125e		       45 e1		      eor	rand16
    679  1260					      endif
    680  1260		       29 7f		      AND	#127
    681  1262		       85 81		      STA	player1x
    682  1264		       a5 f2		      LDA	pfscore1
    683  1266		       4a		      lsr
    684  1267		       4a		      lsr
    685  1268		       85 f2		      STA	pfscore1
    686  126a				   .skip19then
    687  126a				   .skipL065
    688  126a				   .L066		;  if missed  =  4 then goto __Game_Over_Setup bank3
    689  126a
    690  126a		       a5 d7		      LDA	missed
    691  126c		       c9 04		      CMP	#4
    692  126e		       d0 12		      BNE	.skipL066
    693  1270				   .condpart21
    694  1270		       85 ee		      sta	temp7
    695  1272		       a9 cf		      lda	#>(.__Game_Over_Setup-1)
    696  1274		       48		      pha
    697  1275		       a9 ff		      lda	#<(.__Game_Over_Setup-1)
    698  1277		       48		      pha
    699  1278		       a5 ee		      lda	temp7
    700  127a		       48		      pha
    701  127b		       8a		      txa
    702  127c		       48		      pha
    703  127d		       a2 03		      ldx	#3
    704  127f		       4c eb ff 	      jmp	BS_jsr
    705  1282				   .skipL066
    706  1282				   .
    707  1282							;
    708  1282
    709  1282				   .L067		;  goto gameloop
    710  1282
    711  1282		       4c 3f 91 	      jmp	.gameloop
    712  1285
    713  1285				   .
    714  1285							;
    715  1285
    716  1285				   .L068		;  bank 2
    717  1285
    718  1285					      if	ECHO1
      3407 bytes of ROM space left in bank 1
    719  1285					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    720  1285					      endif
    721  1285		       00 01	   ECHO1      =	1
    722  1fd4					      ORG	$1FF4-bscode_length
    723  1fd4					      RORG	$9FF4-bscode_length
    724  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    725  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    726  1fd6				  -	      stx	FASTFETCH
    727  1fd6					      endif
    728  1fd6		       9a		      txs
    729  1fd7				  -	      if	bankswitch == 64
    730  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    731  1fd7					      else
    732  1fd7		       a9 f2		      lda	#>(start-1)
    733  1fd9					      endif
    734  1fd9		       48		      pha
    735  1fda		       a9 51		      lda	#<(start-1)
    736  1fdc		       48		      pha
    737  1fdd		       48		      pha
    738  1fde		       8a		      txa
    739  1fdf		       48		      pha
    740  1fe0		       ba		      tsx
    741  1fe1					      if	bankswitch != 64
    742  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    743  1fe3		       2a		      rol
    744  1fe4		       2a		      rol
    745  1fe5		       2a		      rol
    746  1fe6		       2a		      rol
    747  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    748  1fe9		       aa		      tax
    749  1fea		       e8		      inx
    750  1feb				  -	      else
    751  1feb				  -	      lda	4,x	; get high byte of return address
    752  1feb				  -	      tay
    753  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    754  1feb				  -	      sta	4,x
    755  1feb				  -	      tya
    756  1feb				  -	      lsr
    757  1feb				  -	      lsr
    758  1feb				  -	      lsr
    759  1feb				  -	      lsr
    760  1feb				  -	      tax
    761  1feb				  -	      inx
    762  1feb					      endif
    763  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    764  1fee		       68		      pla
    765  1fef		       aa		      tax
    766  1ff0		       68		      pla
    767  1ff1		       60		      rts
    768  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    769  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    770  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    771  1ff2					      endif
    772  1ffc					      ORG	$1FFC
    773  1ffc					      RORG	$9FFC
    774  1ffc		       d4 9f		      .word.w	(start_bank1 & $ffff)
    775  1ffe		       d4 9f		      .word.w	(start_bank1 & $ffff)
    776  2000					      ORG	$2000
    777  2000					      RORG	$B000
    778  2000				   .L069		;  _Bit0_Reset_Restrainer{0}  =  1
    779  2000
    780  2000		       a5 ec		      LDA	_Bit0_Reset_Restrainer
    781  2002		       09 01		      ORA	#1
    782  2004		       85 ec		      STA	_Bit0_Reset_Restrainer
    783  2006				   .L070		;  asm
    784  2006
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  2006					      include	"titlescreen/asm/titlescreen.asm"
      1  2006
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  2006					      include	"titlescreen/asm/layoutmacros.asm"
      1  2006
      2  2006							; the macro's used in the "titlescreen_layout.asm" file
      3  2006
      4  2006					      MAC	draw_96x2_1
      5  2006				   mk_96x2_1_on =	1
      6  2006					      jsr	draw_bmp_96x2_1
      7  2006					      ENDM
      8  2006
      9  2006					      MAC	draw_96x2_2
     10  2006				   mk_96x2_2_on =	1
     11  2006					      jsr	draw_bmp_96x2_2
     12  2006					      ENDM
     13  2006
     14  2006					      MAC	draw_96x2_3
     15  2006				   mk_96x2_3_on =	1
     16  2006					      jsr	draw_bmp_96x2_3
     17  2006					      ENDM
     18  2006
     19  2006					      MAC	draw_96x2_4
     20  2006				   mk_96x2_4_on =	1
     21  2006					      jsr	draw_bmp_96x2_4
     22  2006					      ENDM
     23  2006
     24  2006					      MAC	draw_96x2_5
     25  2006				   mk_96x2_5_on =	1
     26  2006					      jsr	draw_bmp_96x2_5
     27  2006					      ENDM
     28  2006
     29  2006					      MAC	draw_96x2_6
     30  2006				   mk_96x2_6_on =	1
     31  2006					      jsr	draw_bmp_96x2_6
     32  2006					      ENDM
     33  2006
     34  2006					      MAC	draw_96x2_7
     35  2006				   mk_96x2_7_on =	1
     36  2006					      jsr	draw_bmp_96x2_7
     37  2006					      ENDM
     38  2006
     39  2006					      MAC	draw_96x2_8
     40  2006				   mk_96x2_8_on =	1
     41  2006					      jsr	draw_bmp_96x2_8
     42  2006					      ENDM
     43  2006
     44  2006					      MAC	draw_48x1_1
     45  2006				   mk_48x1_X_on =	1
     46  2006				   mk_48x1_1_on =	1
     47  2006					      jsr	draw_bmp_48x1_1
     48  2006					      ENDM
     49  2006
     50  2006					      MAC	draw_48x1_2
     51  2006				   mk_48x1_X_on =	1
     52  2006				   mk_48x1_2_on =	1
     53  2006					      jsr	draw_bmp_48x1_2
     54  2006					      ENDM
     55  2006
     56  2006					      MAC	draw_48x1_3
     57  2006				   mk_48x1_X_on =	1
     58  2006				   mk_48x1_3_on =	1
     59  2006					      jsr	draw_bmp_48x1_3
     60  2006					      ENDM
     61  2006
     62  2006					      MAC	draw_48x1_4
     63  2006				   mk_48x1_X_on =	1
     64  2006				   mk_48x1_4_on =	1
     65  2006					      jsr	draw_bmp_48x1_4
     66  2006					      ENDM
     67  2006
     68  2006					      MAC	draw_48x1_5
     69  2006				   mk_48x1_X_on =	1
     70  2006				   mk_48x1_5_on =	1
     71  2006					      jsr	draw_bmp_48x1_5
     72  2006					      ENDM
     73  2006
     74  2006					      MAC	draw_48x1_6
     75  2006				   mk_48x1_X_on =	1
     76  2006				   mk_48x1_6_on =	1
     77  2006					      jsr	draw_bmp_48x1_6
     78  2006					      ENDM
     79  2006
     80  2006					      MAC	draw_48x1_7
     81  2006				   mk_48x1_X_on =	1
     82  2006				   mk_48x1_7_on =	1
     83  2006					      jsr	draw_bmp_48x1_7
     84  2006					      ENDM
     85  2006
     86  2006					      MAC	draw_48x1_8
     87  2006				   mk_48x1_X_on =	1
     88  2006				   mk_48x1_8_on =	1
     89  2006					      jsr	draw_bmp_48x1_8
     90  2006					      ENDM
     91  2006
     92  2006
     93  2006					      MAC	draw_48x2_1
     94  2006				   mk_48x2_X_on =	1
     95  2006				   mk_48x2_1_on =	1
     96  2006					      jsr	draw_bmp_48x2_1
     97  2006					      ENDM
     98  2006
     99  2006					      MAC	draw_48x2_2
    100  2006				   mk_48x2_X_on =	1
    101  2006				   mk_48x2_2_on =	1
    102  2006					      jsr	draw_bmp_48x2_2
    103  2006					      ENDM
    104  2006
    105  2006					      MAC	draw_48x2_3
    106  2006				   mk_48x2_X_on =	1
    107  2006				   mk_48x2_3_on =	1
    108  2006					      jsr	draw_bmp_48x2_3
    109  2006					      ENDM
    110  2006
    111  2006					      MAC	draw_48x2_4
    112  2006				   mk_48x2_X_on =	1
    113  2006				   mk_48x2_4_on =	1
    114  2006					      jsr	draw_bmp_48x2_4
    115  2006					      ENDM
    116  2006
    117  2006					      MAC	draw_48x2_5
    118  2006				   mk_48x2_X_on =	1
    119  2006				   mk_48x2_5_on =	1
    120  2006					      jsr	draw_bmp_48x2_5
    121  2006					      ENDM
    122  2006
    123  2006					      MAC	draw_48x2_6
    124  2006				   mk_48x2_X_on =	1
    125  2006				   mk_48x2_6_on =	1
    126  2006					      jsr	draw_bmp_48x2_6
    127  2006					      ENDM
    128  2006
    129  2006					      MAC	draw_48x2_7
    130  2006				   mk_48x2_X_on =	1
    131  2006				   mk_48x2_7_on =	1
    132  2006					      jsr	draw_bmp_48x2_7
    133  2006					      ENDM
    134  2006
    135  2006					      MAC	draw_48x2_8
    136  2006				   mk_48x2_X_on =	1
    137  2006				   mk_48x2_8_on =	1
    138  2006					      jsr	draw_bmp_48x2_8
    139  2006					      ENDM
    140  2006
    141  2006					      MAC	draw_player
    142  2006				   mk_player_on =	1
    143  2006					      jsr	draw_player_display
    144  2006					      ENDM
    145  2006
    146  2006					      MAC	draw_score
    147  2006				   mk_score_on =	1
    148  2006				   mk_48x1_X_on =	1
    149  2006					      jsr	draw_score_display
    150  2006					      ENDM
    151  2006
    152  2006					      MAC	draw_gameselect
    153  2006				   mk_gameselect_on =	1
    154  2006				   mk_48x1_X_on =	1
    155  2006					      jsr	draw_gameselect_display
    156  2006					      ENDM
    157  2006
    158  2006					      MAC	draw_space
    159  2006					      ldy	#{1}
    160  2006				   .loop
    161  2006					      sta	WSYNC
    162  2006					      dey
    163  2006					      bne	.loop
    164  2006					      ENDM
    165  2006
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  2006					      include	"titlescreen/asm/dpcfix.asm"
      1  2006							; reassign variables that DPC+ doesn't have
      2  2006
      3  2006				  -	      ifnconst	aux2
      4  2006				  -aux2       =	player2x
      5  2006					      endif
      6  2006				  -	      ifnconst	aux4
      7  2006				  -aux4       =	player4x
      8  2006					      endif
      9  2006				  -	      ifnconst	aux5
     10  2006				  -aux5       =	player5x
     11  2006					      endif
     12  2006				  -	      ifnconst	aux6
     13  2006				  -aux6       =	player6x
     14  2006					      endif
     15  2006
     16  2006				  -	      ifnconst	player0pointer
     17  2006				  -player0pointer =	player2y
     18  2006					      endif
     19  2006				  -	      ifnconst	player1pointer
     20  2006				  -player1pointer =	player2height	; to player3height
     21  2006					      endif
     22  2006				  -	      ifnconst	player1color
     23  2006				  -player1color =	player4height	; to player5height
     24  2006					      endif
     25  2006				  -	      ifnconst	scorepointers
     26  2006				  -scorepointers =	player6height	; to NUSIZ8
     27  2006					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  2006					      include	"titlescreen/titlescreen_layout.asm"
      1  2006					      MAC	titlescreenlayout
      2  2006					      draw_96x2_2
      3  2006					      draw_space	25
      4  2006					      draw_96x2_3
      5  2006					      ENDM
      6  2006
------- FILE titlescreen/asm/titlescreen.asm
      5  2006
      6  2006				   .titledrawscreen
      7  2006				   title_eat_overscan
      8  2006							;bB runs in overscan. Wait for the overscan to run out...
      9  2006		       18		      clc
     10  2007		       ad 84 02 	      lda	INTIM
     11  200a		       30 fa		      bmi	title_eat_overscan
     12  200c		       4c 0f b0 	      jmp	title_do_vertical_sync
     13  200f
     14  200f				   title_do_vertical_sync
     15  200f		       a9 02		      lda	#2
     16  2011		       85 02		      sta	WSYNC	;one line with VSYNC
     17  2013		       85 00		      sta	VSYNC	;enable VSYNC
     18  2015		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2017		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2019		       a9 00		      lda	#0
     21  201b		       85 02		      sta	WSYNC	;one line with VSYNC
     22  201d		       85 00		      sta	VSYNC	;turn off VSYNC
     23  201f
     24  201f							;lda #42+128
     25  201f				  -	      ifnconst	vblank_time
     26  201f				  -	      lda	#42+128
     27  201f					      else
     28  201f		       a9 ab		      lda	#vblank_time+128
     29  2021					      endif
     30  2021
     31  2021		       8d 96 02 	      sta	TIM64T
     32  2024
     33  2024		       00 82	   titleframe =	missile0x
     34  2024		       e6 82		      inc	titleframe	; increment the frame counter
     35  2026
     36  2026				  -	      ifconst	.title_vblank
     37  2026				  -	      jsr	.title_vblank
     38  2026					      endif
     39  2026
     40  2026				   title_vblank_loop
     41  2026		       ad 84 02 	      lda	INTIM
     42  2029		       30 fb		      bmi	title_vblank_loop
     43  202b		       a9 00		      lda	#0
     44  202d		       85 02		      sta	WSYNC
     45  202f		       85 01		      sta	VBLANK
     46  2031		       85 1d		      sta	ENAM0
     47  2033		       85 1f		      sta	ENABL
     48  2035
     49  2035				   title_playfield
     50  2035
     51  2035							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  2035
     53  2035		       a9 e6		      lda	#230
     54  2037		       8d 96 02 	      sta	TIM64T
     55  203a
     56  203a		       a9 01		      lda	#1
     57  203c		       85 0a		      sta	CTRLPF
     58  203e		       18		      clc
     59  203f
     60  203f		       a9 00		      lda	#0
     61  2041		       85 0b		      sta	REFP0
     62  2043		       85 0c		      sta	REFP1
     63  2045		       85 02		      sta	WSYNC
     64  2047		       ad 84 b0 	      lda	titlescreencolor
     65  204a		       85 09		      sta	COLUBK
     66  204c
      0  204c					      titlescreenlayout
      0  204c					      draw_96x2_2
      1  204c		       00 01	   mk_96x2_2_on =	1
      2  204c		       20 85 b0 	      jsr	draw_bmp_96x2_2
      0  204f					      draw_space	25
      1  204f		       a0 19		      ldy	#25
      2  2051				   .loop
      3  2051		       85 02		      sta	WSYNC
      4  2053		       88		      dey
      5  2054		       d0 fb		      bne	.loop
      0  2056					      draw_96x2_3
      1  2056		       00 01	   mk_96x2_3_on =	1
      2  2056		       20 71 b2 	      jsr	draw_bmp_96x2_3
     68  2059
     69  2059		       4c 71 b4 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  205c
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  205c					      include	"titlescreen/asm/position48.asm"
      1  205c
      2  205c				   position48
      3  205c
      4  205c							;postion P0 and P1
      5  205c
      6  205c		       85 02		      sta	WSYNC
      7  205e
      8  205e		       a9 90		      lda	#$90	;2
      9  2060		       85 20		      sta	HMP0	;3
     10  2062		       a9 a0		      lda	#$A0	;2
     11  2064		       85 21		      sta	HMP1	;3
     12  2066
     13  2066		       e6 9c		      inc	temp1
     14  2068		       c6 9c		      dec	temp1
     15  206a		       e6 9c		      inc	temp1
     16  206c		       c6 9c		      dec	temp1
     17  206e		       e6 9c		      inc	temp1
      0  2070					      sleep	2
      1  2070				   .CYCLES    SET	2
      2  2070
      3  2070				  -	      IF	.CYCLES < 2
      4  2070				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2070				  -	      ERR
      6  2070					      ENDIF
      7  2070
      8  2070				  -	      IF	.CYCLES & 1
      9  2070				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2070				  -	      nop	0
     11  2070				  -	      ELSE
     12  2070				  -	      bit	VSYNC
     13  2070				  -	      ENDIF
     14  2070				  -.CYCLES    SET	.CYCLES - 3
     15  2070					      ENDIF
     16  2070
     17  2070					      REPEAT	.CYCLES / 2
     18  2070		       ea		      nop
     19  2071					      REPEND
     19  2071		       85 10		      sta	RESP0	;  +3
     20  2073		       85 11		      sta	RESP1	;  +3
     21  2075		       c6 9c		      dec	temp1	;  +5
     22  2077		       e6 9c		      inc	temp1	;  +5
     23  2079		       c6 9c		      dec	temp1	;  +5
     24  207b		       e6 9c		      inc	temp1	;  +5
     25  207d		       c6 9c		      dec	temp1	;  +5
      0  207f					      sleep	3
      1  207f				   .CYCLES    SET	3
      2  207f
      3  207f				  -	      IF	.CYCLES < 2
      4  207f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  207f				  -	      ERR
      6  207f					      ENDIF
      7  207f
      8  207f					      IF	.CYCLES & 1
      9  207f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  207f		       04 00		      nop	0
     11  2081				  -	      ELSE
     12  2081				  -	      bit	VSYNC
     13  2081					      ENDIF
     14  2081				   .CYCLES    SET	.CYCLES - 3
     15  2081					      ENDIF
     16  2081
     17  2081				  -	      REPEAT	.CYCLES / 2
     18  2081				  -	      nop
     19  2081					      REPEND
     27  2081		       85 2a		      sta	HMOVE	; +76
     28  2083		       60		      RTS
     29  2084
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  2084					      include	"titlescreen/titlescreen_color.asm"
      1  2084
      2  2084							; This is where the titlescreen background color gets set. 
      3  2084							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  2084							; if you want to change the color on the fly.
      5  2084
      6  2084				  -	      ifnconst	titlescreencolor
      7  2084				  -titlescreencolor
      8  2084					      endif
      9  2084		       00		      .byte.b	$00
     10  2085
------- FILE titlescreen/asm/titlescreen.asm
     73  2085
     74  2085				  -	      ifconst	mk_48x1_1_on
     75  2085				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  2085					      endif		;mk_48x1_1_on
     77  2085
     78  2085				  -	      ifconst	mk_48x1_2_on
     79  2085				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  2085					      endif		;mk_48x1_2_on
     81  2085
     82  2085				  -	      ifconst	mk_48x1_3_on
     83  2085				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  2085					      endif		;mk_48x1_3_on
     85  2085
     86  2085				  -	      ifconst	mk_48x1_4_on
     87  2085				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  2085					      endif		;mk_48x1_4_on
     89  2085
     90  2085				  -	      ifconst	mk_48x1_5_on
     91  2085				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  2085					      endif		;mk_48x1_5_on
     93  2085
     94  2085				  -	      ifconst	mk_48x1_6_on
     95  2085				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  2085					      endif		;mk_48x1_6_on
     97  2085
     98  2085				  -	      ifconst	mk_48x1_7_on
     99  2085				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  2085					      endif		;mk_48x1_7_on
    101  2085
    102  2085				  -	      ifconst	mk_48x1_8_on
    103  2085				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  2085					      endif		;mk_48x1_8_on
    105  2085
    106  2085				  -	      ifconst	mk_48x2_1_on
    107  2085				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
    108  2085					      endif		;mk_48x2_1_on
    109  2085
    110  2085				  -	      ifconst	mk_48x2_2_on
    111  2085				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  2085					      endif		;mk_48x2_2_on
    113  2085
    114  2085				  -	      ifconst	mk_48x2_3_on
    115  2085				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  2085					      endif		;mk_48x2_3_on
    117  2085
    118  2085				  -	      ifconst	mk_48x2_4_on
    119  2085				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  2085					      endif		;mk_48x2_4_on
    121  2085
    122  2085				  -	      ifconst	mk_48x2_5_on
    123  2085				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  2085					      endif		;mk_48x2_5_on
    125  2085
    126  2085				  -	      ifconst	mk_48x2_6_on
    127  2085				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  2085					      endif		;mk_48x2_6_on
    129  2085
    130  2085				  -	      ifconst	mk_48x2_7_on
    131  2085				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  2085					      endif		;mk_48x2_7_on
    133  2085
    134  2085				  -	      ifconst	mk_48x2_8_on
    135  2085				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  2085					      endif		;mk_48x2_8_on
    137  2085
    138  2085				  -	      ifconst	mk_48x1_X_on
    139  2085				  -	      include	"titlescreen/asm/48x1_X_kernel.asm"
    140  2085					      endif		;mk_48x1_X_on
    141  2085
    142  2085				  -	      ifconst	mk_48x2_X_on
    143  2085				  -	      include	"titlescreen/asm/48x2_X_kernel.asm"
    144  2085					      endif		;mk_48x2_X_on
    145  2085
    146  2085
    147  2085				  -	      ifconst	mk_96x2_1_on
    148  2085				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    149  2085					      endif		;mk_96x2_1_on
    150  2085
    151  2085					      ifconst	mk_96x2_2_on
------- FILE titlescreen/asm/96x2_2_kernel.asm LEVEL 3 PASS 2
      0  2085					      include	"titlescreen/asm/96x2_2_kernel.asm"
      1  2085				   draw_bmp_96x2_2
      2  2085
      3  2085				  -	      ifconst	bmp_96x2_2_index
      4  2085				  -	      lda	#(bmp_96x2_2_height-1)
      5  2085				  -	      sec
      6  2085				  -	      sbc	bmp_96x2_2_index
      7  2085				  -	      tay
      8  2085				  -	      sbc	#bmp_96x2_2_window
      9  2085				  -	      sta	temp1
     10  2085					      else
     11  2085		       a0 27		      ldy	#(bmp_96x2_2_window-1)
     12  2087		       a9 ff		      lda	#255
     13  2089		       85 9c		      sta	temp1
     14  208b					      endif
     15  208b
     16  208b		       a9 03		      lda	#3
     17  208d		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  208f		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  2091		       a9 00		      lda	#0
     20  2093
     21  2093		       b9 87 b4 	      lda	bmp_96x2_2_colors,y	;4
     22  2096				  -	      ifconst	bmp_96x2_2_fade
     23  2096				  -	      and	bmp_96x2_2_fade
     24  2096					      endif
     25  2096		       85 06		      sta	COLUP0	;3
     26  2098		       85 07		      sta	COLUP1	;3
     27  209a		       85 2b		      sta	HMCLR	;3
     28  209c
     29  209c		       a5 82		      lda	titleframe
     30  209e		       29 01		      and	#1
     31  20a0		       f0 03		      beq	jmp_pf96x2_2_frame0
     32  20a2		       4c 70 b1 	      jmp	pf96x2_2_frame1
     33  20a5				   jmp_pf96x2_2_frame0
     34  20a5		       4c a8 b0 	      jmp	pf96x2_2_frame0
     35  20a8
     36  20a8				   pf96x2_2_frame0
     37  20a8							;postion P0 and P1
     38  20a8		       85 02		      sta	WSYNC
     39  20aa		       a9 e0		      lda	#%11100000
     40  20ac		       85 20		      sta	HMP0
     41  20ae		       a9 10		      lda	#%00010000
     42  20b0		       85 21		      sta	HMP1
     43  20b2		       85 02		      sta	WSYNC
      0  20b4					      sleep	28
      1  20b4				   .CYCLES    SET	28
      2  20b4
      3  20b4				  -	      IF	.CYCLES < 2
      4  20b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  20b4				  -	      ERR
      6  20b4					      ENDIF
      7  20b4
      8  20b4				  -	      IF	.CYCLES & 1
      9  20b4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  20b4				  -	      nop	0
     11  20b4				  -	      ELSE
     12  20b4				  -	      bit	VSYNC
     13  20b4				  -	      ENDIF
     14  20b4				  -.CYCLES    SET	.CYCLES - 3
     15  20b4					      ENDIF
     16  20b4
     17  20b4					      REPEAT	.CYCLES / 2
     18  20b4		       ea		      nop
     17  20b4					      REPEND
     18  20b5		       ea		      nop
     17  20b5					      REPEND
     18  20b6		       ea		      nop
     17  20b6					      REPEND
     18  20b7		       ea		      nop
     17  20b7					      REPEND
     18  20b8		       ea		      nop
     17  20b8					      REPEND
     18  20b9		       ea		      nop
     17  20b9					      REPEND
     18  20ba		       ea		      nop
     17  20ba					      REPEND
     18  20bb		       ea		      nop
     17  20bb					      REPEND
     18  20bc		       ea		      nop
     17  20bc					      REPEND
     18  20bd		       ea		      nop
     17  20bd					      REPEND
     18  20be		       ea		      nop
     17  20be					      REPEND
     18  20bf		       ea		      nop
     17  20bf					      REPEND
     18  20c0		       ea		      nop
     17  20c0					      REPEND
     18  20c1		       ea		      nop
     19  20c2					      REPEND
     45  20c2		       85 10		      sta	RESP0
      0  20c4					      sleep	14
      1  20c4				   .CYCLES    SET	14
      2  20c4
      3  20c4				  -	      IF	.CYCLES < 2
      4  20c4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  20c4				  -	      ERR
      6  20c4					      ENDIF
      7  20c4
      8  20c4				  -	      IF	.CYCLES & 1
      9  20c4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  20c4				  -	      nop	0
     11  20c4				  -	      ELSE
     12  20c4				  -	      bit	VSYNC
     13  20c4				  -	      ENDIF
     14  20c4				  -.CYCLES    SET	.CYCLES - 3
     15  20c4					      ENDIF
     16  20c4
     17  20c4					      REPEAT	.CYCLES / 2
     18  20c4		       ea		      nop
     17  20c4					      REPEND
     18  20c5		       ea		      nop
     17  20c5					      REPEND
     18  20c6		       ea		      nop
     17  20c6					      REPEND
     18  20c7		       ea		      nop
     17  20c7					      REPEND
     18  20c8		       ea		      nop
     17  20c8					      REPEND
     18  20c9		       ea		      nop
     17  20c9					      REPEND
     18  20ca		       ea		      nop
     19  20cb					      REPEND
     47  20cb		       85 11		      sta	RESP1
     48  20cd		       85 02		      sta	WSYNC
     49  20cf		       85 2a		      sta	HMOVE
     50  20d1
     51  20d1		       85 02		      sta	WSYNC
     52  20d3		       85 2b		      sta	HMCLR
     53  20d5		       85 02		      sta	WSYNC
     54  20d7
      0  20d7					      sleep	4
      1  20d7				   .CYCLES    SET	4
      2  20d7
      3  20d7				  -	      IF	.CYCLES < 2
      4  20d7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  20d7				  -	      ERR
      6  20d7					      ENDIF
      7  20d7
      8  20d7				  -	      IF	.CYCLES & 1
      9  20d7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  20d7				  -	      nop	0
     11  20d7				  -	      ELSE
     12  20d7				  -	      bit	VSYNC
     13  20d7				  -	      ENDIF
     14  20d7				  -.CYCLES    SET	.CYCLES - 3
     15  20d7					      ENDIF
     16  20d7
     17  20d7					      REPEAT	.CYCLES / 2
     18  20d7		       ea		      nop
     17  20d7					      REPEND
     18  20d8		       ea		      nop
     19  20d9					      REPEND
     56  20d9		       4c 00 b1 	      jmp	pfline_96x2_2_frame0
     57  20dc							;align so our branch doesn't unexpectedly cross a page...
     58  20dc					      if	>. != >[.+$70]
     59  2100		       00 00 00 00*	      align	256
     60  2100					      endif
     61  2100
     62  2100				   pfline_96x2_2_frame0
     63  2100		       a9 80		      lda	#$80	;2
     64  2102		       85 20		      sta	HMP0	;3
     65  2104		       85 21		      sta	HMP1	;3
     66  2106
     67  2106		       b9 a0 b5 	      lda	bmp_96x2_2_06,y	;4
     68  2109		       85 1c		      sta	GRP1	;3
     69  210b
     70  210b		       b9 af b4 	      lda	bmp_96x2_2_00,y
     71  210e		       85 1b		      sta	GRP0
     72  2110		       b9 00 b5 	      lda	bmp_96x2_2_02,y
     73  2113		       85 1b		      sta	GRP0
     74  2115		       b9 50 b5 	      lda	bmp_96x2_2_04,y
     75  2118		       85 1b		      sta	GRP0
     76  211a
      0  211a					      sleep	2
      1  211a				   .CYCLES    SET	2
      2  211a
      3  211a				  -	      IF	.CYCLES < 2
      4  211a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  211a				  -	      ERR
      6  211a					      ENDIF
      7  211a
      8  211a				  -	      IF	.CYCLES & 1
      9  211a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  211a				  -	      nop	0
     11  211a				  -	      ELSE
     12  211a				  -	      bit	VSYNC
     13  211a				  -	      ENDIF
     14  211a				  -.CYCLES    SET	.CYCLES - 3
     15  211a					      ENDIF
     16  211a
     17  211a					      REPEAT	.CYCLES / 2
     18  211a		       ea		      nop
     19  211b					      REPEND
     78  211b
     79  211b		       b9 00 b6 	      lda	bmp_96x2_2_08,y
     80  211e		       85 1c		      sta	GRP1
     81  2120		       b9 50 b6 	      lda	bmp_96x2_2_10,y
     82  2123		       85 1c		      sta	GRP1
     83  2125
     84  2125		       b9 d7 b4 	      lda	bmp_96x2_2_01,y
     85  2128		       85 1b		      sta	GRP0
     86  212a
      0  212a					      sleep	8
      1  212a				   .CYCLES    SET	8
      2  212a
      3  212a				  -	      IF	.CYCLES < 2
      4  212a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  212a				  -	      ERR
      6  212a					      ENDIF
      7  212a
      8  212a				  -	      IF	.CYCLES & 1
      9  212a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  212a				  -	      nop	0
     11  212a				  -	      ELSE
     12  212a				  -	      bit	VSYNC
     13  212a				  -	      ENDIF
     14  212a				  -.CYCLES    SET	.CYCLES - 3
     15  212a					      ENDIF
     16  212a
     17  212a					      REPEAT	.CYCLES / 2
     18  212a		       ea		      nop
     17  212a					      REPEND
     18  212b		       ea		      nop
     17  212b					      REPEND
     18  212c		       ea		      nop
     17  212c					      REPEND
     18  212d		       ea		      nop
     19  212e					      REPEND
     88  212e
     89  212e							;sta WSYNC	;=0
     90  212e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2130
     92  2130		       b9 86 b4 	      lda	bmp_96x2_2_colors-1,y	;4 - get the title color early and store it for later
     93  2133				  -	      ifconst	bmp_96x2_2_fade
     94  2133				  -	      and	bmp_96x2_2_fade
     95  2133					      else
      0  2133					      sleep	3
      1  2133				   .CYCLES    SET	3
      2  2133
      3  2133				  -	      IF	.CYCLES < 2
      4  2133				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2133				  -	      ERR
      6  2133					      ENDIF
      7  2133
      8  2133					      IF	.CYCLES & 1
      9  2133					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2133		       04 00		      nop	0
     11  2135				  -	      ELSE
     12  2135				  -	      bit	VSYNC
     13  2135					      ENDIF
     14  2135				   .CYCLES    SET	.CYCLES - 3
     15  2135					      ENDIF
     16  2135
     17  2135				  -	      REPEAT	.CYCLES / 2
     18  2135				  -	      nop
     19  2135					      REPEND
     97  2135					      endif
     98  2135		       aa		      tax
     99  2136
    100  2136		       a9 00		      lda	#0	;2
    101  2138		       85 20		      sta	HMP0	;3
    102  213a		       85 21		      sta	HMP1	;3
    103  213c
      0  213c					      sleep	7
      1  213c				   .CYCLES    SET	7
      2  213c
      3  213c				  -	      IF	.CYCLES < 2
      4  213c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  213c				  -	      ERR
      6  213c					      ENDIF
      7  213c
      8  213c					      IF	.CYCLES & 1
      9  213c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  213c		       04 00		      nop	0
     11  213e				  -	      ELSE
     12  213e				  -	      bit	VSYNC
     13  213e					      ENDIF
     14  213e				   .CYCLES    SET	.CYCLES - 3
     15  213e					      ENDIF
     16  213e
     17  213e					      REPEAT	.CYCLES / 2
     18  213e		       ea		      nop
     17  213e					      REPEND
     18  213f		       ea		      nop
     19  2140					      REPEND
    105  2140
    106  2140		       b9 c8 b5 	      lda	bmp_96x2_2_07,y
    107  2143		       85 1c		      sta	GRP1
    108  2145
    109  2145		       b9 28 b5 	      lda	bmp_96x2_2_03,y	;5
    110  2148		       85 1b		      sta	GRP0	;3 =  8
    111  214a		       b9 78 b5 	      lda	bmp_96x2_2_05,y	;5
    112  214d		       85 1b		      sta	GRP0	;3 =  8
    113  214f
      0  214f					      sleep	2
      1  214f				   .CYCLES    SET	2
      2  214f
      3  214f				  -	      IF	.CYCLES < 2
      4  214f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  214f				  -	      ERR
      6  214f					      ENDIF
      7  214f
      8  214f				  -	      IF	.CYCLES & 1
      9  214f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  214f				  -	      nop	0
     11  214f				  -	      ELSE
     12  214f				  -	      bit	VSYNC
     13  214f				  -	      ENDIF
     14  214f				  -.CYCLES    SET	.CYCLES - 3
     15  214f					      ENDIF
     16  214f
     17  214f					      REPEAT	.CYCLES / 2
     18  214f		       ea		      nop
     19  2150					      REPEND
    115  2150
    116  2150		       b9 28 b6 	      lda	bmp_96x2_2_09,y	;5
    117  2153		       85 1c		      sta	GRP1	;3 =  8
    118  2155		       b9 78 b6 	      lda	bmp_96x2_2_11,y	;5
    119  2158		       85 1c		      sta	GRP1	;3 =  8
    120  215a
      0  215a					      sleep	2
      1  215a				   .CYCLES    SET	2
      2  215a
      3  215a				  -	      IF	.CYCLES < 2
      4  215a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215a				  -	      ERR
      6  215a					      ENDIF
      7  215a
      8  215a				  -	      IF	.CYCLES & 1
      9  215a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215a				  -	      nop	0
     11  215a				  -	      ELSE
     12  215a				  -	      bit	VSYNC
     13  215a				  -	      ENDIF
     14  215a				  -.CYCLES    SET	.CYCLES - 3
     15  215a					      ENDIF
     16  215a
     17  215a					      REPEAT	.CYCLES / 2
     18  215a		       ea		      nop
     19  215b					      REPEND
    122  215b		       86 07		      stx	COLUP1
    123  215d		       86 06		      stx	COLUP0
    124  215f
    125  215f
    126  215f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  2161					      sleep	2
      1  2161				   .CYCLES    SET	2
      2  2161
      3  2161				  -	      IF	.CYCLES < 2
      4  2161				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2161				  -	      ERR
      6  2161					      ENDIF
      7  2161
      8  2161				  -	      IF	.CYCLES & 1
      9  2161				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2161				  -	      nop	0
     11  2161				  -	      ELSE
     12  2161				  -	      bit	VSYNC
     13  2161				  -	      ENDIF
     14  2161				  -.CYCLES    SET	.CYCLES - 3
     15  2161					      ENDIF
     16  2161
     17  2161					      REPEAT	.CYCLES / 2
     18  2161		       ea		      nop
     19  2162					      REPEND
    128  2162		       88		      dey
    129  2163
    130  2163		       c4 9c		      cpy	temp1	;3
    131  2165		       d0 99		      bne	pfline_96x2_2_frame0	;2/3
    132  2167
    133  2167				   pf96x2_2_0codeend
    134  2167							;echo "critical code #1 in 96x2_2 is ",(pf96x2_2_0codeend-pfline_96x2_2_frame0), " bytes long."
    135  2167
    136  2167		       a9 00		      lda	#0
    137  2169		       85 1b		      sta	GRP0
    138  216b		       85 1c		      sta	GRP1
    139  216d		       4c 6e b2 	      jmp	pfdone_96x2_2
    140  2170
    141  2170
    142  2170				   pf96x2_2_frame1
    143  2170
    144  2170							;postion P0 and P1
    145  2170		       85 02		      sta	WSYNC
    146  2172		       a9 20		      lda	#%00100000
    147  2174		       85 20		      sta	HMP0
    148  2176		       a9 00		      lda	#0
    149  2178		       a9 f0		      lda	#%11110000
    150  217a		       85 21		      sta	HMP1
    151  217c		       85 02		      sta	WSYNC
      0  217e					      sleep	32
      1  217e				   .CYCLES    SET	32
      2  217e
      3  217e				  -	      IF	.CYCLES < 2
      4  217e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217e				  -	      ERR
      6  217e					      ENDIF
      7  217e
      8  217e				  -	      IF	.CYCLES & 1
      9  217e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  217e				  -	      nop	0
     11  217e				  -	      ELSE
     12  217e				  -	      bit	VSYNC
     13  217e				  -	      ENDIF
     14  217e				  -.CYCLES    SET	.CYCLES - 3
     15  217e					      ENDIF
     16  217e
     17  217e					      REPEAT	.CYCLES / 2
     18  217e		       ea		      nop
     17  217e					      REPEND
     18  217f		       ea		      nop
     17  217f					      REPEND
     18  2180		       ea		      nop
     17  2180					      REPEND
     18  2181		       ea		      nop
     17  2181					      REPEND
     18  2182		       ea		      nop
     17  2182					      REPEND
     18  2183		       ea		      nop
     17  2183					      REPEND
     18  2184		       ea		      nop
     17  2184					      REPEND
     18  2185		       ea		      nop
     17  2185					      REPEND
     18  2186		       ea		      nop
     17  2186					      REPEND
     18  2187		       ea		      nop
     17  2187					      REPEND
     18  2188		       ea		      nop
     17  2188					      REPEND
     18  2189		       ea		      nop
     17  2189					      REPEND
     18  218a		       ea		      nop
     17  218a					      REPEND
     18  218b		       ea		      nop
     17  218b					      REPEND
     18  218c		       ea		      nop
     17  218c					      REPEND
     18  218d		       ea		      nop
     19  218e					      REPEND
    153  218e		       85 10		      sta	RESP0
      0  2190					      sleep	12
      1  2190				   .CYCLES    SET	12
      2  2190
      3  2190				  -	      IF	.CYCLES < 2
      4  2190				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2190				  -	      ERR
      6  2190					      ENDIF
      7  2190
      8  2190				  -	      IF	.CYCLES & 1
      9  2190				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2190				  -	      nop	0
     11  2190				  -	      ELSE
     12  2190				  -	      bit	VSYNC
     13  2190				  -	      ENDIF
     14  2190				  -.CYCLES    SET	.CYCLES - 3
     15  2190					      ENDIF
     16  2190
     17  2190					      REPEAT	.CYCLES / 2
     18  2190		       ea		      nop
     17  2190					      REPEND
     18  2191		       ea		      nop
     17  2191					      REPEND
     18  2192		       ea		      nop
     17  2192					      REPEND
     18  2193		       ea		      nop
     17  2193					      REPEND
     18  2194		       ea		      nop
     17  2194					      REPEND
     18  2195		       ea		      nop
     19  2196					      REPEND
    155  2196		       85 11		      sta	RESP1
    156  2198		       85 02		      sta	WSYNC
    157  219a		       85 2a		      sta	HMOVE
    158  219c
    159  219c		       85 02		      sta	WSYNC
    160  219e		       85 2b		      sta	HMCLR
    161  21a0
    162  21a0
    163  21a0
    164  21a0		       85 02		      sta	WSYNC
      0  21a2					      sleep	3
      1  21a2				   .CYCLES    SET	3
      2  21a2
      3  21a2				  -	      IF	.CYCLES < 2
      4  21a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21a2				  -	      ERR
      6  21a2					      ENDIF
      7  21a2
      8  21a2					      IF	.CYCLES & 1
      9  21a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  21a2		       04 00		      nop	0
     11  21a4				  -	      ELSE
     12  21a4				  -	      bit	VSYNC
     13  21a4					      ENDIF
     14  21a4				   .CYCLES    SET	.CYCLES - 3
     15  21a4					      ENDIF
     16  21a4
     17  21a4				  -	      REPEAT	.CYCLES / 2
     18  21a4				  -	      nop
     19  21a4					      REPEND
    166  21a4		       4c 00 b2 	      jmp	pfline_96x2_2_frame1
    167  21a7
    168  21a7							;align so our branch doesn't unexpectedly cross a page...
    169  21a7					      if	>. != >[.+$70]
    170  2200		       00 00 00 00*	      align	256
    171  2200					      endif
    172  2200
    173  2200				   pfline_96x2_2_frame1
    174  2200
    175  2200		       85 2a		      sta	HMOVE
    176  2202
    177  2202		       b9 c8 b5 	      lda	bmp_96x2_2_07,y	;4
    178  2205		       85 1c		      sta	GRP1	;3
    179  2207
    180  2207		       a9 00		      lda	#$0	;2
    181  2209		       85 20		      sta	HMP0	;3
    182  220b		       85 21		      sta	HMP1	;3
    183  220d
    184  220d		       b9 d7 b4 	      lda	bmp_96x2_2_01,y
    185  2210		       8d 1b 00 	      sta.w	GRP0
    186  2213		       b9 28 b5 	      lda	bmp_96x2_2_03,y
    187  2216		       85 1b		      sta	GRP0
    188  2218		       b9 78 b5 	      lda	bmp_96x2_2_05,y
    189  221b		       85 1b		      sta	GRP0
    190  221d
      0  221d					      sleep	2
      1  221d				   .CYCLES    SET	2
      2  221d
      3  221d				  -	      IF	.CYCLES < 2
      4  221d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  221d				  -	      ERR
      6  221d					      ENDIF
      7  221d
      8  221d				  -	      IF	.CYCLES & 1
      9  221d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  221d				  -	      nop	0
     11  221d				  -	      ELSE
     12  221d				  -	      bit	VSYNC
     13  221d				  -	      ENDIF
     14  221d				  -.CYCLES    SET	.CYCLES - 3
     15  221d					      ENDIF
     16  221d
     17  221d					      REPEAT	.CYCLES / 2
     18  221d		       ea		      nop
     19  221e					      REPEND
    192  221e
    193  221e		       b9 28 b6 	      lda	bmp_96x2_2_09,y
    194  2221		       85 1c		      sta	GRP1
    195  2223		       b9 78 b6 	      lda	bmp_96x2_2_11,y
    196  2226		       85 1c		      sta	GRP1
    197  2228
    198  2228		       b9 af b4 	      lda	bmp_96x2_2_00,y
    199  222b		       85 1b		      sta	GRP0
    200  222d
    201  222d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  2230
    203  2230							;sta WSYNC	;=0 -----------------------------------------
    204  2230
    205  2230		       b9 a0 b5 	      lda	bmp_96x2_2_06,y
    206  2233		       85 1c		      sta	GRP1
    207  2235
      0  2235					      sleep	8
      1  2235				   .CYCLES    SET	8
      2  2235
      3  2235				  -	      IF	.CYCLES < 2
      4  2235				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2235				  -	      ERR
      6  2235					      ENDIF
      7  2235
      8  2235				  -	      IF	.CYCLES & 1
      9  2235				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2235				  -	      nop	0
     11  2235				  -	      ELSE
     12  2235				  -	      bit	VSYNC
     13  2235				  -	      ENDIF
     14  2235				  -.CYCLES    SET	.CYCLES - 3
     15  2235					      ENDIF
     16  2235
     17  2235					      REPEAT	.CYCLES / 2
     18  2235		       ea		      nop
     17  2235					      REPEND
     18  2236		       ea		      nop
     17  2236					      REPEND
     18  2237		       ea		      nop
     17  2237					      REPEND
     18  2238		       ea		      nop
     19  2239					      REPEND
    209  2239
    210  2239		       b9 86 b4 	      lda	bmp_96x2_2_colors-1,y	;get the title color early and store it for later
    211  223c		       aa		      tax		;2
    212  223d
      0  223d					      sleep	3
      1  223d				   .CYCLES    SET	3
      2  223d
      3  223d				  -	      IF	.CYCLES < 2
      4  223d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  223d				  -	      ERR
      6  223d					      ENDIF
      7  223d
      8  223d					      IF	.CYCLES & 1
      9  223d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  223d		       04 00		      nop	0
     11  223f				  -	      ELSE
     12  223f				  -	      bit	VSYNC
     13  223f					      ENDIF
     14  223f				   .CYCLES    SET	.CYCLES - 3
     15  223f					      ENDIF
     16  223f
     17  223f				  -	      REPEAT	.CYCLES / 2
     18  223f				  -	      nop
     19  223f					      REPEND
    214  223f
    215  223f		       a9 80		      lda	#$80	;2
    216  2241		       85 20		      sta	HMP0	;3
    217  2243		       85 21		      sta	HMP1	;3
    218  2245
    219  2245
    220  2245		       b9 00 b5 	      lda	bmp_96x2_2_02,y	;5
    221  2248		       85 1b		      sta	GRP0	;3 =  8
    222  224a
    223  224a		       b9 50 b5 	      lda	bmp_96x2_2_04,y	;5
    224  224d		       85 1b		      sta	GRP0	;3 =  8
    225  224f
      0  224f					      sleep	2
      1  224f				   .CYCLES    SET	2
      2  224f
      3  224f				  -	      IF	.CYCLES < 2
      4  224f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224f				  -	      ERR
      6  224f					      ENDIF
      7  224f
      8  224f				  -	      IF	.CYCLES & 1
      9  224f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  224f				  -	      nop	0
     11  224f				  -	      ELSE
     12  224f				  -	      bit	VSYNC
     13  224f				  -	      ENDIF
     14  224f				  -.CYCLES    SET	.CYCLES - 3
     15  224f					      ENDIF
     16  224f
     17  224f					      REPEAT	.CYCLES / 2
     18  224f		       ea		      nop
     19  2250					      REPEND
    227  2250
    228  2250		       b9 00 b6 	      lda	bmp_96x2_2_08,y	;5
    229  2253		       85 1c		      sta	GRP1	;3 =  8
    230  2255
    231  2255		       b9 50 b6 	      lda	bmp_96x2_2_10,y	;5
    232  2258		       85 1c		      sta	GRP1	;3 =  8
    233  225a
      0  225a					      sleep	4
      1  225a				   .CYCLES    SET	4
      2  225a
      3  225a				  -	      IF	.CYCLES < 2
      4  225a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  225a				  -	      ERR
      6  225a					      ENDIF
      7  225a
      8  225a				  -	      IF	.CYCLES & 1
      9  225a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  225a				  -	      nop	0
     11  225a				  -	      ELSE
     12  225a				  -	      bit	VSYNC
     13  225a				  -	      ENDIF
     14  225a				  -.CYCLES    SET	.CYCLES - 3
     15  225a					      ENDIF
     16  225a
     17  225a					      REPEAT	.CYCLES / 2
     18  225a		       ea		      nop
     17  225a					      REPEND
     18  225b		       ea		      nop
     19  225c					      REPEND
    235  225c
    236  225c		       88		      dey
    237  225d
    238  225d		       8a		      txa
    239  225e				  -	      ifconst	bmp_96x2_2_fade
    240  225e				  -	      and	bmp_96x2_2_fade
    241  225e					      else
      0  225e					      sleep	3
      1  225e				   .CYCLES    SET	3
      2  225e
      3  225e				  -	      IF	.CYCLES < 2
      4  225e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  225e				  -	      ERR
      6  225e					      ENDIF
      7  225e
      8  225e					      IF	.CYCLES & 1
      9  225e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  225e		       04 00		      nop	0
     11  2260				  -	      ELSE
     12  2260				  -	      bit	VSYNC
     13  2260					      ENDIF
     14  2260				   .CYCLES    SET	.CYCLES - 3
     15  2260					      ENDIF
     16  2260
     17  2260				  -	      REPEAT	.CYCLES / 2
     18  2260				  -	      nop
     19  2260					      REPEND
    243  2260					      endif
    244  2260		       85 07		      sta	COLUP1	;3
    245  2262		       85 06		      sta	COLUP0	;3
    246  2264
    247  2264		       c4 9c		      cpy	temp1	;2
    248  2266		       d0 98		      bne	pfline_96x2_2_frame1	;2/3
    249  2268
    250  2268				   pf96x2_2_1codeend
    251  2268							;echo "critical code #2 in 96x2_2 is ",(pf96x2_2_1codeend-pfline_96x2_2_frame1), " bytes long."
    252  2268
    253  2268		       a9 00		      lda	#0
    254  226a		       85 1b		      sta	GRP0
    255  226c		       85 1c		      sta	GRP1
    256  226e
    257  226e				   pfdone_96x2_2
    258  226e		       85 02		      sta	WSYNC	; debug
    259  2270
    260  2270		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    153  2271					      endif		;mk_96x2_2_on
    154  2271
    155  2271					      ifconst	mk_96x2_3_on
------- FILE titlescreen/asm/96x2_3_kernel.asm LEVEL 3 PASS 2
      0  2271					      include	"titlescreen/asm/96x2_3_kernel.asm"
      1  2271				   draw_bmp_96x2_3
      2  2271
      3  2271				  -	      ifconst	bmp_96x2_3_index
      4  2271				  -	      lda	#(bmp_96x2_3_height-1)
      5  2271				  -	      sec
      6  2271				  -	      sbc	bmp_96x2_3_index
      7  2271				  -	      tay
      8  2271				  -	      sbc	#bmp_96x2_3_window
      9  2271				  -	      sta	temp1
     10  2271					      else
     11  2271		       a0 13		      ldy	#(bmp_96x2_3_window-1)
     12  2273		       a9 ff		      lda	#255
     13  2275		       85 9c		      sta	temp1
     14  2277					      endif
     15  2277
     16  2277		       a9 03		      lda	#3
     17  2279		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  227b		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  227d		       a9 00		      lda	#0
     20  227f
     21  227f		       b9 a1 b6 	      lda	bmp_96x2_3_colors,y	;4
     22  2282				  -	      ifconst	bmp_96x2_3_fade
     23  2282				  -	      and	bmp_96x2_3_fade
     24  2282					      endif
     25  2282		       85 06		      sta	COLUP0	;3
     26  2284		       85 07		      sta	COLUP1	;3
     27  2286		       85 2b		      sta	HMCLR	;3
     28  2288
     29  2288		       a5 82		      lda	titleframe
     30  228a		       29 01		      and	#1
     31  228c		       f0 03		      beq	jmp_pf96x2_3_frame0
     32  228e		       4c 70 b3 	      jmp	pf96x2_3_frame1
     33  2291				   jmp_pf96x2_3_frame0
     34  2291		       4c 94 b2 	      jmp	pf96x2_3_frame0
     35  2294
     36  2294				   pf96x2_3_frame0
     37  2294							;postion P0 and P1
     38  2294		       85 02		      sta	WSYNC
     39  2296		       a9 e0		      lda	#%11100000
     40  2298		       85 20		      sta	HMP0
     41  229a		       a9 10		      lda	#%00010000
     42  229c		       85 21		      sta	HMP1
     43  229e		       85 02		      sta	WSYNC
      0  22a0					      sleep	28
      1  22a0				   .CYCLES    SET	28
      2  22a0
      3  22a0				  -	      IF	.CYCLES < 2
      4  22a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a0				  -	      ERR
      6  22a0					      ENDIF
      7  22a0
      8  22a0				  -	      IF	.CYCLES & 1
      9  22a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a0				  -	      nop	0
     11  22a0				  -	      ELSE
     12  22a0				  -	      bit	VSYNC
     13  22a0				  -	      ENDIF
     14  22a0				  -.CYCLES    SET	.CYCLES - 3
     15  22a0					      ENDIF
     16  22a0
     17  22a0					      REPEAT	.CYCLES / 2
     18  22a0		       ea		      nop
     17  22a0					      REPEND
     18  22a1		       ea		      nop
     17  22a1					      REPEND
     18  22a2		       ea		      nop
     17  22a2					      REPEND
     18  22a3		       ea		      nop
     17  22a3					      REPEND
     18  22a4		       ea		      nop
     17  22a4					      REPEND
     18  22a5		       ea		      nop
     17  22a5					      REPEND
     18  22a6		       ea		      nop
     17  22a6					      REPEND
     18  22a7		       ea		      nop
     17  22a7					      REPEND
     18  22a8		       ea		      nop
     17  22a8					      REPEND
     18  22a9		       ea		      nop
     17  22a9					      REPEND
     18  22aa		       ea		      nop
     17  22aa					      REPEND
     18  22ab		       ea		      nop
     17  22ab					      REPEND
     18  22ac		       ea		      nop
     17  22ac					      REPEND
     18  22ad		       ea		      nop
     19  22ae					      REPEND
     45  22ae		       85 10		      sta	RESP0
      0  22b0					      sleep	14
      1  22b0				   .CYCLES    SET	14
      2  22b0
      3  22b0				  -	      IF	.CYCLES < 2
      4  22b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22b0				  -	      ERR
      6  22b0					      ENDIF
      7  22b0
      8  22b0				  -	      IF	.CYCLES & 1
      9  22b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22b0				  -	      nop	0
     11  22b0				  -	      ELSE
     12  22b0				  -	      bit	VSYNC
     13  22b0				  -	      ENDIF
     14  22b0				  -.CYCLES    SET	.CYCLES - 3
     15  22b0					      ENDIF
     16  22b0
     17  22b0					      REPEAT	.CYCLES / 2
     18  22b0		       ea		      nop
     17  22b0					      REPEND
     18  22b1		       ea		      nop
     17  22b1					      REPEND
     18  22b2		       ea		      nop
     17  22b2					      REPEND
     18  22b3		       ea		      nop
     17  22b3					      REPEND
     18  22b4		       ea		      nop
     17  22b4					      REPEND
     18  22b5		       ea		      nop
     17  22b5					      REPEND
     18  22b6		       ea		      nop
     19  22b7					      REPEND
     47  22b7		       85 11		      sta	RESP1
     48  22b9		       85 02		      sta	WSYNC
     49  22bb		       85 2a		      sta	HMOVE
     50  22bd
     51  22bd		       85 02		      sta	WSYNC
     52  22bf		       85 2b		      sta	HMCLR
     53  22c1		       85 02		      sta	WSYNC
     54  22c3
      0  22c3					      sleep	4
      1  22c3				   .CYCLES    SET	4
      2  22c3
      3  22c3				  -	      IF	.CYCLES < 2
      4  22c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22c3				  -	      ERR
      6  22c3					      ENDIF
      7  22c3
      8  22c3				  -	      IF	.CYCLES & 1
      9  22c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22c3				  -	      nop	0
     11  22c3				  -	      ELSE
     12  22c3				  -	      bit	VSYNC
     13  22c3				  -	      ENDIF
     14  22c3				  -.CYCLES    SET	.CYCLES - 3
     15  22c3					      ENDIF
     16  22c3
     17  22c3					      REPEAT	.CYCLES / 2
     18  22c3		       ea		      nop
     17  22c3					      REPEND
     18  22c4		       ea		      nop
     19  22c5					      REPEND
     56  22c5		       4c 00 b3 	      jmp	pfline_96x2_3_frame0
     57  22c8							;align so our branch doesn't unexpectedly cross a page...
     58  22c8					      if	>. != >[.+$70]
     59  2300		       00 00 00 00*	      align	256
     60  2300					      endif
     61  2300
     62  2300				   pfline_96x2_3_frame0
     63  2300		       a9 80		      lda	#$80	;2
     64  2302		       85 20		      sta	HMP0	;3
     65  2304		       85 21		      sta	HMP1	;3
     66  2306
     67  2306		       b9 3c b7 	      lda	bmp_96x2_3_06,y	;4
     68  2309		       85 1c		      sta	GRP1	;3
     69  230b
     70  230b		       b9 b5 b6 	      lda	bmp_96x2_3_00,y
     71  230e		       85 1b		      sta	GRP0
     72  2310		       b9 dd b6 	      lda	bmp_96x2_3_02,y
     73  2313		       85 1b		      sta	GRP0
     74  2315		       b9 14 b7 	      lda	bmp_96x2_3_04,y
     75  2318		       85 1b		      sta	GRP0
     76  231a
      0  231a					      sleep	2
      1  231a				   .CYCLES    SET	2
      2  231a
      3  231a				  -	      IF	.CYCLES < 2
      4  231a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  231a				  -	      ERR
      6  231a					      ENDIF
      7  231a
      8  231a				  -	      IF	.CYCLES & 1
      9  231a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  231a				  -	      nop	0
     11  231a				  -	      ELSE
     12  231a				  -	      bit	VSYNC
     13  231a				  -	      ENDIF
     14  231a				  -.CYCLES    SET	.CYCLES - 3
     15  231a					      ENDIF
     16  231a
     17  231a					      REPEAT	.CYCLES / 2
     18  231a		       ea		      nop
     19  231b					      REPEND
     78  231b
     79  231b		       b9 64 b7 	      lda	bmp_96x2_3_08,y
     80  231e		       85 1c		      sta	GRP1
     81  2320		       b9 8c b7 	      lda	bmp_96x2_3_10,y
     82  2323		       85 1c		      sta	GRP1
     83  2325
     84  2325		       b9 c9 b6 	      lda	bmp_96x2_3_01,y
     85  2328		       85 1b		      sta	GRP0
     86  232a
      0  232a					      sleep	8
      1  232a				   .CYCLES    SET	8
      2  232a
      3  232a				  -	      IF	.CYCLES < 2
      4  232a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  232a				  -	      ERR
      6  232a					      ENDIF
      7  232a
      8  232a				  -	      IF	.CYCLES & 1
      9  232a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  232a				  -	      nop	0
     11  232a				  -	      ELSE
     12  232a				  -	      bit	VSYNC
     13  232a				  -	      ENDIF
     14  232a				  -.CYCLES    SET	.CYCLES - 3
     15  232a					      ENDIF
     16  232a
     17  232a					      REPEAT	.CYCLES / 2
     18  232a		       ea		      nop
     17  232a					      REPEND
     18  232b		       ea		      nop
     17  232b					      REPEND
     18  232c		       ea		      nop
     17  232c					      REPEND
     18  232d		       ea		      nop
     19  232e					      REPEND
     88  232e
     89  232e							;sta WSYNC	;=0
     90  232e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2330
     92  2330		       b9 a0 b6 	      lda	bmp_96x2_3_colors-1,y	;4 - get the title color early and store it for later
     93  2333				  -	      ifconst	bmp_96x2_3_fade
     94  2333				  -	      and	bmp_96x2_3_fade
     95  2333					      else
      0  2333					      sleep	3
      1  2333				   .CYCLES    SET	3
      2  2333
      3  2333				  -	      IF	.CYCLES < 2
      4  2333				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2333				  -	      ERR
      6  2333					      ENDIF
      7  2333
      8  2333					      IF	.CYCLES & 1
      9  2333					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2333		       04 00		      nop	0
     11  2335				  -	      ELSE
     12  2335				  -	      bit	VSYNC
     13  2335					      ENDIF
     14  2335				   .CYCLES    SET	.CYCLES - 3
     15  2335					      ENDIF
     16  2335
     17  2335				  -	      REPEAT	.CYCLES / 2
     18  2335				  -	      nop
     19  2335					      REPEND
     97  2335					      endif
     98  2335		       aa		      tax
     99  2336
    100  2336		       a9 00		      lda	#0	;2
    101  2338		       85 20		      sta	HMP0	;3
    102  233a		       85 21		      sta	HMP1	;3
    103  233c
      0  233c					      sleep	7
      1  233c				   .CYCLES    SET	7
      2  233c
      3  233c				  -	      IF	.CYCLES < 2
      4  233c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  233c				  -	      ERR
      6  233c					      ENDIF
      7  233c
      8  233c					      IF	.CYCLES & 1
      9  233c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  233c		       04 00		      nop	0
     11  233e				  -	      ELSE
     12  233e				  -	      bit	VSYNC
     13  233e					      ENDIF
     14  233e				   .CYCLES    SET	.CYCLES - 3
     15  233e					      ENDIF
     16  233e
     17  233e					      REPEAT	.CYCLES / 2
     18  233e		       ea		      nop
     17  233e					      REPEND
     18  233f		       ea		      nop
     19  2340					      REPEND
    105  2340
    106  2340		       b9 50 b7 	      lda	bmp_96x2_3_07,y
    107  2343		       85 1c		      sta	GRP1
    108  2345
    109  2345		       b9 00 b7 	      lda	bmp_96x2_3_03,y	;5
    110  2348		       85 1b		      sta	GRP0	;3 =  8
    111  234a		       b9 28 b7 	      lda	bmp_96x2_3_05,y	;5
    112  234d		       85 1b		      sta	GRP0	;3 =  8
    113  234f
      0  234f					      sleep	2
      1  234f				   .CYCLES    SET	2
      2  234f
      3  234f				  -	      IF	.CYCLES < 2
      4  234f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  234f				  -	      ERR
      6  234f					      ENDIF
      7  234f
      8  234f				  -	      IF	.CYCLES & 1
      9  234f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  234f				  -	      nop	0
     11  234f				  -	      ELSE
     12  234f				  -	      bit	VSYNC
     13  234f				  -	      ENDIF
     14  234f				  -.CYCLES    SET	.CYCLES - 3
     15  234f					      ENDIF
     16  234f
     17  234f					      REPEAT	.CYCLES / 2
     18  234f		       ea		      nop
     19  2350					      REPEND
    115  2350
    116  2350		       b9 78 b7 	      lda	bmp_96x2_3_09,y	;5
    117  2353		       85 1c		      sta	GRP1	;3 =  8
    118  2355		       b9 a0 b7 	      lda	bmp_96x2_3_11,y	;5
    119  2358		       85 1c		      sta	GRP1	;3 =  8
    120  235a
      0  235a					      sleep	2
      1  235a				   .CYCLES    SET	2
      2  235a
      3  235a				  -	      IF	.CYCLES < 2
      4  235a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  235a				  -	      ERR
      6  235a					      ENDIF
      7  235a
      8  235a				  -	      IF	.CYCLES & 1
      9  235a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  235a				  -	      nop	0
     11  235a				  -	      ELSE
     12  235a				  -	      bit	VSYNC
     13  235a				  -	      ENDIF
     14  235a				  -.CYCLES    SET	.CYCLES - 3
     15  235a					      ENDIF
     16  235a
     17  235a					      REPEAT	.CYCLES / 2
     18  235a		       ea		      nop
     19  235b					      REPEND
    122  235b		       86 07		      stx	COLUP1
    123  235d		       86 06		      stx	COLUP0
    124  235f
    125  235f
    126  235f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  2361					      sleep	2
      1  2361				   .CYCLES    SET	2
      2  2361
      3  2361				  -	      IF	.CYCLES < 2
      4  2361				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2361				  -	      ERR
      6  2361					      ENDIF
      7  2361
      8  2361				  -	      IF	.CYCLES & 1
      9  2361				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2361				  -	      nop	0
     11  2361				  -	      ELSE
     12  2361				  -	      bit	VSYNC
     13  2361				  -	      ENDIF
     14  2361				  -.CYCLES    SET	.CYCLES - 3
     15  2361					      ENDIF
     16  2361
     17  2361					      REPEAT	.CYCLES / 2
     18  2361		       ea		      nop
     19  2362					      REPEND
    128  2362		       88		      dey
    129  2363
    130  2363		       c4 9c		      cpy	temp1	;3
    131  2365		       d0 99		      bne	pfline_96x2_3_frame0	;2/3
    132  2367
    133  2367				   pf96x2_3_0codeend
    134  2367							;echo "critical code #1 in 96x2_3 is ",(pf96x2_3_0codeend-pfline_96x2_3_frame0), " bytes long."
    135  2367
    136  2367		       a9 00		      lda	#0
    137  2369		       85 1b		      sta	GRP0
    138  236b		       85 1c		      sta	GRP1
    139  236d		       4c 6e b4 	      jmp	pfdone_96x2_3
    140  2370
    141  2370
    142  2370				   pf96x2_3_frame1
    143  2370
    144  2370							;postion P0 and P1
    145  2370		       85 02		      sta	WSYNC
    146  2372		       a9 20		      lda	#%00100000
    147  2374		       85 20		      sta	HMP0
    148  2376		       a9 00		      lda	#0
    149  2378		       a9 f0		      lda	#%11110000
    150  237a		       85 21		      sta	HMP1
    151  237c		       85 02		      sta	WSYNC
      0  237e					      sleep	32
      1  237e				   .CYCLES    SET	32
      2  237e
      3  237e				  -	      IF	.CYCLES < 2
      4  237e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  237e				  -	      ERR
      6  237e					      ENDIF
      7  237e
      8  237e				  -	      IF	.CYCLES & 1
      9  237e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  237e				  -	      nop	0
     11  237e				  -	      ELSE
     12  237e				  -	      bit	VSYNC
     13  237e				  -	      ENDIF
     14  237e				  -.CYCLES    SET	.CYCLES - 3
     15  237e					      ENDIF
     16  237e
     17  237e					      REPEAT	.CYCLES / 2
     18  237e		       ea		      nop
     17  237e					      REPEND
     18  237f		       ea		      nop
     17  237f					      REPEND
     18  2380		       ea		      nop
     17  2380					      REPEND
     18  2381		       ea		      nop
     17  2381					      REPEND
     18  2382		       ea		      nop
     17  2382					      REPEND
     18  2383		       ea		      nop
     17  2383					      REPEND
     18  2384		       ea		      nop
     17  2384					      REPEND
     18  2385		       ea		      nop
     17  2385					      REPEND
     18  2386		       ea		      nop
     17  2386					      REPEND
     18  2387		       ea		      nop
     17  2387					      REPEND
     18  2388		       ea		      nop
     17  2388					      REPEND
     18  2389		       ea		      nop
     17  2389					      REPEND
     18  238a		       ea		      nop
     17  238a					      REPEND
     18  238b		       ea		      nop
     17  238b					      REPEND
     18  238c		       ea		      nop
     17  238c					      REPEND
     18  238d		       ea		      nop
     19  238e					      REPEND
    153  238e		       85 10		      sta	RESP0
      0  2390					      sleep	12
      1  2390				   .CYCLES    SET	12
      2  2390
      3  2390				  -	      IF	.CYCLES < 2
      4  2390				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2390				  -	      ERR
      6  2390					      ENDIF
      7  2390
      8  2390				  -	      IF	.CYCLES & 1
      9  2390				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2390				  -	      nop	0
     11  2390				  -	      ELSE
     12  2390				  -	      bit	VSYNC
     13  2390				  -	      ENDIF
     14  2390				  -.CYCLES    SET	.CYCLES - 3
     15  2390					      ENDIF
     16  2390
     17  2390					      REPEAT	.CYCLES / 2
     18  2390		       ea		      nop
     17  2390					      REPEND
     18  2391		       ea		      nop
     17  2391					      REPEND
     18  2392		       ea		      nop
     17  2392					      REPEND
     18  2393		       ea		      nop
     17  2393					      REPEND
     18  2394		       ea		      nop
     17  2394					      REPEND
     18  2395		       ea		      nop
     19  2396					      REPEND
    155  2396		       85 11		      sta	RESP1
    156  2398		       85 02		      sta	WSYNC
    157  239a		       85 2a		      sta	HMOVE
    158  239c
    159  239c		       85 02		      sta	WSYNC
    160  239e		       85 2b		      sta	HMCLR
    161  23a0
    162  23a0
    163  23a0
    164  23a0		       85 02		      sta	WSYNC
      0  23a2					      sleep	3
      1  23a2				   .CYCLES    SET	3
      2  23a2
      3  23a2				  -	      IF	.CYCLES < 2
      4  23a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23a2				  -	      ERR
      6  23a2					      ENDIF
      7  23a2
      8  23a2					      IF	.CYCLES & 1
      9  23a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  23a2		       04 00		      nop	0
     11  23a4				  -	      ELSE
     12  23a4				  -	      bit	VSYNC
     13  23a4					      ENDIF
     14  23a4				   .CYCLES    SET	.CYCLES - 3
     15  23a4					      ENDIF
     16  23a4
     17  23a4				  -	      REPEAT	.CYCLES / 2
     18  23a4				  -	      nop
     19  23a4					      REPEND
    166  23a4		       4c 00 b4 	      jmp	pfline_96x2_3_frame1
    167  23a7
    168  23a7							;align so our branch doesn't unexpectedly cross a page...
    169  23a7					      if	>. != >[.+$70]
    170  2400		       00 00 00 00*	      align	256
    171  2400					      endif
    172  2400
    173  2400				   pfline_96x2_3_frame1
    174  2400
    175  2400		       85 2a		      sta	HMOVE
    176  2402
    177  2402		       b9 50 b7 	      lda	bmp_96x2_3_07,y	;4
    178  2405		       85 1c		      sta	GRP1	;3
    179  2407
    180  2407		       a9 00		      lda	#$0	;2
    181  2409		       85 20		      sta	HMP0	;3
    182  240b		       85 21		      sta	HMP1	;3
    183  240d
    184  240d		       b9 c9 b6 	      lda	bmp_96x2_3_01,y
    185  2410		       8d 1b 00 	      sta.w	GRP0
    186  2413		       b9 00 b7 	      lda	bmp_96x2_3_03,y
    187  2416		       85 1b		      sta	GRP0
    188  2418		       b9 28 b7 	      lda	bmp_96x2_3_05,y
    189  241b		       85 1b		      sta	GRP0
    190  241d
      0  241d					      sleep	2
      1  241d				   .CYCLES    SET	2
      2  241d
      3  241d				  -	      IF	.CYCLES < 2
      4  241d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  241d				  -	      ERR
      6  241d					      ENDIF
      7  241d
      8  241d				  -	      IF	.CYCLES & 1
      9  241d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  241d				  -	      nop	0
     11  241d				  -	      ELSE
     12  241d				  -	      bit	VSYNC
     13  241d				  -	      ENDIF
     14  241d				  -.CYCLES    SET	.CYCLES - 3
     15  241d					      ENDIF
     16  241d
     17  241d					      REPEAT	.CYCLES / 2
     18  241d		       ea		      nop
     19  241e					      REPEND
    192  241e
    193  241e		       b9 78 b7 	      lda	bmp_96x2_3_09,y
    194  2421		       85 1c		      sta	GRP1
    195  2423		       b9 a0 b7 	      lda	bmp_96x2_3_11,y
    196  2426		       85 1c		      sta	GRP1
    197  2428
    198  2428		       b9 b5 b6 	      lda	bmp_96x2_3_00,y
    199  242b		       85 1b		      sta	GRP0
    200  242d
    201  242d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  2430
    203  2430							;sta WSYNC	;=0 -----------------------------------------
    204  2430
    205  2430		       b9 3c b7 	      lda	bmp_96x2_3_06,y
    206  2433		       85 1c		      sta	GRP1
    207  2435
      0  2435					      sleep	8
      1  2435				   .CYCLES    SET	8
      2  2435
      3  2435				  -	      IF	.CYCLES < 2
      4  2435				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2435				  -	      ERR
      6  2435					      ENDIF
      7  2435
      8  2435				  -	      IF	.CYCLES & 1
      9  2435				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2435				  -	      nop	0
     11  2435				  -	      ELSE
     12  2435				  -	      bit	VSYNC
     13  2435				  -	      ENDIF
     14  2435				  -.CYCLES    SET	.CYCLES - 3
     15  2435					      ENDIF
     16  2435
     17  2435					      REPEAT	.CYCLES / 2
     18  2435		       ea		      nop
     17  2435					      REPEND
     18  2436		       ea		      nop
     17  2436					      REPEND
     18  2437		       ea		      nop
     17  2437					      REPEND
     18  2438		       ea		      nop
     19  2439					      REPEND
    209  2439
    210  2439		       b9 a0 b6 	      lda	bmp_96x2_3_colors-1,y	;get the title color early and store it for later
    211  243c		       aa		      tax		;2
    212  243d
      0  243d					      sleep	3
      1  243d				   .CYCLES    SET	3
      2  243d
      3  243d				  -	      IF	.CYCLES < 2
      4  243d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  243d				  -	      ERR
      6  243d					      ENDIF
      7  243d
      8  243d					      IF	.CYCLES & 1
      9  243d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  243d		       04 00		      nop	0
     11  243f				  -	      ELSE
     12  243f				  -	      bit	VSYNC
     13  243f					      ENDIF
     14  243f				   .CYCLES    SET	.CYCLES - 3
     15  243f					      ENDIF
     16  243f
     17  243f				  -	      REPEAT	.CYCLES / 2
     18  243f				  -	      nop
     19  243f					      REPEND
    214  243f
    215  243f		       a9 80		      lda	#$80	;2
    216  2441		       85 20		      sta	HMP0	;3
    217  2443		       85 21		      sta	HMP1	;3
    218  2445
    219  2445
    220  2445		       b9 dd b6 	      lda	bmp_96x2_3_02,y	;5
    221  2448		       85 1b		      sta	GRP0	;3 =  8
    222  244a
    223  244a		       b9 14 b7 	      lda	bmp_96x2_3_04,y	;5
    224  244d		       85 1b		      sta	GRP0	;3 =  8
    225  244f
      0  244f					      sleep	2
      1  244f				   .CYCLES    SET	2
      2  244f
      3  244f				  -	      IF	.CYCLES < 2
      4  244f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  244f				  -	      ERR
      6  244f					      ENDIF
      7  244f
      8  244f				  -	      IF	.CYCLES & 1
      9  244f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  244f				  -	      nop	0
     11  244f				  -	      ELSE
     12  244f				  -	      bit	VSYNC
     13  244f				  -	      ENDIF
     14  244f				  -.CYCLES    SET	.CYCLES - 3
     15  244f					      ENDIF
     16  244f
     17  244f					      REPEAT	.CYCLES / 2
     18  244f		       ea		      nop
     19  2450					      REPEND
    227  2450
    228  2450		       b9 64 b7 	      lda	bmp_96x2_3_08,y	;5
    229  2453		       85 1c		      sta	GRP1	;3 =  8
    230  2455
    231  2455		       b9 8c b7 	      lda	bmp_96x2_3_10,y	;5
    232  2458		       85 1c		      sta	GRP1	;3 =  8
    233  245a
      0  245a					      sleep	4
      1  245a				   .CYCLES    SET	4
      2  245a
      3  245a				  -	      IF	.CYCLES < 2
      4  245a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  245a				  -	      ERR
      6  245a					      ENDIF
      7  245a
      8  245a				  -	      IF	.CYCLES & 1
      9  245a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  245a				  -	      nop	0
     11  245a				  -	      ELSE
     12  245a				  -	      bit	VSYNC
     13  245a				  -	      ENDIF
     14  245a				  -.CYCLES    SET	.CYCLES - 3
     15  245a					      ENDIF
     16  245a
     17  245a					      REPEAT	.CYCLES / 2
     18  245a		       ea		      nop
     17  245a					      REPEND
     18  245b		       ea		      nop
     19  245c					      REPEND
    235  245c
    236  245c		       88		      dey
    237  245d
    238  245d		       8a		      txa
    239  245e				  -	      ifconst	bmp_96x2_3_fade
    240  245e				  -	      and	bmp_96x2_3_fade
    241  245e					      else
      0  245e					      sleep	3
      1  245e				   .CYCLES    SET	3
      2  245e
      3  245e				  -	      IF	.CYCLES < 2
      4  245e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  245e				  -	      ERR
      6  245e					      ENDIF
      7  245e
      8  245e					      IF	.CYCLES & 1
      9  245e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  245e		       04 00		      nop	0
     11  2460				  -	      ELSE
     12  2460				  -	      bit	VSYNC
     13  2460					      ENDIF
     14  2460				   .CYCLES    SET	.CYCLES - 3
     15  2460					      ENDIF
     16  2460
     17  2460				  -	      REPEAT	.CYCLES / 2
     18  2460				  -	      nop
     19  2460					      REPEND
    243  2460					      endif
    244  2460		       85 07		      sta	COLUP1	;3
    245  2462		       85 06		      sta	COLUP0	;3
    246  2464
    247  2464		       c4 9c		      cpy	temp1	;2
    248  2466		       d0 98		      bne	pfline_96x2_3_frame1	;2/3
    249  2468
    250  2468				   pf96x2_3_1codeend
    251  2468							;echo "critical code #2 in 96x2_3 is ",(pf96x2_3_1codeend-pfline_96x2_3_frame1), " bytes long."
    252  2468
    253  2468		       a9 00		      lda	#0
    254  246a		       85 1b		      sta	GRP0
    255  246c		       85 1c		      sta	GRP1
    256  246e
    257  246e				   pfdone_96x2_3
    258  246e		       85 02		      sta	WSYNC	; debug
    259  2470
    260  2470		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    157  2471					      endif		;mk_96x2_3_on
    158  2471
    159  2471				  -	      ifconst	mk_96x2_4_on
    160  2471				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2471					      endif		;mk_96x2_4_on
    162  2471
    163  2471				  -	      ifconst	mk_96x2_5_on
    164  2471				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2471					      endif		;mk_96x2_5_on
    166  2471
    167  2471				  -	      ifconst	mk_96x2_6_on
    168  2471				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2471					      endif		;mk_96x2_6_on
    170  2471
    171  2471				  -	      ifconst	mk_96x2_7_on
    172  2471				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2471					      endif		;mk_96x2_7_on
    174  2471
    175  2471				  -	      ifconst	mk_96x2_8_on
    176  2471				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2471					      endif		;mk_96x2_8_on
    178  2471
    179  2471				  -	      ifconst	mk_score_on
    180  2471				  -	      include	"titlescreen/asm/score_kernel.asm"
    181  2471					      endif		;mk_score_on
    182  2471
    183  2471				  -	      ifconst	mk_gameselect_on
    184  2471				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    185  2471					      endif		;mk_gameselect_on
    186  2471
    187  2471				   PFWAIT
    188  2471		       ad 84 02 	      lda	INTIM
    189  2474		       d0 fb		      bne	PFWAIT
    190  2476		       85 02		      sta	WSYNC
    191  2478
    192  2478				   OVERSCAN
    193  2478				  -	      ifnconst	overscan_time
    194  2478				  -	      lda	#34+128
    195  2478					      else
    196  2478		       a9 a0		      lda	#overscan_time+128-5
    197  247a					      endif
    198  247a		       8d 96 02 	      sta	TIM64T
    199  247d
    200  247d							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  247d				  -	      ifconst	player9height
    202  247d				  -	      ldy	#8
    203  247d				  -	      lda	#0
    204  247d				  -	      sta	player0height
    205  247d				  -.playerheightfixloop
    206  247d				  -	      sta	player1height,y
    207  247d				  -	      ifconst	_NUSIZ1
    208  247d				  -	      sta	_NUSIZ1,y
    209  247d				  -	      endif
    210  247d				  -	      dey
    211  247d				  -	      bpl	.playerheightfixloop
    212  247d					      endif
    213  247d
    214  247d		       a9 c2		      lda	#%11000010
    215  247f		       85 02		      sta	WSYNC
    216  2481		       85 01		      sta	VBLANK
      0  2483					      RETURN
      1  2483				  -	      ifnconst	bankswitch
      2  2483				  -	      rts
      3  2483					      else
      4  2483		       4c dd ff 	      jmp	BS_return
      5  2486					      endif
    218  2486
    219  2486				  -	      ifconst	mk_48x1_1_on
    220  2486				  -	      include	"titlescreen/48x1_1_image.asm"
    221  2486					      endif
    222  2486				  -	      ifconst	mk_48x1_2_on
    223  2486				  -	      include	"titlescreen/48x1_2_image.asm"
    224  2486					      endif
    225  2486				  -	      ifconst	mk_48x1_3_on
    226  2486				  -	      include	"titlescreen/48x1_3_image.asm"
    227  2486					      endif
    228  2486				  -	      ifconst	mk_48x1_4_on
    229  2486				  -	      include	"titlescreen/48x1_4_image.asm"
    230  2486					      endif
    231  2486				  -	      ifconst	mk_48x1_5_on
    232  2486				  -	      include	"titlescreen/48x1_5_image.asm"
    233  2486					      endif
    234  2486				  -	      ifconst	mk_48x1_6_on
    235  2486				  -	      include	"titlescreen/48x1_6_image.asm"
    236  2486					      endif
    237  2486				  -	      ifconst	mk_48x1_7_on
    238  2486				  -	      include	"titlescreen/48x1_7_image.asm"
    239  2486					      endif
    240  2486				  -	      ifconst	mk_48x1_8_on
    241  2486				  -	      include	"titlescreen/48x1_8_image.asm"
    242  2486					      endif
    243  2486
    244  2486
    245  2486				  -	      ifconst	mk_48x2_1_on
    246  2486				  -	      include	"titlescreen/48x2_1_image.asm"
    247  2486					      endif
    248  2486				  -	      ifconst	mk_48x2_2_on
    249  2486				  -	      include	"titlescreen/48x2_2_image.asm"
    250  2486					      endif
    251  2486				  -	      ifconst	mk_48x2_3_on
    252  2486				  -	      include	"titlescreen/48x2_3_image.asm"
    253  2486					      endif
    254  2486				  -	      ifconst	mk_48x2_4_on
    255  2486				  -	      include	"titlescreen/48x2_4_image.asm"
    256  2486					      endif
    257  2486				  -	      ifconst	mk_48x2_5_on
    258  2486				  -	      include	"titlescreen/48x2_5_image.asm"
    259  2486					      endif
    260  2486				  -	      ifconst	mk_48x2_6_on
    261  2486				  -	      include	"titlescreen/48x2_6_image.asm"
    262  2486					      endif
    263  2486				  -	      ifconst	mk_48x2_7_on
    264  2486				  -	      include	"titlescreen/48x2_7_image.asm"
    265  2486					      endif
    266  2486
    267  2486				  -	      ifconst	mk_48x2_8_on
    268  2486				  -	      include	"titlescreen/48x2_8_image.asm"
    269  2486					      endif
    270  2486
    271  2486
    272  2486				  -	      ifconst	mk_96x2_1_on
    273  2486				  -	      include	"titlescreen/96x2_1_image.asm"
    274  2486					      endif
    275  2486					      ifconst	mk_96x2_2_on
------- FILE titlescreen/96x2_2_image.asm LEVEL 3 PASS 2
      0  2486					      include	"titlescreen/96x2_2_image.asm"
      1  2486							;*** The height of the displayed data...
      2  2486		       00 28	   bmp_96x2_2_window =	40
      3  2486
      4  2486							;*** The height of the bitmap data. This can be larger than 
      5  2486							;*** the displayed data height, if you're scrolling or animating 
      6  2486							;*** the data...
      7  2486		       00 28	   bmp_96x2_2_height =	40
      8  2486
      9  2486
     10  2486				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     11  2486				  -	      align	256
     12  2486					      endif
     13  2486		       00		      BYTE.b	$00	; leave this here!
     14  2487
     15  2487
     16  2487							;*** The color of each line in the bitmap, in reverse order...
     17  2487				   bmp_96x2_2_colors
     18  2487		       1e		      .byte.b	$1E
     19  2488		       1e		      .byte.b	$1E
     20  2489		       1e		      .byte.b	$1E
     21  248a		       1e		      .byte.b	$1E
     22  248b		       1e		      .byte.b	$1E
     23  248c		       1e		      .byte.b	$1E
     24  248d		       1e		      .byte.b	$1E
     25  248e		       1e		      .byte.b	$1E
     26  248f		       1e		      .byte.b	$1E
     27  2490		       1e		      .byte.b	$1E
     28  2491		       1e		      .byte.b	$1E
     29  2492		       1e		      .byte.b	$1E
     30  2493		       1e		      .byte.b	$1E
     31  2494		       1e		      .byte.b	$1E
     32  2495		       1e		      .byte.b	$1E
     33  2496		       1e		      .byte.b	$1E
     34  2497		       1e		      .byte.b	$1E
     35  2498		       1e		      .byte.b	$1E
     36  2499		       1e		      .byte.b	$1E
     37  249a		       1e		      .byte.b	$1E
     38  249b		       1e		      .byte.b	$1E
     39  249c		       1e		      .byte.b	$1E
     40  249d		       1e		      .byte.b	$1E
     41  249e		       1e		      .byte.b	$1E
     42  249f		       1e		      .byte.b	$1E
     43  24a0		       1e		      .byte.b	$1E
     44  24a1		       1e		      .byte.b	$1E
     45  24a2		       1e		      .byte.b	$1E
     46  24a3		       1e		      .byte.b	$1E
     47  24a4		       1e		      .byte.b	$1E
     48  24a5		       1e		      .byte.b	$1E
     49  24a6		       1e		      .byte.b	$1E
     50  24a7		       1e		      .byte.b	$1E
     51  24a8		       1e		      .byte.b	$1E
     52  24a9		       1e		      .byte.b	$1E
     53  24aa		       1e		      .byte.b	$1E
     54  24ab		       1e		      .byte.b	$1E
     55  24ac		       1e		      .byte.b	$1E
     56  24ad		       1e		      .byte.b	$1E
     57  24ae		       1e		      .byte.b	$1E
     58  24af
     59  24af
     60  24af				  -	      if	>. != >[.+(bmp_96x2_2_height)]
     61  24af				  -	      align	256
     62  24af					      endif
     63  24af
     64  24af
     65  24af				   bmp_96x2_2_00
     66  24af							; *** replace this block with your bimap_00 data block...
     67  24af		       00		      BYTE.b	%00000000
     68  24b0		       01		      BYTE.b	%00000001
     69  24b1		       01		      BYTE.b	%00000001
     70  24b2		       01		      BYTE.b	%00000001
     71  24b3		       01		      BYTE.b	%00000001
     72  24b4		       01		      BYTE.b	%00000001
     73  24b5		       01		      BYTE.b	%00000001
     74  24b6		       01		      BYTE.b	%00000001
     75  24b7		       01		      BYTE.b	%00000001
     76  24b8		       01		      BYTE.b	%00000001
     77  24b9		       01		      BYTE.b	%00000001
     78  24ba		       00		      BYTE.b	%00000000
     79  24bb		       00		      BYTE.b	%00000000
     80  24bc		       00		      BYTE.b	%00000000
     81  24bd		       00		      BYTE.b	%00000000
     82  24be		       00		      BYTE.b	%00000000
     83  24bf		       00		      BYTE.b	%00000000
     84  24c0		       00		      BYTE.b	%00000000
     85  24c1		       00		      BYTE.b	%00000000
     86  24c2		       00		      BYTE.b	%00000000
     87  24c3		       00		      BYTE.b	%00000000
     88  24c4		       00		      BYTE.b	%00000000
     89  24c5		       00		      BYTE.b	%00000000
     90  24c6		       00		      BYTE.b	%00000000
     91  24c7		       00		      BYTE.b	%00000000
     92  24c8		       00		      BYTE.b	%00000000
     93  24c9		       00		      BYTE.b	%00000000
     94  24ca		       00		      BYTE.b	%00000000
     95  24cb		       00		      BYTE.b	%00000000
     96  24cc		       00		      BYTE.b	%00000000
     97  24cd		       00		      BYTE.b	%00000000
     98  24ce		       00		      BYTE.b	%00000000
     99  24cf		       00		      BYTE.b	%00000000
    100  24d0		       00		      BYTE.b	%00000000
    101  24d1		       00		      BYTE.b	%00000000
    102  24d2		       00		      BYTE.b	%00000000
    103  24d3		       00		      BYTE.b	%00000000
    104  24d4		       00		      BYTE.b	%00000000
    105  24d5		       00		      BYTE.b	%00000000
    106  24d6		       00		      BYTE.b	%00000000
    107  24d7
    108  24d7
    109  24d7
    110  24d7				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    111  24d7				  -	      align	256
    112  24d7					      endif
    113  24d7
    114  24d7
    115  24d7				   bmp_96x2_2_01
    116  24d7							; *** replace this block with your bimap_01 data block...
    117  24d7		       00		      BYTE.b	%00000000
    118  24d8		       e0		      BYTE.b	%11100000
    119  24d9		       e0		      BYTE.b	%11100000
    120  24da		       e0		      BYTE.b	%11100000
    121  24db		       e3		      BYTE.b	%11100011
    122  24dc		       e3		      BYTE.b	%11100011
    123  24dd		       f7		      BYTE.b	%11110111
    124  24de		       ff		      BYTE.b	%11111111
    125  24df		       fc		      BYTE.b	%11111100
    126  24e0		       f0		      BYTE.b	%11110000
    127  24e1		       e0		      BYTE.b	%11100000
    128  24e2		       00		      BYTE.b	%00000000
    129  24e3		       00		      BYTE.b	%00000000
    130  24e4		       00		      BYTE.b	%00000000
    131  24e5		       00		      BYTE.b	%00000000
    132  24e6		       00		      BYTE.b	%00000000
    133  24e7		       00		      BYTE.b	%00000000
    134  24e8		       00		      BYTE.b	%00000000
    135  24e9		       00		      BYTE.b	%00000000
    136  24ea		       00		      BYTE.b	%00000000
    137  24eb		       00		      BYTE.b	%00000000
    138  24ec		       00		      BYTE.b	%00000000
    139  24ed		       00		      BYTE.b	%00000000
    140  24ee		       00		      BYTE.b	%00000000
    141  24ef		       00		      BYTE.b	%00000000
    142  24f0		       00		      BYTE.b	%00000000
    143  24f1		       00		      BYTE.b	%00000000
    144  24f2		       00		      BYTE.b	%00000000
    145  24f3		       00		      BYTE.b	%00000000
    146  24f4		       00		      BYTE.b	%00000000
    147  24f5		       00		      BYTE.b	%00000000
    148  24f6		       00		      BYTE.b	%00000000
    149  24f7		       00		      BYTE.b	%00000000
    150  24f8		       00		      BYTE.b	%00000000
    151  24f9		       00		      BYTE.b	%00000000
    152  24fa		       00		      BYTE.b	%00000000
    153  24fb		       00		      BYTE.b	%00000000
    154  24fc		       00		      BYTE.b	%00000000
    155  24fd		       00		      BYTE.b	%00000000
    156  24fe		       00		      BYTE.b	%00000000
    157  24ff
    158  24ff
    159  24ff
    160  24ff					      if	>. != >[.+(bmp_96x2_2_height)]
    161  2500		       00		      align	256
    162  2500					      endif
    163  2500
    164  2500
    165  2500				   bmp_96x2_2_02
    166  2500							; *** replace this block with your bimap_02 data block...
    167  2500		       00		      BYTE.b	%00000000
    168  2501		       3c		      BYTE.b	%00111100
    169  2502		       3c		      BYTE.b	%00111100
    170  2503		       3c		      BYTE.b	%00111100
    171  2504		       3c		      BYTE.b	%00111100
    172  2505		       3c		      BYTE.b	%00111100
    173  2506		       7c		      BYTE.b	%01111100
    174  2507		       fc		      BYTE.b	%11111100
    175  2508		       fc		      BYTE.b	%11111100
    176  2509		       7c		      BYTE.b	%01111100
    177  250a		       3c		      BYTE.b	%00111100
    178  250b		       00		      BYTE.b	%00000000
    179  250c		       ff		      BYTE.b	%11111111
    180  250d		       ff		      BYTE.b	%11111111
    181  250e		       f0		      BYTE.b	%11110000
    182  250f		       f0		      BYTE.b	%11110000
    183  2510		       ff		      BYTE.b	%11111111
    184  2511		       ff		      BYTE.b	%11111111
    185  2512		       f0		      BYTE.b	%11110000
    186  2513		       f0		      BYTE.b	%11110000
    187  2514		       ff		      BYTE.b	%11111111
    188  2515		       ff		      BYTE.b	%11111111
    189  2516		       00		      BYTE.b	%00000000
    190  2517		       00		      BYTE.b	%00000000
    191  2518		       00		      BYTE.b	%00000000
    192  2519		       00		      BYTE.b	%00000000
    193  251a		       00		      BYTE.b	%00000000
    194  251b		       00		      BYTE.b	%00000000
    195  251c		       00		      BYTE.b	%00000000
    196  251d		       00		      BYTE.b	%00000000
    197  251e		       00		      BYTE.b	%00000000
    198  251f		       00		      BYTE.b	%00000000
    199  2520		       00		      BYTE.b	%00000000
    200  2521		       00		      BYTE.b	%00000000
    201  2522		       00		      BYTE.b	%00000000
    202  2523		       00		      BYTE.b	%00000000
    203  2524		       00		      BYTE.b	%00000000
    204  2525		       00		      BYTE.b	%00000000
    205  2526		       00		      BYTE.b	%00000000
    206  2527		       00		      BYTE.b	%00000000
    207  2528
    208  2528
    209  2528
    210  2528				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    211  2528				  -	      align	256
    212  2528					      endif
    213  2528
    214  2528
    215  2528				   bmp_96x2_2_03
    216  2528							; *** replace this block with your bimap_03 data block...
    217  2528		       00		      BYTE.b	%00000000
    218  2529		       78		      BYTE.b	%01111000
    219  252a		       78		      BYTE.b	%01111000
    220  252b		       78		      BYTE.b	%01111000
    221  252c		       7f		      BYTE.b	%01111111
    222  252d		       78		      BYTE.b	%01111000
    223  252e		       78		      BYTE.b	%01111000
    224  252f		       78		      BYTE.b	%01111000
    225  2530		       1e		      BYTE.b	%00011110
    226  2531		       07		      BYTE.b	%00000111
    227  2532		       07		      BYTE.b	%00000111
    228  2533		       00		      BYTE.b	%00000000
    229  2534		       f8		      BYTE.b	%11111000
    230  2535		       f8		      BYTE.b	%11111000
    231  2536		       1e		      BYTE.b	%00011110
    232  2537		       1e		      BYTE.b	%00011110
    233  2538		       f8		      BYTE.b	%11111000
    234  2539		       f8		      BYTE.b	%11111000
    235  253a		       1e		      BYTE.b	%00011110
    236  253b		       1e		      BYTE.b	%00011110
    237  253c		       f8		      BYTE.b	%11111000
    238  253d		       f8		      BYTE.b	%11111000
    239  253e		       00		      BYTE.b	%00000000
    240  253f		       00		      BYTE.b	%00000000
    241  2540		       00		      BYTE.b	%00000000
    242  2541		       00		      BYTE.b	%00000000
    243  2542		       00		      BYTE.b	%00000000
    244  2543		       00		      BYTE.b	%00000000
    245  2544		       00		      BYTE.b	%00000000
    246  2545		       00		      BYTE.b	%00000000
    247  2546		       00		      BYTE.b	%00000000
    248  2547		       00		      BYTE.b	%00000000
    249  2548		       00		      BYTE.b	%00000000
    250  2549		       00		      BYTE.b	%00000000
    251  254a		       00		      BYTE.b	%00000000
    252  254b		       00		      BYTE.b	%00000000
    253  254c		       00		      BYTE.b	%00000000
    254  254d		       00		      BYTE.b	%00000000
    255  254e		       00		      BYTE.b	%00000000
    256  254f		       00		      BYTE.b	%00000000
    257  2550
    258  2550
    259  2550
    260  2550				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    261  2550				  -	      align	256
    262  2550					      endif
    263  2550
    264  2550
    265  2550				   bmp_96x2_2_04
    266  2550							; *** replace this block with your bimap_04 data block...
    267  2550		       00		      BYTE.b	%00000000
    268  2551		       0f		      BYTE.b	%00001111
    269  2552		       1f		      BYTE.b	%00011111
    270  2553		       1f		      BYTE.b	%00011111
    271  2554		       ff		      BYTE.b	%11111111
    272  2555		       1f		      BYTE.b	%00011111
    273  2556		       1f		      BYTE.b	%00011111
    274  2557		       1f		      BYTE.b	%00011111
    275  2558		       7c		      BYTE.b	%01111100
    276  2559		       f0		      BYTE.b	%11110000
    277  255a		       e0		      BYTE.b	%11100000
    278  255b		       00		      BYTE.b	%00000000
    279  255c		       3f		      BYTE.b	%00111111
    280  255d		       3f		      BYTE.b	%00111111
    281  255e		       3c		      BYTE.b	%00111100
    282  255f		       3c		      BYTE.b	%00111100
    283  2560		       3f		      BYTE.b	%00111111
    284  2561		       3f		      BYTE.b	%00111111
    285  2562		       3c		      BYTE.b	%00111100
    286  2563		       3c		      BYTE.b	%00111100
    287  2564		       3f		      BYTE.b	%00111111
    288  2565		       3f		      BYTE.b	%00111111
    289  2566		       00		      BYTE.b	%00000000
    290  2567		       00		      BYTE.b	%00000000
    291  2568		       01		      BYTE.b	%00000001
    292  2569		       00		      BYTE.b	%00000000
    293  256a		       00		      BYTE.b	%00000000
    294  256b		       00		      BYTE.b	%00000000
    295  256c		       00		      BYTE.b	%00000000
    296  256d		       00		      BYTE.b	%00000000
    297  256e		       00		      BYTE.b	%00000000
    298  256f		       00		      BYTE.b	%00000000
    299  2570		       00		      BYTE.b	%00000000
    300  2571		       00		      BYTE.b	%00000000
    301  2572		       01		      BYTE.b	%00000001
    302  2573		       01		      BYTE.b	%00000001
    303  2574		       00		      BYTE.b	%00000000
    304  2575		       00		      BYTE.b	%00000000
    305  2576		       00		      BYTE.b	%00000000
    306  2577		       00		      BYTE.b	%00000000
    307  2578
    308  2578
    309  2578
    310  2578				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    311  2578				  -	      align	256
    312  2578					      endif
    313  2578
    314  2578
    315  2578				   bmp_96x2_2_05
    316  2578							; *** replace this block with your bimap_05 data block...
    317  2578		       00		      BYTE.b	%00000000
    318  2579		       1e		      BYTE.b	%00011110
    319  257a		       3e		      BYTE.b	%00111110
    320  257b		       3e		      BYTE.b	%00111110
    321  257c		       3e		      BYTE.b	%00111110
    322  257d		       3e		      BYTE.b	%00111110
    323  257e		       3e		      BYTE.b	%00111110
    324  257f		       3f		      BYTE.b	%00111111
    325  2580		       3f		      BYTE.b	%00111111
    326  2581		       3e		      BYTE.b	%00111110
    327  2582		       1e		      BYTE.b	%00011110
    328  2583		       00		      BYTE.b	%00000000
    329  2584		       ff		      BYTE.b	%11111111
    330  2585		       ff		      BYTE.b	%11111111
    331  2586		       00		      BYTE.b	%00000000
    332  2587		       00		      BYTE.b	%00000000
    333  2588		       fc		      BYTE.b	%11111100
    334  2589		       fc		      BYTE.b	%11111100
    335  258a		       00		      BYTE.b	%00000000
    336  258b		       00		      BYTE.b	%00000000
    337  258c		       ff		      BYTE.b	%11111111
    338  258d		       ff		      BYTE.b	%11111111
    339  258e		       00		      BYTE.b	%00000000
    340  258f		       00		      BYTE.b	%00000000
    341  2590		       ff		      BYTE.b	%11111111
    342  2591		       00		      BYTE.b	%00000000
    343  2592		       7f		      BYTE.b	%01111111
    344  2593		       7f		      BYTE.b	%01111111
    345  2594		       07		      BYTE.b	%00000111
    346  2595		       37		      BYTE.b	%00110111
    347  2596		       37		      BYTE.b	%00110111
    348  2597		       30		      BYTE.b	%00110000
    349  2598		       32		      BYTE.b	%00110010
    350  2599		       3e		      BYTE.b	%00111110
    351  259a		       1f		      BYTE.b	%00011111
    352  259b		       ff		      BYTE.b	%11111111
    353  259c		       b7		      BYTE.b	%10110111
    354  259d		       0f		      BYTE.b	%00001111
    355  259e		       0e		      BYTE.b	%00001110
    356  259f		       00		      BYTE.b	%00000000
    357  25a0
    358  25a0
    359  25a0
    360  25a0				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    361  25a0				  -	      align	256
    362  25a0					      endif
    363  25a0
    364  25a0
    365  25a0				   bmp_96x2_2_06
    366  25a0							; *** replace this block with your bimap_06 data block...
    367  25a0		       00		      BYTE.b	%00000000
    368  25a1		       07		      BYTE.b	%00000111
    369  25a2		       07		      BYTE.b	%00000111
    370  25a3		       07		      BYTE.b	%00000111
    371  25a4		       1f		      BYTE.b	%00011111
    372  25a5		       7f		      BYTE.b	%01111111
    373  25a6		       ff		      BYTE.b	%11111111
    374  25a7		       e7		      BYTE.b	%11100111
    375  25a8		       87		      BYTE.b	%10000111
    376  25a9		       07		      BYTE.b	%00000111
    377  25aa		       07		      BYTE.b	%00000111
    378  25ab		       00		      BYTE.b	%00000000
    379  25ac		       1f		      BYTE.b	%00011111
    380  25ad		       1f		      BYTE.b	%00011111
    381  25ae		       1f		      BYTE.b	%00011111
    382  25af		       1f		      BYTE.b	%00011111
    383  25b0		       1f		      BYTE.b	%00011111
    384  25b1		       1f		      BYTE.b	%00011111
    385  25b2		       1f		      BYTE.b	%00011111
    386  25b3		       1f		      BYTE.b	%00011111
    387  25b4		       1f		      BYTE.b	%00011111
    388  25b5		       1f		      BYTE.b	%00011111
    389  25b6		       00		      BYTE.b	%00000000
    390  25b7		       00		      BYTE.b	%00000000
    391  25b8		       fc		      BYTE.b	%11111100
    392  25b9		       38		      BYTE.b	%00111000
    393  25ba		       fb		      BYTE.b	%11111011
    394  25bb		       f8		      BYTE.b	%11111000
    395  25bc		       f8		      BYTE.b	%11111000
    396  25bd		       f8		      BYTE.b	%11111000
    397  25be		       f8		      BYTE.b	%11111000
    398  25bf		       fb		      BYTE.b	%11111011
    399  25c0		       80		      BYTE.b	%10000000
    400  25c1		       3c		      BYTE.b	%00111100
    401  25c2		       f6		      BYTE.b	%11110110
    402  25c3		       da		      BYTE.b	%11011010
    403  25c4		       d4		      BYTE.b	%11010100
    404  25c5		       40		      BYTE.b	%01000000
    405  25c6		       80		      BYTE.b	%10000000
    406  25c7		       00		      BYTE.b	%00000000
    407  25c8
    408  25c8
    409  25c8
    410  25c8				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    411  25c8				  -	      align	256
    412  25c8					      endif
    413  25c8
    414  25c8
    415  25c8				   bmp_96x2_2_07
    416  25c8							; *** replace this block with your bimap_07 data block...
    417  25c8		       00		      BYTE.b	%00000000
    418  25c9		       83		      BYTE.b	%10000011
    419  25ca		       81		      BYTE.b	%10000001
    420  25cb		       80		      BYTE.b	%10000000
    421  25cc		       80		      BYTE.b	%10000000
    422  25cd		       80		      BYTE.b	%10000000
    423  25ce		       80		      BYTE.b	%10000000
    424  25cf		       80		      BYTE.b	%10000000
    425  25d0		       80		      BYTE.b	%10000000
    426  25d1		       83		      BYTE.b	%10000011
    427  25d2		       83		      BYTE.b	%10000011
    428  25d3		       00		      BYTE.b	%00000000
    429  25d4		       ff		      BYTE.b	%11111111
    430  25d5		       ff		      BYTE.b	%11111111
    431  25d6		       00		      BYTE.b	%00000000
    432  25d7		       00		      BYTE.b	%00000000
    433  25d8		       ff		      BYTE.b	%11111111
    434  25d9		       ff		      BYTE.b	%11111111
    435  25da		       00		      BYTE.b	%00000000
    436  25db		       00		      BYTE.b	%00000000
    437  25dc		       ff		      BYTE.b	%11111111
    438  25dd		       ff		      BYTE.b	%11111111
    439  25de		       00		      BYTE.b	%00000000
    440  25df		       00		      BYTE.b	%00000000
    441  25e0		       00		      BYTE.b	%00000000
    442  25e1		       00		      BYTE.b	%00000000
    443  25e2		       c0		      BYTE.b	%11000000
    444  25e3		       40		      BYTE.b	%01000000
    445  25e4		       40		      BYTE.b	%01000000
    446  25e5		       40		      BYTE.b	%01000000
    447  25e6		       40		      BYTE.b	%01000000
    448  25e7		       c0		      BYTE.b	%11000000
    449  25e8		       00		      BYTE.b	%00000000
    450  25e9		       00		      BYTE.b	%00000000
    451  25ea		       00		      BYTE.b	%00000000
    452  25eb		       00		      BYTE.b	%00000000
    453  25ec		       00		      BYTE.b	%00000000
    454  25ed		       00		      BYTE.b	%00000000
    455  25ee		       00		      BYTE.b	%00000000
    456  25ef		       00		      BYTE.b	%00000000
    457  25f0
    458  25f0
    459  25f0
    460  25f0					      if	>. != >[.+(bmp_96x2_2_height)]
    461  2600		       00 00 00 00*	      align	256
    462  2600					      endif
    463  2600
    464  2600
    465  2600				   bmp_96x2_2_08
    466  2600							; *** replace this block with your bimap_08 data block...
    467  2600		       00		      BYTE.b	%00000000
    468  2601		       ff		      BYTE.b	%11111111
    469  2602		       ff		      BYTE.b	%11111111
    470  2603		       1e		      BYTE.b	%00011110
    471  2604		       1e		      BYTE.b	%00011110
    472  2605		       1e		      BYTE.b	%00011110
    473  2606		       1e		      BYTE.b	%00011110
    474  2607		       1e		      BYTE.b	%00011110
    475  2608		       1e		      BYTE.b	%00011110
    476  2609		       ff		      BYTE.b	%11111111
    477  260a		       ff		      BYTE.b	%11111111
    478  260b		       00		      BYTE.b	%00000000
    479  260c		       c7		      BYTE.b	%11000111
    480  260d		       c7		      BYTE.b	%11000111
    481  260e		       07		      BYTE.b	%00000111
    482  260f		       07		      BYTE.b	%00000111
    483  2610		       07		      BYTE.b	%00000111
    484  2611		       07		      BYTE.b	%00000111
    485  2612		       07		      BYTE.b	%00000111
    486  2613		       07		      BYTE.b	%00000111
    487  2614		       c7		      BYTE.b	%11000111
    488  2615		       c7		      BYTE.b	%11000111
    489  2616		       00		      BYTE.b	%00000000
    490  2617		       00		      BYTE.b	%00000000
    491  2618		       00		      BYTE.b	%00000000
    492  2619		       00		      BYTE.b	%00000000
    493  261a		       00		      BYTE.b	%00000000
    494  261b		       00		      BYTE.b	%00000000
    495  261c		       00		      BYTE.b	%00000000
    496  261d		       00		      BYTE.b	%00000000
    497  261e		       00		      BYTE.b	%00000000
    498  261f		       00		      BYTE.b	%00000000
    499  2620		       00		      BYTE.b	%00000000
    500  2621		       00		      BYTE.b	%00000000
    501  2622		       00		      BYTE.b	%00000000
    502  2623		       00		      BYTE.b	%00000000
    503  2624		       00		      BYTE.b	%00000000
    504  2625		       00		      BYTE.b	%00000000
    505  2626		       00		      BYTE.b	%00000000
    506  2627		       00		      BYTE.b	%00000000
    507  2628
    508  2628
    509  2628
    510  2628				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    511  2628				  -	      align	256
    512  2628					      endif
    513  2628
    514  2628
    515  2628				   bmp_96x2_2_09
    516  2628							; *** replace this block with your bimap_09 data block...
    517  2628		       00		      BYTE.b	%00000000
    518  2629		       e3		      BYTE.b	%11100011
    519  262a		       e3		      BYTE.b	%11100011
    520  262b		       03		      BYTE.b	%00000011
    521  262c		       03		      BYTE.b	%00000011
    522  262d		       03		      BYTE.b	%00000011
    523  262e		       03		      BYTE.b	%00000011
    524  262f		       03		      BYTE.b	%00000011
    525  2630		       00		      BYTE.b	%00000000
    526  2631		       e0		      BYTE.b	%11100000
    527  2632		       e0		      BYTE.b	%11100000
    528  2633		       00		      BYTE.b	%00000000
    529  2634		       83		      BYTE.b	%10000011
    530  2635		       87		      BYTE.b	%10000111
    531  2636		       9f		      BYTE.b	%10011111
    532  2637		       ff		      BYTE.b	%11111111
    533  2638		       87		      BYTE.b	%10000111
    534  2639		       83		      BYTE.b	%10000011
    535  263a		       80		      BYTE.b	%10000000
    536  263b		       80		      BYTE.b	%10000000
    537  263c		       ff		      BYTE.b	%11111111
    538  263d		       ff		      BYTE.b	%11111111
    539  263e		       00		      BYTE.b	%00000000
    540  263f		       00		      BYTE.b	%00000000
    541  2640		       00		      BYTE.b	%00000000
    542  2641		       00		      BYTE.b	%00000000
    543  2642		       00		      BYTE.b	%00000000
    544  2643		       00		      BYTE.b	%00000000
    545  2644		       00		      BYTE.b	%00000000
    546  2645		       00		      BYTE.b	%00000000
    547  2646		       00		      BYTE.b	%00000000
    548  2647		       00		      BYTE.b	%00000000
    549  2648		       00		      BYTE.b	%00000000
    550  2649		       00		      BYTE.b	%00000000
    551  264a		       00		      BYTE.b	%00000000
    552  264b		       00		      BYTE.b	%00000000
    553  264c		       00		      BYTE.b	%00000000
    554  264d		       00		      BYTE.b	%00000000
    555  264e		       00		      BYTE.b	%00000000
    556  264f		       00		      BYTE.b	%00000000
    557  2650
    558  2650
    559  2650
    560  2650				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    561  2650				  -	      align	256
    562  2650					      endif
    563  2650
    564  2650
    565  2650				   bmp_96x2_2_10
    566  2650							; *** replace this block with your bimap_10 data block...
    567  2650		       00		      BYTE.b	%00000000
    568  2651		       c0		      BYTE.b	%11000000
    569  2652		       c0		      BYTE.b	%11000000
    570  2653		       c0		      BYTE.b	%11000000
    571  2654		       ff		      BYTE.b	%11111111
    572  2655		       c0		      BYTE.b	%11000000
    573  2656		       c0		      BYTE.b	%11000000
    574  2657		       c0		      BYTE.b	%11000000
    575  2658		       f3		      BYTE.b	%11110011
    576  2659		       3f		      BYTE.b	%00111111
    577  265a		       3f		      BYTE.b	%00111111
    578  265b		       00		      BYTE.b	%00000000
    579  265c		       f0		      BYTE.b	%11110000
    580  265d		       e0		      BYTE.b	%11100000
    581  265e		       c0		      BYTE.b	%11000000
    582  265f		       00		      BYTE.b	%00000000
    583  2660		       f0		      BYTE.b	%11110000
    584  2661		       f0		      BYTE.b	%11110000
    585  2662		       f0		      BYTE.b	%11110000
    586  2663		       f0		      BYTE.b	%11110000
    587  2664		       c0		      BYTE.b	%11000000
    588  2665		       c0		      BYTE.b	%11000000
    589  2666		       00		      BYTE.b	%00000000
    590  2667		       00		      BYTE.b	%00000000
    591  2668		       00		      BYTE.b	%00000000
    592  2669		       00		      BYTE.b	%00000000
    593  266a		       00		      BYTE.b	%00000000
    594  266b		       00		      BYTE.b	%00000000
    595  266c		       00		      BYTE.b	%00000000
    596  266d		       00		      BYTE.b	%00000000
    597  266e		       00		      BYTE.b	%00000000
    598  266f		       00		      BYTE.b	%00000000
    599  2670		       00		      BYTE.b	%00000000
    600  2671		       00		      BYTE.b	%00000000
    601  2672		       00		      BYTE.b	%00000000
    602  2673		       00		      BYTE.b	%00000000
    603  2674		       00		      BYTE.b	%00000000
    604  2675		       00		      BYTE.b	%00000000
    605  2676		       00		      BYTE.b	%00000000
    606  2677		       00		      BYTE.b	%00000000
    607  2678
    608  2678
    609  2678
    610  2678				  -	      if	>. != >[.+(bmp_96x2_2_height)]
    611  2678				  -	      align	256
    612  2678					      endif
    613  2678
    614  2678
    615  2678				   bmp_96x2_2_11
    616  2678							; *** replace this block with your bimap_11 data block...
    617  2678		       00		      BYTE.b	%00000000
    618  2679		       f8		      BYTE.b	%11111000
    619  267a		       f8		      BYTE.b	%11111000
    620  267b		       f8		      BYTE.b	%11111000
    621  267c		       f8		      BYTE.b	%11111000
    622  267d		       f8		      BYTE.b	%11111000
    623  267e		       f8		      BYTE.b	%11111000
    624  267f		       f8		      BYTE.b	%11111000
    625  2680		       e0		      BYTE.b	%11100000
    626  2681		       80		      BYTE.b	%10000000
    627  2682		       00		      BYTE.b	%00000000
    628  2683		       00		      BYTE.b	%00000000
    629  2684		       00		      BYTE.b	%00000000
    630  2685		       00		      BYTE.b	%00000000
    631  2686		       00		      BYTE.b	%00000000
    632  2687		       00		      BYTE.b	%00000000
    633  2688		       00		      BYTE.b	%00000000
    634  2689		       00		      BYTE.b	%00000000
    635  268a		       00		      BYTE.b	%00000000
    636  268b		       00		      BYTE.b	%00000000
    637  268c		       00		      BYTE.b	%00000000
    638  268d		       00		      BYTE.b	%00000000
    639  268e		       00		      BYTE.b	%00000000
    640  268f		       00		      BYTE.b	%00000000
    641  2690		       00		      BYTE.b	%00000000
    642  2691		       00		      BYTE.b	%00000000
    643  2692		       00		      BYTE.b	%00000000
    644  2693		       00		      BYTE.b	%00000000
    645  2694		       00		      BYTE.b	%00000000
    646  2695		       00		      BYTE.b	%00000000
    647  2696		       00		      BYTE.b	%00000000
    648  2697		       00		      BYTE.b	%00000000
    649  2698		       00		      BYTE.b	%00000000
    650  2699		       00		      BYTE.b	%00000000
    651  269a		       00		      BYTE.b	%00000000
    652  269b		       00		      BYTE.b	%00000000
    653  269c		       00		      BYTE.b	%00000000
    654  269d		       00		      BYTE.b	%00000000
    655  269e		       00		      BYTE.b	%00000000
    656  269f		       00		      BYTE.b	%00000000
------- FILE titlescreen/asm/titlescreen.asm
    277  26a0					      endif
    278  26a0					      ifconst	mk_96x2_3_on
------- FILE titlescreen/96x2_3_image.asm LEVEL 3 PASS 2
      0  26a0					      include	"titlescreen/96x2_3_image.asm"
      1  26a0
      2  26a0							;*** The height of the displayed data...
      3  26a0		       00 14	   bmp_96x2_3_window =	20
      4  26a0
      5  26a0							;*** The height of the bitmap data. This can be larger than 
      6  26a0							;*** the displayed data height, if you're scrolling or animating 
      7  26a0							;*** the data...
      8  26a0		       00 14	   bmp_96x2_3_height =	20
      9  26a0
     10  26a0
     11  26a0				  -	      if	>. != >[.+(bmp_96x2_3_height)]
     12  26a0				  -	      align	256
     13  26a0					      endif
     14  26a0		       00		      BYTE.b	$00	; leave this here!
     15  26a1
     16  26a1
     17  26a1							;*** The color of each line in the bitmap, in reverse order...
     18  26a1				   bmp_96x2_3_colors
     19  26a1		       42		      .byte.b	$42
     20  26a2		       42		      .byte.b	$42
     21  26a3		       42		      .byte.b	$42
     22  26a4		       42		      .byte.b	$42
     23  26a5		       42		      .byte.b	$42
     24  26a6		       42		      .byte.b	$42
     25  26a7		       42		      .byte.b	$42
     26  26a8		       42		      .byte.b	$42
     27  26a9		       42		      .byte.b	$42
     28  26aa		       42		      .byte.b	$42
     29  26ab		       42		      .byte.b	$42
     30  26ac		       42		      .byte.b	$42
     31  26ad		       42		      .byte.b	$42
     32  26ae		       42		      .byte.b	$42
     33  26af		       42		      .byte.b	$42
     34  26b0		       42		      .byte.b	$42
     35  26b1		       42		      .byte.b	$42
     36  26b2		       42		      .byte.b	$42
     37  26b3		       42		      .byte.b	$42
     38  26b4		       42		      .byte.b	$42
     39  26b5
     40  26b5
     41  26b5				  -	      if	>. != >[.+(bmp_96x2_3_height)]
     42  26b5				  -	      align	256
     43  26b5					      endif
     44  26b5
     45  26b5
     46  26b5				   bmp_96x2_3_00
     47  26b5							; *** replace this block with your bimap_00 data block...
     48  26b5		       00		      BYTE.b	%00000000
     49  26b6		       00		      BYTE.b	%00000000
     50  26b7		       00		      BYTE.b	%00000000
     51  26b8		       00		      BYTE.b	%00000000
     52  26b9		       00		      BYTE.b	%00000000
     53  26ba		       00		      BYTE.b	%00000000
     54  26bb		       00		      BYTE.b	%00000000
     55  26bc		       00		      BYTE.b	%00000000
     56  26bd		       00		      BYTE.b	%00000000
     57  26be		       00		      BYTE.b	%00000000
     58  26bf		       70		      BYTE.b	%01110000
     59  26c0		       70		      BYTE.b	%01110000
     60  26c1		       7f		      BYTE.b	%01111111
     61  26c2		       7f		      BYTE.b	%01111111
     62  26c3		       71		      BYTE.b	%01110001
     63  26c4		       71		      BYTE.b	%01110001
     64  26c5		       71		      BYTE.b	%01110001
     65  26c6		       7f		      BYTE.b	%01111111
     66  26c7		       7f		      BYTE.b	%01111111
     67  26c8		       00		      BYTE.b	%00000000
     68  26c9
     69  26c9
     70  26c9
     71  26c9				  -	      if	>. != >[.+(bmp_96x2_3_height)]
     72  26c9				  -	      align	256
     73  26c9					      endif
     74  26c9
     75  26c9
     76  26c9				   bmp_96x2_3_01
     77  26c9							; *** replace this block with your bimap_01 data block...
     78  26c9		       03		      BYTE.b	%00000011
     79  26ca		       03		      BYTE.b	%00000011
     80  26cb		       03		      BYTE.b	%00000011
     81  26cc		       03		      BYTE.b	%00000011
     82  26cd		       03		      BYTE.b	%00000011
     83  26ce		       03		      BYTE.b	%00000011
     84  26cf		       03		      BYTE.b	%00000011
     85  26d0		       0f		      BYTE.b	%00001111
     86  26d1		       0f		      BYTE.b	%00001111
     87  26d2		       00		      BYTE.b	%00000000
     88  26d3		       19		      BYTE.b	%00011001
     89  26d4		       3b		      BYTE.b	%00111011
     90  26d5		       3f		      BYTE.b	%00111111
     91  26d6		       bf		      BYTE.b	%10111111
     92  26d7		       b9		      BYTE.b	%10111001
     93  26d8		       b8		      BYTE.b	%10111000
     94  26d9		       b8		      BYTE.b	%10111000
     95  26da		       bf		      BYTE.b	%10111111
     96  26db		       1f		      BYTE.b	%00011111
     97  26dc		       00		      BYTE.b	%00000000
     98  26dd
     99  26dd
    100  26dd
    101  26dd				  -	      if	>. != >[.+(bmp_96x2_3_height)]
    102  26dd				  -	      align	256
    103  26dd					      endif
    104  26dd
    105  26dd
    106  26dd				   bmp_96x2_3_02
    107  26dd							; *** replace this block with your bimap_02 data block...
    108  26dd		       07		      BYTE.b	%00000111
    109  26de		       87		      BYTE.b	%10000111
    110  26df		       8e		      BYTE.b	%10001110
    111  26e0		       8e		      BYTE.b	%10001110
    112  26e1		       8e		      BYTE.b	%10001110
    113  26e2		       8e		      BYTE.b	%10001110
    114  26e3		       8e		      BYTE.b	%10001110
    115  26e4		       ef		      BYTE.b	%11101111
    116  26e5		       e7		      BYTE.b	%11100111
    117  26e6		       00		      BYTE.b	%00000000
    118  26e7		       ef		      BYTE.b	%11101111
    119  26e8		       ef		      BYTE.b	%11101111
    120  26e9		       ce		      BYTE.b	%11001110
    121  26ea		       cf		      BYTE.b	%11001111
    122  26eb		       ef		      BYTE.b	%11101111
    123  26ec		       ee		      BYTE.b	%11101110
    124  26ed		       ee		      BYTE.b	%11101110
    125  26ee		       cf		      BYTE.b	%11001111
    126  26ef		       cf		      BYTE.b	%11001111
    127  26f0		       00		      BYTE.b	%00000000
    128  26f1
    129  26f1
    130  26f1
    131  26f1					      if	>. != >[.+(bmp_96x2_3_height)]
    132  2700		       00 00 00 00*	      align	256
    133  2700					      endif
    134  2700
    135  2700
    136  2700				   bmp_96x2_3_03
    137  2700							; *** replace this block with your bimap_03 data block...
    138  2700		       e0		      BYTE.b	%11100000
    139  2701		       f0		      BYTE.b	%11110000
    140  2702		       38		      BYTE.b	%00111000
    141  2703		       38		      BYTE.b	%00111000
    142  2704		       38		      BYTE.b	%00111000
    143  2705		       38		      BYTE.b	%00111000
    144  2706		       38		      BYTE.b	%00111000
    145  2707		       f0		      BYTE.b	%11110000
    146  2708		       e0		      BYTE.b	%11100000
    147  2709		       00		      BYTE.b	%00000000
    148  270a		       f1		      BYTE.b	%11110001
    149  270b		       f3		      BYTE.b	%11110011
    150  270c		       03		      BYTE.b	%00000011
    151  270d		       e1		      BYTE.b	%11100001
    152  270e		       e3		      BYTE.b	%11100011
    153  270f		       07		      BYTE.b	%00000111
    154  2710		       07		      BYTE.b	%00000111
    155  2711		       f3		      BYTE.b	%11110011
    156  2712		       f1		      BYTE.b	%11110001
    157  2713		       00		      BYTE.b	%00000000
    158  2714
    159  2714
    160  2714
    161  2714				  -	      if	>. != >[.+(bmp_96x2_3_height)]
    162  2714				  -	      align	256
    163  2714					      endif
    164  2714
    165  2714
    166  2714				   bmp_96x2_3_04
    167  2714							; *** replace this block with your bimap_04 data block...
    168  2714		       00		      BYTE.b	%00000000
    169  2715		       01		      BYTE.b	%00000001
    170  2716		       01		      BYTE.b	%00000001
    171  2717		       00		      BYTE.b	%00000000
    172  2718		       00		      BYTE.b	%00000000
    173  2719		       01		      BYTE.b	%00000001
    174  271a		       01		      BYTE.b	%00000001
    175  271b		       01		      BYTE.b	%00000001
    176  271c		       00		      BYTE.b	%00000000
    177  271d		       00		      BYTE.b	%00000000
    178  271e		       f8		      BYTE.b	%11111000
    179  271f		       fd		      BYTE.b	%11111101
    180  2720		       1d		      BYTE.b	%00011101
    181  2721		       fc		      BYTE.b	%11111100
    182  2722		       f8		      BYTE.b	%11111000
    183  2723		       01		      BYTE.b	%00000001
    184  2724		       1d		      BYTE.b	%00011101
    185  2725		       f8		      BYTE.b	%11111000
    186  2726		       f0		      BYTE.b	%11110000
    187  2727		       00		      BYTE.b	%00000000
    188  2728
    189  2728
    190  2728
    191  2728				  -	      if	>. != >[.+(bmp_96x2_3_height)]
    192  2728				  -	      align	256
    193  2728					      endif
    194  2728
    195  2728
    196  2728				   bmp_96x2_3_05
    197  2728							; *** replace this block with your bimap_05 data block...
    198  2728		       fc		      BYTE.b	%11111100
    199  2729		       fe		      BYTE.b	%11111110
    200  272a		       c6		      BYTE.b	%11000110
    201  272b		       06		      BYTE.b	%00000110
    202  272c		       fc		      BYTE.b	%11111100
    203  272d		       c0		      BYTE.b	%11000000
    204  272e		       c6		      BYTE.b	%11000110
    205  272f		       fe		      BYTE.b	%11111110
    206  2730		       fc		      BYTE.b	%11111100
    207  2731		       00		      BYTE.b	%00000000
    208  2732		       fc		      BYTE.b	%11111100
    209  2733		       fe		      BYTE.b	%11111110
    210  2734		       c6		      BYTE.b	%11000110
    211  2735		       7e		      BYTE.b	%01111110
    212  2736		       fc		      BYTE.b	%11111100
    213  2737		       c0		      BYTE.b	%11000000
    214  2738		       c6		      BYTE.b	%11000110
    215  2739		       fe		      BYTE.b	%11111110
    216  273a		       fc		      BYTE.b	%11111100
    217  273b		       00		      BYTE.b	%00000000
    218  273c
    219  273c
    220  273c
    221  273c
    222  273c				  -	      if	>. != >[.+(bmp_96x2_3_height)]
    223  273c				  -	      align	256
    224  273c					      endif
    225  273c
    226  273c
    227  273c				   bmp_96x2_3_06
    228  273c							; *** replace this block with your bimap_06 data block...
    229  273c		       0c		      BYTE.b	%00001100
    230  273d		       0e		      BYTE.b	%00001110
    231  273e		       0e		      BYTE.b	%00001110
    232  273f		       0e		      BYTE.b	%00001110
    233  2740		       0e		      BYTE.b	%00001110
    234  2741		       0e		      BYTE.b	%00001110
    235  2742		       0e		      BYTE.b	%00001110
    236  2743		       3f		      BYTE.b	%00111111
    237  2744		       3f		      BYTE.b	%00111111
    238  2745		       00		      BYTE.b	%00000000
    239  2746		       00		      BYTE.b	%00000000
    240  2747		       00		      BYTE.b	%00000000
    241  2748		       00		      BYTE.b	%00000000
    242  2749		       00		      BYTE.b	%00000000
    243  274a		       00		      BYTE.b	%00000000
    244  274b		       00		      BYTE.b	%00000000
    245  274c		       00		      BYTE.b	%00000000
    246  274d		       00		      BYTE.b	%00000000
    247  274e		       00		      BYTE.b	%00000000
    248  274f		       00		      BYTE.b	%00000000
    249  2750
    250  2750
    251  2750
    252  2750				  -	      if	>. != >[.+(bmp_96x2_3_height)]
    253  2750				  -	      align	256
    254  2750					      endif
    255  2750
    256  2750
    257  2750				   bmp_96x2_3_07
    258  2750							; *** replace this block with your bimap_07 data block...
    259  2750		       38		      BYTE.b	%00111000
    260  2751		       38		      BYTE.b	%00111000
    261  2752		       38		      BYTE.b	%00111000
    262  2753		       3f		      BYTE.b	%00111111
    263  2754		       38		      BYTE.b	%00111000
    264  2755		       38		      BYTE.b	%00111000
    265  2756		       1d		      BYTE.b	%00011101
    266  2757		       9f		      BYTE.b	%10011111
    267  2758		       8f		      BYTE.b	%10001111
    268  2759		       00		      BYTE.b	%00000000
    269  275a		       38		      BYTE.b	%00111000
    270  275b		       38		      BYTE.b	%00111000
    271  275c		       38		      BYTE.b	%00111000
    272  275d		       3f		      BYTE.b	%00111111
    273  275e		       3f		      BYTE.b	%00111111
    274  275f		       38		      BYTE.b	%00111000
    275  2760		       38		      BYTE.b	%00111000
    276  2761		       3f		      BYTE.b	%00111111
    277  2762		       3f		      BYTE.b	%00111111
    278  2763		       00		      BYTE.b	%00000000
    279  2764
    280  2764
    281  2764
    282  2764				  -	      if	>. != >[.+(bmp_96x2_3_height)]
    283  2764				  -	      align	256
    284  2764					      endif
    285  2764
    286  2764
    287  2764				   bmp_96x2_3_08
    288  2764							; *** replace this block with your bimap_08 data block...
    289  2764		       cc		      BYTE.b	%11001100
    290  2765		       ed		      BYTE.b	%11101101
    291  2766		       ef		      BYTE.b	%11101111
    292  2767		       ef		      BYTE.b	%11101111
    293  2768		       ec		      BYTE.b	%11101100
    294  2769		       ec		      BYTE.b	%11101100
    295  276a		       cc		      BYTE.b	%11001100
    296  276b		       8f		      BYTE.b	%10001111
    297  276c		       0f		      BYTE.b	%00001111
    298  276d		       00		      BYTE.b	%00000000
    299  276e		       07		      BYTE.b	%00000111
    300  276f		       07		      BYTE.b	%00000111
    301  2770		       01		      BYTE.b	%00000001
    302  2771		       81		      BYTE.b	%10000001
    303  2772		       81		      BYTE.b	%10000001
    304  2773		       01		      BYTE.b	%00000001
    305  2774		       01		      BYTE.b	%00000001
    306  2775		       c7		      BYTE.b	%11000111
    307  2776		       c7		      BYTE.b	%11000111
    308  2777		       00		      BYTE.b	%00000000
    309  2778
    310  2778
    311  2778
    312  2778				  -	      if	>. != >[.+(bmp_96x2_3_height)]
    313  2778				  -	      align	256
    314  2778					      endif
    315  2778
    316  2778
    317  2778				   bmp_96x2_3_09
    318  2778							; *** replace this block with your bimap_09 data block...
    319  2778		       f0		      BYTE.b	%11110000
    320  2779		       f0		      BYTE.b	%11110000
    321  277a		       e0		      BYTE.b	%11100000
    322  277b		       c0		      BYTE.b	%11000000
    323  277c		       f0		      BYTE.b	%11110000
    324  277d		       70		      BYTE.b	%01110000
    325  277e		       70		      BYTE.b	%01110000
    326  277f		       f3		      BYTE.b	%11110011
    327  2780		       e3		      BYTE.b	%11100011
    328  2781		       00		      BYTE.b	%00000000
    329  2782		       f7		      BYTE.b	%11110111
    330  2783		       f7		      BYTE.b	%11110111
    331  2784		       c7		      BYTE.b	%11000111
    332  2785		       c7		      BYTE.b	%11000111
    333  2786		       c7		      BYTE.b	%11000111
    334  2787		       c7		      BYTE.b	%11000111
    335  2788		       c7		      BYTE.b	%11000111
    336  2789		       f7		      BYTE.b	%11110111
    337  278a		       f7		      BYTE.b	%11110111
    338  278b		       00		      BYTE.b	%00000000
    339  278c
    340  278c
    341  278c
    342  278c				  -	      if	>. != >[.+(bmp_96x2_3_height)]
    343  278c				  -	      align	256
    344  278c					      endif
    345  278c
    346  278c
    347  278c				   bmp_96x2_3_10
    348  278c							; *** replace this block with your bimap_10 data block...
    349  278c		       60		      BYTE.b	%01100000
    350  278d		       e0		      BYTE.b	%11100000
    351  278e		       e0		      BYTE.b	%11100000
    352  278f		       e0		      BYTE.b	%11100000
    353  2790		       e0		      BYTE.b	%11100000
    354  2791		       e0		      BYTE.b	%11100000
    355  2792		       e0		      BYTE.b	%11100000
    356  2793		       f8		      BYTE.b	%11111000
    357  2794		       f8		      BYTE.b	%11111000
    358  2795		       00		      BYTE.b	%00000000
    359  2796		       39		      BYTE.b	%00111001
    360  2797		       79		      BYTE.b	%01111001
    361  2798		       f1		      BYTE.b	%11110001
    362  2799		       f9		      BYTE.b	%11111001
    363  279a		       39		      BYTE.b	%00111001
    364  279b		       19		      BYTE.b	%00011001
    365  279c		       19		      BYTE.b	%00011001
    366  279d		       f9		      BYTE.b	%11111001
    367  279e		       f1		      BYTE.b	%11110001
    368  279f		       00		      BYTE.b	%00000000
    369  27a0
    370  27a0
    371  27a0				  -	      if	>. != >[.+(bmp_96x2_3_height)]
    372  27a0				  -	      align	256
    373  27a0					      endif
    374  27a0
    375  27a0
    376  27a0				   bmp_96x2_3_11
    377  27a0							; *** replace this block with your bimap_11 data block...
    378  27a0		       00		      BYTE.b	%00000000
    379  27a1		       00		      BYTE.b	%00000000
    380  27a2		       00		      BYTE.b	%00000000
    381  27a3		       00		      BYTE.b	%00000000
    382  27a4		       00		      BYTE.b	%00000000
    383  27a5		       00		      BYTE.b	%00000000
    384  27a6		       00		      BYTE.b	%00000000
    385  27a7		       00		      BYTE.b	%00000000
    386  27a8		       00		      BYTE.b	%00000000
    387  27a9		       00		      BYTE.b	%00000000
    388  27aa		       fe		      BYTE.b	%11111110
    389  27ab		       fe		      BYTE.b	%11111110
    390  27ac		       80		      BYTE.b	%10000000
    391  27ad		       f8		      BYTE.b	%11111000
    392  27ae		       fc		      BYTE.b	%11111100
    393  27af		       80		      BYTE.b	%10000000
    394  27b0		       80		      BYTE.b	%10000000
    395  27b1		       fe		      BYTE.b	%11111110
    396  27b2		       fe		      BYTE.b	%11111110
    397  27b3		       00		      BYTE.b	%00000000
------- FILE titlescreen/asm/titlescreen.asm
    280  27b4					      endif
    281  27b4				  -	      ifconst	mk_96x2_4_on
    282  27b4				  -	      include	"titlescreen/96x2_4_image.asm"
    283  27b4					      endif
    284  27b4				  -	      ifconst	mk_96x2_5_on
    285  27b4				  -	      include	"titlescreen/96x2_5_image.asm"
    286  27b4					      endif
    287  27b4				  -	      ifconst	mk_96x2_6_on
    288  27b4				  -	      include	"titlescreen/96x2_6_image.asm"
    289  27b4					      endif
    290  27b4				  -	      ifconst	mk_96x2_7_on
    291  27b4				  -	      include	"titlescreen/96x2_7_image.asm"
    292  27b4					      endif
    293  27b4				  -	      ifconst	mk_96x2_8_on
    294  27b4				  -	      include	"titlescreen/96x2_8_image.asm"
    295  27b4					      endif
    296  27b4
    297  27b4				  -	      ifconst	mk_player_on
    298  27b4				  -	      include	"titlescreen/player_image.asm"
    299  27b4					      endif
    300  27b4
    301  27b4				  -	      ifconst	mk_score_on
    302  27b4				  -	      include	"titlescreen/score_image.asm"
    303  27b4					      endif
    304  27b4
    305  27b4				  -	      ifconst	mk_gameselect_on
    306  27b4				  -	      include	"titlescreen/gameselect_image.asm"
    307  27b4					      endif
    308  27b4
    309  27b4				  -	      ifconst	mk_player_on
    310  27b4				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  27b4					      endif		;mk_player_on
    312  27b4
    313  27b4
------- FILE batari.bas.asm
    786  27b4
    787  27b4				   .
    788  27b4							;
    789  27b4
    790  27b4				   .L071		;  bank 3
    791  27b4
    792  27b4					      if	ECHO2
      2080 bytes of ROM space left in bank 2
    793  27b4					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
    794  27b4					      endif
    795  27b4		       00 01	   ECHO2      =	1
    796  2fd4					      ORG	$2FF4-bscode_length
    797  2fd4					      RORG	$BFF4-bscode_length
    798  2fd4		       a2 ff	   start_bank2 ldx	#$ff
    799  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
    800  2fd6				  -	      stx	FASTFETCH
    801  2fd6					      endif
    802  2fd6		       9a		      txs
    803  2fd7				  -	      if	bankswitch == 64
    804  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    805  2fd7					      else
    806  2fd7		       a9 f2		      lda	#>(start-1)
    807  2fd9					      endif
    808  2fd9		       48		      pha
    809  2fda		       a9 51		      lda	#<(start-1)
    810  2fdc		       48		      pha
    811  2fdd		       48		      pha
    812  2fde		       8a		      txa
    813  2fdf		       48		      pha
    814  2fe0		       ba		      tsx
    815  2fe1					      if	bankswitch != 64
    816  2fe1		       b5 04		      lda	4,x	; get high byte of return address
    817  2fe3		       2a		      rol
    818  2fe4		       2a		      rol
    819  2fe5		       2a		      rol
    820  2fe6		       2a		      rol
    821  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    822  2fe9		       aa		      tax
    823  2fea		       e8		      inx
    824  2feb				  -	      else
    825  2feb				  -	      lda	4,x	; get high byte of return address
    826  2feb				  -	      tay
    827  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    828  2feb				  -	      sta	4,x
    829  2feb				  -	      tya
    830  2feb				  -	      lsr
    831  2feb				  -	      lsr
    832  2feb				  -	      lsr
    833  2feb				  -	      lsr
    834  2feb				  -	      tax
    835  2feb				  -	      inx
    836  2feb					      endif
    837  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    838  2fee		       68		      pla
    839  2fef		       aa		      tax
    840  2ff0		       68		      pla
    841  2ff1		       60		      rts
    842  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    843  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    844  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    845  2ff2					      endif
    846  2ffc					      ORG	$2FFC
    847  2ffc					      RORG	$BFFC
    848  2ffc		       d4 bf		      .word.w	(start_bank2 & $ffff)
    849  2ffe		       d4 bf		      .word.w	(start_bank2 & $ffff)
    850  3000					      ORG	$3000
    851  3000					      RORG	$D000
    852  3000				   .__Game_Over_Setup
    853  3000							; __Game_Over_Setup
    854  3000
    855  3000				   .
    856  3000							;
    857  3000
    858  3000				   .L072		;  player0y  =  200 :	player1y  =  200
    859  3000
    860  3000		       a9 c8		      LDA	#200
    861  3002		       85 85		      STA	player0y
    862  3004		       85 86		      STA	player1y
    863  3006				   .
    864  3006							;
    865  3006
    866  3006				   .L073		;  playfield:
    867  3006
    868  3006				  -	      ifconst	pfres
    869  3006				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
    870  3006					      else
    871  3006		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
    872  3008					      endif
    873  3008		       4c 37 d0 	      jmp	pflabel1
    874  300b				   PF_data1
    875  300b		       7e bf		      .byte.b	%01111110, %10111111
    876  300d					      if	(pfwidth>2)
    877  300d		       ff 7d		      .byte.b	%11111111, %01111101
    878  300f					      endif
    879  300f		       60 b3		      .byte.b	%01100000, %10110011
    880  3011					      if	(pfwidth>2)
    881  3011		       99 0d		      .byte.b	%10011001, %00001101
    882  3013					      endif
    883  3013		       6e bf		      .byte.b	%01101110, %10111111
    884  3015					      if	(pfwidth>2)
    885  3015		       99 3d		      .byte.b	%10011001, %00111101
    886  3017					      endif
    887  3017		       66 b3		      .byte.b	%01100110, %10110011
    888  3019					      if	(pfwidth>2)
    889  3019		       99 0d		      .byte.b	%10011001, %00001101
    890  301b					      endif
    891  301b		       7e b3		      .byte.b	%01111110, %10110011
    892  301d					      if	(pfwidth>2)
    893  301d		       99 7d		      .byte.b	%10011001, %01111101
    894  301f					      endif
    895  301f		       00 00		      .byte.b	%00000000, %00000000
    896  3021					      if	(pfwidth>2)
    897  3021		       00 00		      .byte.b	%00000000, %00000000
    898  3023					      endif
    899  3023		       1f cd		      .byte.b	%00011111, %11001101
    900  3025					      if	(pfwidth>2)
    901  3025		       7d 1f		      .byte.b	%01111101, %00011111
    902  3027					      endif
    903  3027		       19 cd		      .byte.b	%00011001, %11001101
    904  3029					      if	(pfwidth>2)
    905  3029		       61 19		      .byte.b	%01100001, %00011001
    906  302b					      endif
    907  302b		       19 cd		      .byte.b	%00011001, %11001101
    908  302d					      if	(pfwidth>2)
    909  302d		       79 0f		      .byte.b	%01111001, %00001111
    910  302f					      endif
    911  302f		       19 cd		      .byte.b	%00011001, %11001101
    912  3031					      if	(pfwidth>2)
    913  3031		       61 19		      .byte.b	%01100001, %00011001
    914  3033					      endif
    915  3033		       1f 31		      .byte.b	%00011111, %00110001
    916  3035					      if	(pfwidth>2)
    917  3035		       7d 19		      .byte.b	%01111101, %00011001
    918  3037					      endif
    919  3037				   pflabel1
    920  3037		       bd 0b d0 	      lda	PF_data1,x
    921  303a		       95 a4		      sta	playfield,x
    922  303c		       ca		      dex
    923  303d		       10 f8		      bpl	pflabel1
    924  303f				   .
    925  303f							;
    926  303f
    927  303f				   .pfcolors
    928  303f							; pfcolors:
    929  303f
    930  303f				   .$CA
    931  303f							; $CA
    932  303f
    933  303f				   .$CA
    934  303f							; $CA
    935  303f
    936  303f				   .$CA
    937  303f							; $CA
    938  303f
    939  303f				   .$CA
    940  303f							; $CA
    941  303f
    942  303f				   .$CA
    943  303f							; $CA
    944  303f
    945  303f				   .$CA
    946  303f							; $CA
    947  303f
    948  303f				   .$CA
    949  303f							; $CA
    950  303f
    951  303f				   .$CA
    952  303f							; $CA
    953  303f
    954  303f				   .$CA
    955  303f							; $CA
    956  303f
    957  303f				   .$CA
    958  303f							; $CA
    959  303f
    960  303f				   .$CA
    961  303f							; $CA
    962  303f
    963  303f				   .
    964  303f							;
    965  303f
    966  303f				   .gameover_loop
    967  303f							; gameover_loop
    968  303f
    969  303f				   .L074		;  drawscreen
    970  303f
    971  303f		       85 ee		      sta	temp7
    972  3041		       a9 d0		      lda	#>(ret_point4-1)
    973  3043		       48		      pha
    974  3044		       a9 56		      lda	#<(ret_point4-1)
    975  3046		       48		      pha
    976  3047		       a9 f4		      lda	#>(drawscreen-1)
    977  3049		       48		      pha
    978  304a		       a9 3b		      lda	#<(drawscreen-1)
    979  304c		       48		      pha
    980  304d		       a5 ee		      lda	temp7
    981  304f		       48		      pha
    982  3050		       8a		      txa
    983  3051		       48		      pha
    984  3052		       a2 04		      ldx	#4
    985  3054		       4c eb ff 	      jmp	BS_jsr
    986  3057				   ret_point4
    987  3057				   .L075		;  if joy0fire  ||  switchreset then player0y = 200 : goto gamestart
    988  3057
    989  3057		       24 0c		      bit	INPT4
    990  3059		       30 03		      BMI	.skipL075
    991  305b				   .condpart22
    992  305b		       4c 65 d0 	      jmp	.condpart23
    993  305e				   .skipL075
    994  305e		       a9 01		      lda	#1
    995  3060		       2c 82 02 	      bit	SWCHB
    996  3063		       d0 07		      BNE	.skip2OR
    997  3065				   .condpart23
    998  3065		       a9 c8		      LDA	#200
    999  3067		       85 85		      STA	player0y
   1000  3069		       4c bc 90 	      jmp	.gamestart
   1001  306c
   1002  306c				   .skip2OR
   1003  306c				   .L076		;  goto gameover_loop
   1004  306c		       4c 3f d0 	      jmp	.gameover_loop
   1005  306f					      if	ECHO3
      3941 bytes of ROM space left in bank 3
   1006  306f					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   1007  306f					      endif
   1008  306f		       00 01	   ECHO3      =	1
   1009  3fd4					      ORG	$3FF4-bscode_length
   1010  3fd4					      RORG	$DFF4-bscode_length
   1011  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   1012  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
   1013  3fd6				  -	      stx	FASTFETCH
   1014  3fd6					      endif
   1015  3fd6		       9a		      txs
   1016  3fd7				  -	      if	bankswitch == 64
   1017  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   1018  3fd7					      else
   1019  3fd7		       a9 f2		      lda	#>(start-1)
   1020  3fd9					      endif
   1021  3fd9		       48		      pha
   1022  3fda		       a9 51		      lda	#<(start-1)
   1023  3fdc		       48		      pha
   1024  3fdd		       48		      pha
   1025  3fde		       8a		      txa
   1026  3fdf		       48		      pha
   1027  3fe0		       ba		      tsx
   1028  3fe1					      if	bankswitch != 64
   1029  3fe1		       b5 04		      lda	4,x	; get high byte of return address
   1030  3fe3		       2a		      rol
   1031  3fe4		       2a		      rol
   1032  3fe5		       2a		      rol
   1033  3fe6		       2a		      rol
   1034  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   1035  3fe9		       aa		      tax
   1036  3fea		       e8		      inx
   1037  3feb				  -	      else
   1038  3feb				  -	      lda	4,x	; get high byte of return address
   1039  3feb				  -	      tay
   1040  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   1041  3feb				  -	      sta	4,x
   1042  3feb				  -	      tya
   1043  3feb				  -	      lsr
   1044  3feb				  -	      lsr
   1045  3feb				  -	      lsr
   1046  3feb				  -	      lsr
   1047  3feb				  -	      tax
   1048  3feb				  -	      inx
   1049  3feb					      endif
   1050  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   1051  3fee		       68		      pla
   1052  3fef		       aa		      tax
   1053  3ff0		       68		      pla
   1054  3ff1		       60		      rts
   1055  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   1056  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   1057  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   1058  3ff2					      endif
   1059  3ffc					      ORG	$3FFC
   1060  3ffc					      RORG	$DFFC
   1061  3ffc		       d4 df		      .word.w	(start_bank3 & $ffff)
   1062  3ffe		       d4 df		      .word.w	(start_bank3 & $ffff)
   1063  4000					      ORG	$4000
   1064  4000					      RORG	$F000
   1065  4000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1066  4000
   1067  4000							; This is a 2-line kernel!
   1068  4000					      ifnconst	vertical_reflect
   1069  4000				   kernel
   1070  4000					      endif
   1071  4000		       85 02		      sta	WSYNC
   1072  4002		       a9 ff		      lda	#255
   1073  4004		       8d 96 02 	      sta	TIM64T
   1074  4007
   1075  4007		       a9 01		      lda	#1
   1076  4009		       85 27		      sta	VDELBL
   1077  400b		       85 25		      sta	VDELP0
   1078  400d		       a6 92		      ldx	ballheight
   1079  400f		       e8		      inx
   1080  4010		       e8		      inx
   1081  4011		       86 9f		      stx	temp4
   1082  4013		       a5 86		      lda	player1y
   1083  4015		       85 9e		      sta	temp3
   1084  4017
   1085  4017				  -	      ifconst	shakescreen
   1086  4017				  -	      jsr	doshakescreen
   1087  4017					      else
   1088  4017		       a6 90		      ldx	missile0height
   1089  4019		       e8		      inx
   1090  401a					      endif
   1091  401a
   1092  401a		       e8		      inx
   1093  401b		       86 f6		      stx	stack1
   1094  401d
   1095  401d		       a5 89		      lda	bally
   1096  401f		       85 f7		      sta	stack2
   1097  4021
   1098  4021		       a5 85		      lda	player0y
   1099  4023		       a2 00		      ldx	#0
   1100  4025		       85 02		      sta	WSYNC
   1101  4027		       86 1b		      stx	GRP0
   1102  4029		       86 1c		      stx	GRP1
   1103  402b		       86 0e		      stx	PF1L
   1104  402d		       86 0f		      stx	PF2
   1105  402f		       86 2c		      stx	CXCLR
   1106  4031				  -	      ifconst	readpaddle
   1107  4031				  -	      stx	paddle
   1108  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
   1110  4033					      endif
   1111  4033
   1112  4033		       95 9d		      sta	temp2,x
   1113  4035
   1114  4035							;store these so they can be retrieved later
   1115  4035					      ifnconst	pfres
   1116  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
   1117  4037				  -	      else
   1118  4037				  -	      ldx	#132-pfres*pfwidth
   1119  4037					      endif
   1120  4037
   1121  4037		       c6 85		      dec	player0y
   1122  4039
   1123  4039		       a5 91		      lda	missile0y
   1124  403b		       85 a0		      sta	temp5
   1125  403d		       a5 88		      lda	missile1y
   1126  403f		       85 a1		      sta	temp6
   1127  4041
   1128  4041		       a5 ef		      lda	playfieldpos
   1129  4043		       85 9c		      sta	temp1
   1130  4045
   1131  4045				  -	      ifconst	pfrowheight
   1132  4045				  -	      lda	#pfrowheight+2
   1133  4045					      else
   1134  4045					      ifnconst	pfres
   1135  4045		       a9 0a		      lda	#10
   1136  4047				  -	      else
   1137  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   1138  4047					      endif
   1139  4047					      endif
   1140  4047		       18		      clc
   1141  4048		       e5 ef		      sbc	playfieldpos
   1142  404a		       85 ef		      sta	playfieldpos
   1143  404c		       4c 74 f0 	      jmp	.startkernel
   1144  404f
   1145  404f				   .skipDrawP0
   1146  404f		       a9 00		      lda	#0
   1147  4051		       a8		      tay
   1148  4052		       4c a3 f0 	      jmp	.continueP0
   1149  4055
   1150  4055				   .skipDrawP1
   1151  4055		       a9 00		      lda	#0
   1152  4057		       a8		      tay
   1153  4058		       4c 7e f0 	      jmp	.continueP1
   1154  405b
   1155  405b				   .kerloop		; enter at cycle 59??
   1156  405b
   1157  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
   1159  405c				   continuekernel2
   1160  405c		       a5 92		      lda	ballheight
   1161  405e
   1162  405e				  -	      ifconst	pfres
   1163  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
   1164  405e				  -	      sty	PF1L	;3
   1165  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   1166  405e				  -	      sty	PF2L	;3
   1167  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
   1168  405e				  -	      sty	PF1R	; 3 too early?
   1169  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   1170  405e				  -	      sty	PF2R	;3
   1171  405e					      else
   1172  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
   1173  4060		       84 0e		      sty	PF1L	;3
   1174  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   1175  4064		       84 0f		      sty	PF2L	;3
   1176  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
   1177  4068		       84 0e		      sty	PF1R	; 3 too early?
   1178  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   1179  406c		       84 0f		      sty	PF2R	;3
   1180  406e					      endif
   1181  406e
   1182  406e							; should be playfield+$38 for width=2
   1183  406e
   1184  406e		       c7 89		      dcp	bally
   1185  4070		       2a		      rol
   1186  4071		       2a		      rol
   1187  4072							; rol
   1188  4072							; rol
   1189  4072				   goback
   1190  4072		       85 1f		      sta	ENABL
   1191  4074				   .startkernel
   1192  4074		       a5 8f		      lda	player1height	;3
   1193  4076		       c7 86		      dcp	player1y	;5
   1194  4078		       90 db		      bcc	.skipDrawP1	;2
   1195  407a		       a4 86		      ldy	player1y	;3
   1196  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   1197  407e							; so it doesn't cross a page boundary!
   1198  407e
   1199  407e				   .continueP1
   1200  407e		       85 1c		      sta	GRP1	;3
   1201  4080
   1202  4080				  -	      ifnconst	player1colors
   1203  4080				  -	      lda	missile1height	;3
   1204  4080				  -	      dcp	missile1y	;5
   1205  4080				  -	      rol		;2
   1206  4080				  -	      rol		;2
   1207  4080				  -	      sta	ENAM1	;3
   1208  4080					      else
   1209  4080		       b1 87		      lda	(player1color),y
   1210  4082		       85 07		      sta	COLUP1
   1211  4084				  -	      ifnconst	playercolors
   1212  4084				  -	      sleep	7
   1213  4084					      else
   1214  4084		       ad 82 00 	      lda.w	player0colorstore
   1215  4087		       85 06		      sta	COLUP0
   1216  4089					      endif
   1217  4089					      endif
   1218  4089
   1219  4089				  -	      ifconst	pfres
   1220  4089				  -	      lda	playfield+pfres*pfwidth-132,x
   1221  4089				  -	      sta	PF1L	;3
   1222  4089				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   1223  4089				  -	      sta	PF2L	;3
   1224  4089				  -	      lda	playfield+pfres*pfwidth-129,x
   1225  4089				  -	      sta	PF1R	; 3 too early?
   1226  4089				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   1227  4089				  -	      sta	PF2R	;3
   1228  4089					      else
   1229  4089		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
   1230  408b		       85 0e		      sta	PF1L	;3
   1231  408d		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   1232  408f		       85 0f		      sta	PF2L	;3
   1233  4091		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
   1234  4093		       85 0e		      sta	PF1R	; 3 too early?
   1235  4095		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   1236  4097		       85 0f		      sta	PF2R	;3
   1237  4099					      endif
   1238  4099							; sleep 3
   1239  4099
   1240  4099		       a5 8e		      lda	player0height
   1241  409b		       c7 85		      dcp	player0y
   1242  409d		       90 b0		      bcc	.skipDrawP0
   1243  409f		       a4 85		      ldy	player0y
   1244  40a1		       b1 8a		      lda	(player0pointer),y
   1245  40a3				   .continueP0
   1246  40a3		       85 1b		      sta	GRP0
   1247  40a5
   1248  40a5					      ifnconst	no_blank_lines
   1249  40a5				  -	      ifnconst	playercolors
   1250  40a5				  -	      lda	missile0height	;3
   1251  40a5				  -	      dcp	missile0y	;5
   1252  40a5				  -	      sbc	stack1
   1253  40a5				  -	      sta	ENAM0	;3
   1254  40a5					      else
   1255  40a5		       b1 90		      lda	(player0color),y
   1256  40a7		       85 82		      sta	player0colorstore
      0  40a9					      sleep	6
      1  40a9				   .CYCLES    SET	6
      2  40a9
      3  40a9				  -	      IF	.CYCLES < 2
      4  40a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40a9				  -	      ERR
      6  40a9					      ENDIF
      7  40a9
      8  40a9				  -	      IF	.CYCLES & 1
      9  40a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40a9				  -	      nop	0
     11  40a9				  -	      ELSE
     12  40a9				  -	      bit	VSYNC
     13  40a9				  -	      ENDIF
     14  40a9				  -.CYCLES    SET	.CYCLES - 3
     15  40a9					      ENDIF
     16  40a9
     17  40a9					      REPEAT	.CYCLES / 2
     18  40a9		       ea		      nop
     17  40a9					      REPEND
     18  40aa		       ea		      nop
     17  40aa					      REPEND
     18  40ab		       ea		      nop
     19  40ac					      REPEND
   1258  40ac					      endif
   1259  40ac		       c6 9c		      dec	temp1
   1260  40ae		       d0 ab		      bne	continuekernel
   1261  40b0				  -	      else
   1262  40b0				  -	      dec	temp1
   1263  40b0				  -	      beq	altkernel2
   1264  40b0				  -	      ifconst	readpaddle
   1265  40b0				  -	      ldy	currentpaddle
   1266  40b0				  -	      lda	INPT0,y
   1267  40b0				  -	      bpl	noreadpaddle
   1268  40b0				  -	      inc	paddle
   1269  40b0				  -	      jmp	continuekernel2
   1270  40b0				  -noreadpaddle
   1271  40b0				  -	      sleep	2
   1272  40b0				  -	      jmp	continuekernel
   1273  40b0				  -	      else
   1274  40b0				  -	      ifnconst	playercolors
   1275  40b0				  -	      ifconst	PFcolors
   1276  40b0				  -	      txa
   1277  40b0				  -	      tay
   1278  40b0				  -	      lda	(pfcolortable),y
   1279  40b0				  -	      ifnconst	backgroundchange
   1280  40b0				  -	      sta	COLUPF
   1281  40b0				  -	      else
   1282  40b0				  -	      sta	COLUBK
   1283  40b0				  -	      endif
   1284  40b0				  -	      jmp	continuekernel
   1285  40b0				  -	      else
   1286  40b0				  -	      ifconst	kernelmacrodef
   1287  40b0				  -	      kernelmacro
   1288  40b0				  -	      else
   1289  40b0				  -	      sleep	12
   1290  40b0				  -	      endif
   1291  40b0				  -	      endif
   1292  40b0				  -	      else
   1293  40b0				  -	      lda	(player0color),y
   1294  40b0				  -	      sta	player0colorstore
   1295  40b0				  -	      sleep	4
   1296  40b0				  -	      endif
   1297  40b0				  -	      jmp	continuekernel
   1298  40b0				  -	      endif
   1299  40b0				  -altkernel2
   1300  40b0				  -	      txa
   1301  40b0				  -	      ifnconst	vertical_reflect
   1302  40b0				  -	      sbx	#256-pfwidth
   1303  40b0				  -	      else
   1304  40b0				  -	      sbx	#256-pfwidth/2
   1305  40b0				  -	      endif
   1306  40b0				  -	      bmi	lastkernelline
   1307  40b0				  -	      ifconst	pfrowheight
   1308  40b0				  -	      lda	#pfrowheight
   1309  40b0				  -	      else
   1310  40b0				  -	      ifnconst	pfres
   1311  40b0				  -	      lda	#8
   1312  40b0				  -	      else
   1313  40b0				  -	      lda	#(96/pfres)	; try to come close to the real size
   1314  40b0				  -	      endif
   1315  40b0				  -	      endif
   1316  40b0				  -	      sta	temp1
   1317  40b0				  -	      jmp	continuekernel
   1318  40b0					      endif
   1319  40b0
   1320  40b0				   altkernel
   1321  40b0
   1322  40b0				  -	      ifconst	PFmaskvalue
   1323  40b0				  -	      lda	#PFmaskvalue
   1324  40b0					      else
   1325  40b0		       a9 00		      lda	#0
   1326  40b2					      endif
   1327  40b2		       85 0e		      sta	PF1L
   1328  40b4		       85 0f		      sta	PF2
   1329  40b6
   1330  40b6
   1331  40b6							;sleep 3
   1332  40b6
   1333  40b6							;28 cycles to fix things
   1334  40b6							;minus 11=17
   1335  40b6
   1336  40b6							; lax temp4
   1337  40b6							; clc
   1338  40b6		       8a		      txa
   1339  40b7					      ifnconst	vertical_reflect
   1340  40b7		       cb fc		      sbx	#256-pfwidth
   1341  40b9				  -	      else
   1342  40b9				  -	      sbx	#256-pfwidth/2
   1343  40b9					      endif
   1344  40b9
   1345  40b9		       30 12		      bmi	lastkernelline
   1346  40bb
   1347  40bb				  -	      ifconst	PFcolorandheight
   1348  40bb				  -	      ifconst	pfres
   1349  40bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   1350  40bb				  -	      else
   1351  40bb				  -	      ldy	playfieldcolorandheight-87,x
   1352  40bb				  -	      endif
   1353  40bb				  -	      ifnconst	backgroundchange
   1354  40bb				  -	      sty	COLUPF
   1355  40bb				  -	      else
   1356  40bb				  -	      sty	COLUBK
   1357  40bb				  -	      endif
   1358  40bb				  -	      ifconst	pfres
   1359  40bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   1360  40bb				  -	      else
   1361  40bb				  -	      lda	playfieldcolorandheight-88,x
   1362  40bb				  -	      endif
   1363  40bb				  -	      sta.w	temp1
   1364  40bb					      endif
   1365  40bb				  -	      ifconst	PFheights
   1366  40bb				  -	      lsr
   1367  40bb				  -	      lsr
   1368  40bb				  -	      tay
   1369  40bb				  -	      lda	(pfheighttable),y
   1370  40bb				  -	      sta.w	temp1
   1371  40bb					      endif
   1372  40bb					      ifconst	PFcolors
   1373  40bb		       a8		      tay
   1374  40bc		       b1 f0		      lda	(pfcolortable),y
   1375  40be					      ifnconst	backgroundchange
   1376  40be		       85 08		      sta	COLUPF
   1377  40c0				  -	      else
   1378  40c0				  -	      sta	COLUBK
   1379  40c0					      endif
   1380  40c0				  -	      ifconst	pfrowheight
   1381  40c0				  -	      lda	#pfrowheight
   1382  40c0					      else
   1383  40c0					      ifnconst	pfres
   1384  40c0		       a9 08		      lda	#8
   1385  40c2				  -	      else
   1386  40c2				  -	      lda	#(96/pfres)	; try to come close to the real size
   1387  40c2					      endif
   1388  40c2					      endif
   1389  40c2		       85 9c		      sta	temp1
   1390  40c4					      endif
   1391  40c4					      ifnconst	PFcolorandheight
   1392  40c4				  -	      ifnconst	PFcolors
   1393  40c4				  -	      ifnconst	PFheights
   1394  40c4				  -	      ifnconst	no_blank_lines
   1395  40c4				  -			; read paddle 0
   1396  40c4				  -			; lo-res paddle read
   1397  40c4				  -			; bit INPT0
   1398  40c4				  -			; bmi paddleskipread
   1399  40c4				  -			; inc paddle0
   1400  40c4				  -			;donepaddleskip
   1401  40c4				  -	      sleep	10
   1402  40c4				  -	      ifconst	pfrowheight
   1403  40c4				  -	      lda	#pfrowheight
   1404  40c4				  -	      else
   1405  40c4				  -	      ifnconst	pfres
   1406  40c4				  -	      lda	#8
   1407  40c4				  -	      else
   1408  40c4				  -	      lda	#(96/pfres)	; try to come close to the real size
   1409  40c4				  -	      endif
   1410  40c4				  -	      endif
   1411  40c4				  -	      sta	temp1
   1412  40c4				  -	      endif
   1413  40c4				  -	      endif
   1414  40c4					      endif
   1415  40c4					      endif
   1416  40c4
   1417  40c4
   1418  40c4		       a5 92		      lda	ballheight
   1419  40c6		       c7 89		      dcp	bally
   1420  40c8		       e5 9f		      sbc	temp4
   1421  40ca
   1422  40ca
   1423  40ca		       4c 72 f0 	      jmp	goback
   1424  40cd
   1425  40cd
   1426  40cd					      ifnconst	no_blank_lines
   1427  40cd				   lastkernelline
   1428  40cd				  -	      ifnconst	PFcolors
   1429  40cd				  -	      sleep	10
   1430  40cd					      else
   1431  40cd		       a0 7c		      ldy	#124
   1432  40cf		       b1 f0		      lda	(pfcolortable),y
   1433  40d1		       85 08		      sta	COLUPF
   1434  40d3					      endif
   1435  40d3
   1436  40d3				  -	      ifconst	PFheights
   1437  40d3				  -	      ldx	#1
   1438  40d3				  -			;sleep 4
   1439  40d3				  -	      sleep	3	; this was over 1 cycle
   1440  40d3					      else
   1441  40d3		       a6 ef		      ldx	playfieldpos
   1442  40d5							;sleep 3
      0  40d5					      sleep	2	; this was over 1 cycle
      1  40d5				   .CYCLES    SET	2
      2  40d5
      3  40d5				  -	      IF	.CYCLES < 2
      4  40d5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40d5				  -	      ERR
      6  40d5					      ENDIF
      7  40d5
      8  40d5				  -	      IF	.CYCLES & 1
      9  40d5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40d5				  -	      nop	0
     11  40d5				  -	      ELSE
     12  40d5				  -	      bit	VSYNC
     13  40d5				  -	      ENDIF
     14  40d5				  -.CYCLES    SET	.CYCLES - 3
     15  40d5					      ENDIF
     16  40d5
     17  40d5					      REPEAT	.CYCLES / 2
     18  40d5		       ea		      nop
     19  40d6					      REPEND
   1444  40d6					      endif
   1445  40d6
   1446  40d6		       4c 1b f1 	      jmp	enterlastkernel
   1447  40d9
   1448  40d9				  -	      else
   1449  40d9				  -lastkernelline
   1450  40d9				  -
   1451  40d9				  -	      ifconst	PFheights
   1452  40d9				  -	      ldx	#1
   1453  40d9				  -			;sleep 5
   1454  40d9				  -	      sleep	4	; this was over 1 cycle
   1455  40d9				  -	      else
   1456  40d9				  -	      ldx	playfieldpos
   1457  40d9				  -			;sleep 4
   1458  40d9				  -	      sleep	3	; this was over 1 cycle
   1459  40d9				  -	      endif
   1460  40d9				  -
   1461  40d9				  -	      cpx	#0
   1462  40d9				  -	      bne	.enterfromNBL
   1463  40d9				  -	      jmp	no_blank_lines_bailout
   1464  40d9					      endif
   1465  40d9
   1466  40d9					      if	((<*)>$d5)
   1467  4100		       00 00 00 00*	      align	256
   1468  4100					      endif
   1469  4100							; this is a kludge to prevent page wrapping - fix!!!
   1470  4100
   1471  4100				   .skipDrawlastP1
   1472  4100		       a9 00		      lda	#0
   1473  4102		       a8		      tay		; added so we don't cross a page
   1474  4103		       4c 2d f1 	      jmp	.continuelastP1
   1475  4106
   1476  4106				   .endkerloop		; enter at cycle 59??
   1477  4106
   1478  4106		       ea		      nop
   1479  4107
   1480  4107				   .enterfromNBL
   1481  4107				  -	      ifconst	pfres
   1482  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
   1483  4107				  -	      sty	PF1L	;3
   1484  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   1485  4107				  -	      sty	PF2L	;3
   1486  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
   1487  4107				  -	      sty	PF1R	; possibly too early?
   1488  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   1489  4107				  -	      sty	PF2R	;3
   1490  4107					      else
   1491  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
   1492  410a		       84 0e		      sty	PF1L	;3
   1493  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   1494  410f		       84 0f		      sty	PF2L	;3
   1495  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
   1496  4114		       84 0e		      sty	PF1R	; possibly too early?
   1497  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   1498  4119		       84 0f		      sty	PF2R	;3
   1499  411b					      endif
   1500  411b
   1501  411b				   enterlastkernel
   1502  411b		       a5 92		      lda	ballheight
   1503  411d
   1504  411d							; tya
   1505  411d		       c7 89		      dcp	bally
   1506  411f							; sleep 4
   1507  411f
   1508  411f							; sbc stack3
   1509  411f		       2a		      rol
   1510  4120		       2a		      rol
   1511  4121		       85 1f		      sta	ENABL
   1512  4123
   1513  4123		       a5 8f		      lda	player1height	;3
   1514  4125		       c7 86		      dcp	player1y	;5
   1515  4127		       90 d7		      bcc	.skipDrawlastP1
   1516  4129		       a4 86		      ldy	player1y	;3
   1517  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   1518  412d							; so it doesn't cross a page boundary!
   1519  412d
   1520  412d				   .continuelastP1
   1521  412d		       85 1c		      sta	GRP1	;3
   1522  412f
   1523  412f				  -	      ifnconst	player1colors
   1524  412f				  -	      lda	missile1height	;3
   1525  412f				  -	      dcp	missile1y	;5
   1526  412f					      else
   1527  412f		       b1 87		      lda	(player1color),y
   1528  4131		       85 07		      sta	COLUP1
   1529  4133					      endif
   1530  4133
   1531  4133		       ca		      dex
   1532  4134							;dec temp4 ; might try putting this above PF writes
   1533  4134		       f0 37		      beq	endkernel
   1534  4136
   1535  4136
   1536  4136				  -	      ifconst	pfres
   1537  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
   1538  4136				  -	      sty	PF1L	;3
   1539  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   1540  4136				  -	      sty	PF2L	;3
   1541  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
   1542  4136				  -	      sty	PF1R	; possibly too early?
   1543  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   1544  4136				  -	      sty	PF2R	;3
   1545  4136					      else
   1546  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
   1547  4139		       84 0e		      sty	PF1L	;3
   1548  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   1549  413e		       84 0f		      sty	PF2L	;3
   1550  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
   1551  4143		       84 0e		      sty	PF1R	; possibly too early?
   1552  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   1553  4148		       84 0f		      sty	PF2R	;3
   1554  414a					      endif
   1555  414a
   1556  414a				  -	      ifnconst	player1colors
   1557  414a				  -	      rol		;2
   1558  414a				  -	      rol		;2
   1559  414a				  -	      sta	ENAM1	;3
   1560  414a					      else
   1561  414a				  -	      ifnconst	playercolors
   1562  414a				  -	      sleep	7
   1563  414a					      else
   1564  414a		       ad 82 00 	      lda.w	player0colorstore
   1565  414d		       85 06		      sta	COLUP0
   1566  414f					      endif
   1567  414f					      endif
   1568  414f
   1569  414f		       ad 8e 00 	      lda.w	player0height
   1570  4152		       c7 85		      dcp	player0y
   1571  4154		       90 11		      bcc	.skipDrawlastP0
   1572  4156		       a4 85		      ldy	player0y
   1573  4158		       b1 8a		      lda	(player0pointer),y
   1574  415a				   .continuelastP0
   1575  415a		       85 1b		      sta	GRP0
   1576  415c
   1577  415c
   1578  415c
   1579  415c					      ifnconst	no_blank_lines
   1580  415c		       a5 90		      lda	missile0height	;3
   1581  415e		       c7 91		      dcp	missile0y	;5
   1582  4160		       e5 f6		      sbc	stack1
   1583  4162		       85 1d		      sta	ENAM0	;3
   1584  4164		       4c 06 f1 	      jmp	.endkerloop
   1585  4167				  -	      else
   1586  4167				  -	      ifconst	readpaddle
   1587  4167				  -	      ldy	currentpaddle
   1588  4167				  -	      lda	INPT0,y
   1589  4167				  -	      bpl	noreadpaddle2
   1590  4167				  -	      inc	paddle
   1591  4167				  -	      jmp	.endkerloop
   1592  4167				  -noreadpaddle2
   1593  4167				  -	      sleep	4
   1594  4167				  -	      jmp	.endkerloop
   1595  4167				  -	      else		; no_blank_lines and no paddle reading
   1596  4167				  -	      pla
   1597  4167				  -	      pha		; 14 cycles in 4 bytes
   1598  4167				  -	      pla
   1599  4167				  -	      pha
   1600  4167				  -			; sleep 14
   1601  4167				  -	      jmp	.endkerloop
   1602  4167				  -	      endif
   1603  4167					      endif
   1604  4167
   1605  4167
   1606  4167							; ifconst donepaddleskip
   1607  4167							;paddleskipread
   1608  4167							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   1609  4167							; plus we get a lo-res paddle read
   1610  4167							; bmi donepaddleskip
   1611  4167							; endif
   1612  4167
   1613  4167				   .skipDrawlastP0
   1614  4167		       a9 00		      lda	#0
   1615  4169		       a8		      tay
   1616  416a		       4c 5a f1 	      jmp	.continuelastP0
   1617  416d
   1618  416d				  -	      ifconst	no_blank_lines
   1619  416d				  -no_blank_lines_bailout
   1620  416d				  -	      ldx	#0
   1621  416d					      endif
   1622  416d
   1623  416d				   endkernel
   1624  416d							; 6 digit score routine
   1625  416d		       86 0e		      stx	PF1
   1626  416f		       86 0f		      stx	PF2
   1627  4171		       86 0d		      stx	PF0
   1628  4173		       18		      clc
   1629  4174
   1630  4174				  -	      ifconst	pfrowheight
   1631  4174				  -	      lda	#pfrowheight+2
   1632  4174					      else
   1633  4174					      ifnconst	pfres
   1634  4174		       a9 0a		      lda	#10
   1635  4176				  -	      else
   1636  4176				  -	      lda	#(96/pfres)+2	; try to come close to the real size
   1637  4176					      endif
   1638  4176					      endif
   1639  4176
   1640  4176		       e5 ef		      sbc	playfieldpos
   1641  4178		       85 ef		      sta	playfieldpos
   1642  417a		       8a		      txa
   1643  417b
   1644  417b				  -	      ifconst	shakescreen
   1645  417b				  -	      bit	shakescreen
   1646  417b				  -	      bmi	noshakescreen2
   1647  417b				  -	      ldx	#$3D
   1648  417b				  -noshakescreen2
   1649  417b					      endif
   1650  417b
   1651  417b		       95 02		      sta	WSYNC,x
   1652  417d
   1653  417d							; STA WSYNC ;first one, need one more
   1654  417d		       85 0b		      sta	REFP0
   1655  417f		       85 0c		      sta	REFP1
   1656  4181		       85 1b		      STA	GRP0
   1657  4183		       85 1c		      STA	GRP1
   1658  4185							; STA PF1
   1659  4185							; STA PF2
   1660  4185		       85 2b		      sta	HMCLR
   1661  4187		       85 1d		      sta	ENAM0
   1662  4189		       85 1e		      sta	ENAM1
   1663  418b		       85 1f		      sta	ENABL
   1664  418d
   1665  418d		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   1666  418f		       85 85		      sta	player0y
   1667  4191		       a5 9e		      lda	temp3
   1668  4193		       85 86		      sta	player1y
   1669  4195				  -	      ifnconst	player1colors
   1670  4195				  -	      lda	temp6
   1671  4195				  -	      sta	missile1y
   1672  4195					      endif
   1673  4195				  -	      ifnconst	playercolors
   1674  4195				  -	      ifnconst	readpaddle
   1675  4195				  -	      lda	temp5
   1676  4195				  -	      sta	missile0y
   1677  4195				  -	      endif
   1678  4195					      endif
   1679  4195		       a5 f7		      lda	stack2
   1680  4197		       85 89		      sta	bally
   1681  4199
   1682  4199							; strangely, this isn't required any more. might have
   1683  4199							; resulted from the no_blank_lines score bounce fix
   1684  4199							;ifconst no_blank_lines
   1685  4199							;sta WSYNC
   1686  4199							;endif
   1687  4199
   1688  4199		       ad 84 02 	      lda	INTIM
   1689  419c		       18		      clc
   1690  419d				  -	      ifnconst	vblank_time
   1691  419d				  -	      adc	#43+12+87
   1692  419d					      else
   1693  419d		       69 8e		      adc	#vblank_time+12+87
   1694  419f
   1695  419f					      endif
   1696  419f							; sta WSYNC
   1697  419f		       8d 96 02 	      sta	TIM64T
   1698  41a2
   1699  41a2				  -	      ifconst	minikernel
   1700  41a2				  -	      jsr	minikernel
   1701  41a2					      endif
   1702  41a2
   1703  41a2							; now reassign temp vars for score pointers
   1704  41a2
   1705  41a2							; score pointers contain:
   1706  41a2							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1707  41a2							; swap lo2->temp1
   1708  41a2							; swap lo4->temp3
   1709  41a2							; swap lo6->temp5
   1710  41a2					      ifnconst	noscore
   1711  41a2		       a5 97		      lda	scorepointers+1
   1712  41a4							; ldy temp1
   1713  41a4		       85 9c		      sta	temp1
   1714  41a6							; sty scorepointers+1
   1715  41a6
   1716  41a6		       a5 99		      lda	scorepointers+3
   1717  41a8							; ldy temp3
   1718  41a8		       85 9e		      sta	temp3
   1719  41aa							; sty scorepointers+3
   1720  41aa
   1721  41aa
   1722  41aa		       85 2b		      sta	HMCLR
   1723  41ac		       ba		      tsx
   1724  41ad		       86 f6		      stx	stack1
   1725  41af		       a2 e0		      ldx	#$E0
   1726  41b1		       86 20		      stx	HMP0
   1727  41b3
   1728  41b3		       a5 a3		      LDA	scorecolor
   1729  41b5		       85 06		      STA	COLUP0
   1730  41b7		       85 07		      STA	COLUP1
   1731  41b9				  -	      ifconst	scorefade
   1732  41b9				  -	      STA	stack2
   1733  41b9					      endif
   1734  41b9					      ifconst	pfscore
   1735  41b9		       a5 f4		      lda	pfscorecolor
   1736  41bb		       85 08		      sta	COLUPF
   1737  41bd					      endif
   1738  41bd		       85 02		      sta	WSYNC
   1739  41bf		       a2 00		      ldx	#0
   1740  41c1		       86 1b		      STx	GRP0
   1741  41c3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1742  41c5
   1743  41c5		       a5 9b		      lda	scorepointers+5
   1744  41c7							; ldy temp5
   1745  41c7		       95 a0		      sta	temp5,x
   1746  41c9							; sty scorepointers+5
   1747  41c9		       a9 ff		      lda	#>scoretable
   1748  41cb		       85 97		      sta	scorepointers+1
   1749  41cd		       85 99		      sta	scorepointers+3
   1750  41cf		       85 9b		      sta	scorepointers+5
   1751  41d1		       85 9d		      sta	temp2
   1752  41d3		       85 9f		      sta	temp4
   1753  41d5		       85 a1		      sta	temp6
   1754  41d7		       a0 07		      LDY	#7
   1755  41d9		       84 25		      STY	VDELP0
   1756  41db		       85 10		      STA	RESP0
   1757  41dd		       85 11		      STA	RESP1
   1758  41df
   1759  41df
   1760  41df		       a9 03		      LDA	#$03
   1761  41e1		       85 04		      STA	NUSIZ0
   1762  41e3		       85 05		      STA	NUSIZ1
   1763  41e5		       85 26		      STA	VDELP1
   1764  41e7		       a9 f0		      LDA	#$F0
   1765  41e9		       85 21		      STA	HMP1
   1766  41eb		       b1 96		      lda	(scorepointers),y
   1767  41ed		       85 1b		      sta	GRP0
   1768  41ef		       85 2a		      STA	HMOVE	; cycle 73 ?
   1769  41f1		       4c 09 f2 	      jmp	beginscore
   1770  41f4
   1771  41f4
   1772  41f4					      if	((<*)>$d4)
   1773  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   1774  4200					      endif
   1775  4200
   1776  4200				   loop2
   1777  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
   1778  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   1779  4204					      ifconst	pfscore
   1780  4204		       ad f2 00 	      lda.w	pfscore1
   1781  4207		       85 0e		      sta	PF1
   1782  4209				  -	      else
   1783  4209				  -	      ifconst	scorefade
   1784  4209				  -	      sleep	2
   1785  4209				  -	      dec	stack2	; decrement the temporary scorecolor
   1786  4209				  -	      else
   1787  4209				  -	      sleep	7
   1788  4209				  -	      endif
   1789  4209					      endif
   1790  4209							; cycle 0
   1791  4209				   beginscore
   1792  4209		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   1793  420b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   1794  420d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   1795  420f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   1796  4211		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   1797  4213		       9a		      txs
   1798  4214		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   1799  4216				  -	      ifconst	scorefade
   1800  4216				  -	      lda	stack2
   1801  4216					      else
      0  4216					      sleep	3
      1  4216				   .CYCLES    SET	3
      2  4216
      3  4216				  -	      IF	.CYCLES < 2
      4  4216				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4216				  -	      ERR
      6  4216					      ENDIF
      7  4216
      8  4216					      IF	.CYCLES & 1
      9  4216					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4216		       04 00		      nop	0
     11  4218				  -	      ELSE
     12  4218				  -	      bit	VSYNC
     13  4218					      ENDIF
     14  4218				   .CYCLES    SET	.CYCLES - 3
     15  4218					      ENDIF
     16  4218
     17  4218				  -	      REPEAT	.CYCLES / 2
     18  4218				  -	      nop
     19  4218					      REPEND
   1803  4218					      endif
   1804  4218
   1805  4218					      ifconst	pfscore
   1806  4218		       a5 f3		      lda	pfscore2
   1807  421a		       85 0e		      sta	PF1
   1808  421c				  -	      else
   1809  421c				  -	      ifconst	scorefade
   1810  421c				  -	      sta	COLUP0
   1811  421c				  -	      sta	COLUP1
   1812  421c				  -	      else
   1813  421c				  -	      sleep	6
   1814  421c				  -	      endif
   1815  421c					      endif
   1816  421c
   1817  421c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   1818  421e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   1819  4220		       ba		      tsx
   1820  4221		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   1821  4223		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   1822  4225		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   1823  4227		       88		      dey
   1824  4228		       10 d6		      bpl	loop2	;+2 60 180
   1825  422a
   1826  422a		       a6 f6		      ldx	stack1
   1827  422c		       9a		      txs
   1828  422d							; lda scorepointers+1
   1829  422d		       a4 9c		      ldy	temp1
   1830  422f							; sta temp1
   1831  422f		       84 97		      sty	scorepointers+1
   1832  4231
   1833  4231		       a9 00		      LDA	#0
   1834  4233		       85 0e		      sta	PF1
   1835  4235		       85 1b		      STA	GRP0
   1836  4237		       85 1c		      STA	GRP1
   1837  4239		       85 25		      STA	VDELP0
   1838  423b		       85 26		      STA	VDELP1	;do we need these
   1839  423d		       85 04		      STA	NUSIZ0
   1840  423f		       85 05		      STA	NUSIZ1
   1841  4241
   1842  4241							; lda scorepointers+3
   1843  4241		       a4 9e		      ldy	temp3
   1844  4243							; sta temp3
   1845  4243		       84 99		      sty	scorepointers+3
   1846  4245
   1847  4245							; lda scorepointers+5
   1848  4245		       a4 a0		      ldy	temp5
   1849  4247							; sta temp5
   1850  4247		       84 9b		      sty	scorepointers+5
   1851  4249					      endif		;noscore
   1852  4249		       a9 c2		      LDA	#%11000010
   1853  424b		       85 02		      sta	WSYNC
   1854  424d		       85 01		      STA	VBLANK
      0  424f					      RETURN
      1  424f				  -	      ifnconst	bankswitch
      2  424f				  -	      rts
      3  424f					      else
      4  424f		       4c dd ff 	      jmp	BS_return
      5  4252					      endif
   1856  4252
   1857  4252				  -	      ifconst	shakescreen
   1858  4252				  -doshakescreen
   1859  4252				  -	      bit	shakescreen
   1860  4252				  -	      bmi	noshakescreen
   1861  4252				  -	      sta	WSYNC
   1862  4252				  -noshakescreen
   1863  4252				  -	      ldx	missile0height
   1864  4252				  -	      inx
   1865  4252				  -	      rts
   1866  4252					      endif
   1867  4252
   1868  4252							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1869  4252
   1870  4252				   start
   1871  4252		       78		      sei
   1872  4253		       d8		      cld
   1873  4254		       a0 00		      ldy	#0
   1874  4256		       a5 d0		      lda	$D0
   1875  4258		       c9 2c		      cmp	#$2C	;check RAM location #1
   1876  425a		       d0 07		      bne	MachineIs2600
   1877  425c		       a5 d1		      lda	$D1
   1878  425e		       c9 a9		      cmp	#$A9	;check RAM location #2
   1879  4260		       d0 01		      bne	MachineIs2600
   1880  4262		       88		      dey
   1881  4263				   MachineIs2600
   1882  4263		       a2 00		      ldx	#0
   1883  4265		       8a		      txa
   1884  4266				   clearmem
   1885  4266		       e8		      inx
   1886  4267		       9a		      txs
   1887  4268		       48		      pha
   1888  4269		       d0 fb		      bne	clearmem
   1889  426b		       84 9c		      sty	temp1
   1890  426d					      ifnconst	multisprite
   1891  426d				  -	      ifconst	pfrowheight
   1892  426d				  -	      lda	#pfrowheight
   1893  426d					      else
   1894  426d				  -	      ifconst	pfres
   1895  426d				  -	      lda	#(96/pfres)
   1896  426d					      else
   1897  426d		       a9 08		      lda	#8
   1898  426f					      endif
   1899  426f					      endif
   1900  426f		       85 ef		      sta	playfieldpos
   1901  4271					      endif
   1902  4271		       a2 05		      ldx	#5
   1903  4273				   initscore
   1904  4273		       a9 74		      lda	#<scoretable
   1905  4275		       95 96		      sta	scorepointers,x
   1906  4277		       ca		      dex
   1907  4278		       10 f9		      bpl	initscore
   1908  427a		       a9 01		      lda	#1
   1909  427c		       85 0a		      sta	CTRLPF
   1910  427e		       0d 84 02 	      ora	INTIM
   1911  4281		       85 a2		      sta	rand
   1912  4283
   1913  4283				  -	      ifconst	multisprite
   1914  4283				  -	      jsr	multisprite_setup
   1915  4283					      endif
   1916  4283
   1917  4283				  -	      ifnconst	bankswitch
   1918  4283				  -	      jmp	game
   1919  4283					      else
   1920  4283		       a9 8f		      lda	#>(game-1)
   1921  4285		       48		      pha
   1922  4286		       a9 ff		      lda	#<(game-1)
   1923  4288		       48		      pha
   1924  4289		       48		      pha
   1925  428a		       48		      pha
   1926  428b		       a2 01		      ldx	#1
   1927  428d		       4c eb ff 	      jmp	BS_jsr
   1928  4290					      endif
   1929  4290							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1930  4290
   1931  4290							; playfield drawing routines
   1932  4290							; you get a 32x12 bitmapped display in a single color :)
   1933  4290							; 0-31 and 0-11
   1934  4290
   1935  4290				   pfclear		; clears playfield - or fill with pattern
   1936  4290				  -	      ifconst	pfres
   1937  4290				  -	      ldx	#pfres*pfwidth-1
   1938  4290					      else
   1939  4290		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   1940  4292					      endif
   1941  4292				   pfclear_loop
   1942  4292					      ifnconst	superchip
   1943  4292		       95 a4		      sta	playfield,x
   1944  4294				  -	      else
   1945  4294				  -	      sta	playfield-128,x
   1946  4294					      endif
   1947  4294		       ca		      dex
   1948  4295		       10 fb		      bpl	pfclear_loop
      0  4297					      RETURN
      1  4297				  -	      ifnconst	bankswitch
      2  4297				  -	      rts
      3  4297					      else
      4  4297		       4c dd ff 	      jmp	BS_return
      5  429a					      endif
   1950  429a
   1951  429a				   setuppointers
   1952  429a		       86 9d		      stx	temp2	; store on.off.flip value
   1953  429c		       aa		      tax		; put x-value in x 
   1954  429d		       4a		      lsr
   1955  429e		       4a		      lsr
   1956  429f		       4a		      lsr		; divide x pos by 8 
   1957  42a0		       85 9c		      sta	temp1
   1958  42a2		       98		      tya
   1959  42a3		       0a		      asl
   1960  42a4					      if	pfwidth=4
   1961  42a4		       0a		      asl		; multiply y pos by 4
   1962  42a5					      endif		; else multiply by 2
   1963  42a5		       18		      clc
   1964  42a6		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   1965  42a8		       a8		      tay		; put the value in y
   1966  42a9		       a5 9d		      lda	temp2	; restore on.off.flip value
   1967  42ab		       60		      rts
   1968  42ac
   1969  42ac				   pfread
   1970  42ac							;x=xvalue, y=yvalue
   1971  42ac		       20 9a f2 	      jsr	setuppointers
   1972  42af		       bd 44 f3 	      lda	setbyte,x
   1973  42b2		       39 a4 00 	      and	playfield,y
   1974  42b5		       5d 44 f3 	      eor	setbyte,x
   1975  42b8							; beq readzero
   1976  42b8							; lda #1
   1977  42b8							; readzero
      0  42b8					      RETURN
      1  42b8				  -	      ifnconst	bankswitch
      2  42b8				  -	      rts
      3  42b8					      else
      4  42b8		       4c dd ff 	      jmp	BS_return
      5  42bb					      endif
   1979  42bb
   1980  42bb				   pfpixel
   1981  42bb							;x=xvalue, y=yvalue, a=0,1,2
   1982  42bb		       20 9a f2 	      jsr	setuppointers
   1983  42be
   1984  42be					      ifconst	bankswitch
   1985  42be		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1986  42c0		       f0 0f		      beq	pixelon_r	; if "on" go to on
   1987  42c2		       4a		      lsr
   1988  42c3		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   1989  42c5		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1990  42c8		       5d 44 f3 	      eor	setbyte,x
   1991  42cb				  -	      ifconst	superchip
   1992  42cb				  -	      sta	playfield-128,y
   1993  42cb					      else
   1994  42cb		       99 a4 00 	      sta	playfield,y
   1995  42ce					      endif
      0  42ce					      RETURN
      1  42ce				  -	      ifnconst	bankswitch
      2  42ce				  -	      rts
      3  42ce					      else
      4  42ce		       4c dd ff 	      jmp	BS_return
      5  42d1					      endif
   1997  42d1				   pixelon_r
   1998  42d1		       b9 a4 00 	      lda	playfield,y
   1999  42d4		       1d 44 f3 	      ora	setbyte,x
   2000  42d7				  -	      ifconst	superchip
   2001  42d7				  -	      sta	playfield-128,y
   2002  42d7					      else
   2003  42d7		       99 a4 00 	      sta	playfield,y
   2004  42da					      endif
      0  42da					      RETURN
      1  42da				  -	      ifnconst	bankswitch
      2  42da				  -	      rts
      3  42da					      else
      4  42da		       4c dd ff 	      jmp	BS_return
      5  42dd					      endif
   2006  42dd				   pixeloff_r
   2007  42dd		       bd 44 f3 	      lda	setbyte,x
   2008  42e0		       49 ff		      eor	#$ff
   2009  42e2		       39 a4 00 	      and	playfield,y
   2010  42e5				  -	      ifconst	superchip
   2011  42e5				  -	      sta	playfield-128,y
   2012  42e5					      else
   2013  42e5		       99 a4 00 	      sta	playfield,y
   2014  42e8					      endif
      0  42e8					      RETURN
      1  42e8				  -	      ifnconst	bankswitch
      2  42e8				  -	      rts
      3  42e8					      else
      4  42e8		       4c dd ff 	      jmp	BS_return
      5  42eb					      endif
   2016  42eb
   2017  42eb				  -	      else
   2018  42eb				  -	      jmp	plotpoint
   2019  42eb					      endif
   2020  42eb
   2021  42eb				   pfhline
   2022  42eb							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   2023  42eb		       20 9a f2 	      jsr	setuppointers
   2024  42ee		       4c f8 f2 	      jmp	noinc
   2025  42f1				   keepgoing
   2026  42f1		       e8		      inx
   2027  42f2		       8a		      txa
   2028  42f3		       29 07		      and	#7
   2029  42f5		       d0 01		      bne	noinc
   2030  42f7		       c8		      iny
   2031  42f8				   noinc
   2032  42f8		       20 1d f3 	      jsr	plotpoint
   2033  42fb		       e4 9e		      cpx	temp3
   2034  42fd		       30 f2		      bmi	keepgoing
      0  42ff					      RETURN
      1  42ff				  -	      ifnconst	bankswitch
      2  42ff				  -	      rts
      3  42ff					      else
      4  42ff		       4c dd ff 	      jmp	BS_return
      5  4302					      endif
   2036  4302
   2037  4302				   pfvline
   2038  4302							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   2039  4302		       20 9a f2 	      jsr	setuppointers
   2040  4305		       84 9c		      sty	temp1	; store memory location offset
   2041  4307		       e6 9e		      inc	temp3	; increase final x by 1 
   2042  4309		       a5 9e		      lda	temp3
   2043  430b		       0a		      asl
   2044  430c					      if	pfwidth=4
   2045  430c		       0a		      asl		; multiply by 4
   2046  430d					      endif		; else multiply by 2
   2047  430d		       85 9e		      sta	temp3	; store it
   2048  430f							; Thanks to Michael Rideout for fixing a bug in this code
   2049  430f							; right now, temp1=y=starting memory location, temp3=final
   2050  430f							; x should equal original x value
   2051  430f				   keepgoingy
   2052  430f		       20 1d f3 	      jsr	plotpoint
   2053  4312		       c8		      iny
   2054  4313		       c8		      iny
   2055  4314					      if	pfwidth=4
   2056  4314		       c8		      iny
   2057  4315		       c8		      iny
   2058  4316					      endif
   2059  4316		       c4 9e		      cpy	temp3
   2060  4318		       30 f5		      bmi	keepgoingy
      0  431a					      RETURN
      1  431a				  -	      ifnconst	bankswitch
      2  431a				  -	      rts
      3  431a					      else
      4  431a		       4c dd ff 	      jmp	BS_return
      5  431d					      endif
   2062  431d
   2063  431d				   plotpoint
   2064  431d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   2065  431f		       f0 0d		      beq	pixelon	; if "on" go to on
   2066  4321		       4a		      lsr
   2067  4322		       b0 14		      bcs	pixeloff	; value is 1 if true
   2068  4324		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   2069  4327		       5d 44 f3 	      eor	setbyte,x
   2070  432a				  -	      ifconst	superchip
   2071  432a				  -	      sta	playfield-128,y
   2072  432a					      else
   2073  432a		       99 a4 00 	      sta	playfield,y
   2074  432d					      endif
   2075  432d		       60		      rts
   2076  432e				   pixelon
   2077  432e		       b9 a4 00 	      lda	playfield,y
   2078  4331		       1d 44 f3 	      ora	setbyte,x
   2079  4334				  -	      ifconst	superchip
   2080  4334				  -	      sta	playfield-128,y
   2081  4334					      else
   2082  4334		       99 a4 00 	      sta	playfield,y
   2083  4337					      endif
   2084  4337		       60		      rts
   2085  4338				   pixeloff
   2086  4338		       bd 44 f3 	      lda	setbyte,x
   2087  433b		       49 ff		      eor	#$ff
   2088  433d		       39 a4 00 	      and	playfield,y
   2089  4340				  -	      ifconst	superchip
   2090  4340				  -	      sta	playfield-128,y
   2091  4340					      else
   2092  4340		       99 a4 00 	      sta	playfield,y
   2093  4343					      endif
   2094  4343		       60		      rts
   2095  4344
   2096  4344				   setbyte
   2097  4344					      ifnconst	pfcenter
   2098  4344		       80		      .byte.b	$80
   2099  4345		       40		      .byte.b	$40
   2100  4346		       20		      .byte.b	$20
   2101  4347		       10		      .byte.b	$10
   2102  4348		       08		      .byte.b	$08
   2103  4349		       04		      .byte.b	$04
   2104  434a		       02		      .byte.b	$02
   2105  434b		       01		      .byte.b	$01
   2106  434c					      endif
   2107  434c		       01		      .byte.b	$01
   2108  434d		       02		      .byte.b	$02
   2109  434e		       04		      .byte.b	$04
   2110  434f		       08		      .byte.b	$08
   2111  4350		       10		      .byte.b	$10
   2112  4351		       20		      .byte.b	$20
   2113  4352		       40		      .byte.b	$40
   2114  4353		       80		      .byte.b	$80
   2115  4354		       80		      .byte.b	$80
   2116  4355		       40		      .byte.b	$40
   2117  4356		       20		      .byte.b	$20
   2118  4357		       10		      .byte.b	$10
   2119  4358		       08		      .byte.b	$08
   2120  4359		       04		      .byte.b	$04
   2121  435a		       02		      .byte.b	$02
   2122  435b		       01		      .byte.b	$01
   2123  435c		       01		      .byte.b	$01
   2124  435d		       02		      .byte.b	$02
   2125  435e		       04		      .byte.b	$04
   2126  435f		       08		      .byte.b	$08
   2127  4360		       10		      .byte.b	$10
   2128  4361		       20		      .byte.b	$20
   2129  4362		       40		      .byte.b	$40
   2130  4363		       80		      .byte.b	$80
   2131  4364							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2132  4364
   2133  4364				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   2134  4364		       d0 15		      bne	notleft
   2135  4366							;left
   2136  4366				  -	      ifconst	pfres
   2137  4366				  -	      ldx	#pfres*4
   2138  4366					      else
   2139  4366		       a2 30		      ldx	#48
   2140  4368					      endif
   2141  4368				   leftloop
   2142  4368		       b5 a3		      lda	playfield-1,x
   2143  436a		       4a		      lsr
   2144  436b
   2145  436b				  -	      ifconst	superchip
   2146  436b				  -	      lda	playfield-2,x
   2147  436b				  -	      rol
   2148  436b				  -	      sta	playfield-130,x
   2149  436b				  -	      lda	playfield-3,x
   2150  436b				  -	      ror
   2151  436b				  -	      sta	playfield-131,x
   2152  436b				  -	      lda	playfield-4,x
   2153  436b				  -	      rol
   2154  436b				  -	      sta	playfield-132,x
   2155  436b				  -	      lda	playfield-1,x
   2156  436b				  -	      ror
   2157  436b				  -	      sta	playfield-129,x
   2158  436b					      else
   2159  436b		       36 a2		      rol	playfield-2,x
   2160  436d		       76 a1		      ror	playfield-3,x
   2161  436f		       36 a0		      rol	playfield-4,x
   2162  4371		       76 a3		      ror	playfield-1,x
   2163  4373					      endif
   2164  4373
   2165  4373		       8a		      txa
   2166  4374		       cb 04		      sbx	#4
   2167  4376		       d0 f0		      bne	leftloop
      0  4378					      RETURN
      1  4378				  -	      ifnconst	bankswitch
      2  4378				  -	      rts
      3  4378					      else
      4  4378		       4c dd ff 	      jmp	BS_return
      5  437b					      endif
   2169  437b
   2170  437b				   notleft
   2171  437b		       4a		      lsr
   2172  437c		       90 15		      bcc	notright
   2173  437e							;right
   2174  437e
   2175  437e				  -	      ifconst	pfres
   2176  437e				  -	      ldx	#pfres*4
   2177  437e					      else
   2178  437e		       a2 30		      ldx	#48
   2179  4380					      endif
   2180  4380				   rightloop
   2181  4380		       b5 a0		      lda	playfield-4,x
   2182  4382		       4a		      lsr
   2183  4383				  -	      ifconst	superchip
   2184  4383				  -	      lda	playfield-3,x
   2185  4383				  -	      rol
   2186  4383				  -	      sta	playfield-131,x
   2187  4383				  -	      lda	playfield-2,x
   2188  4383				  -	      ror
   2189  4383				  -	      sta	playfield-130,x
   2190  4383				  -	      lda	playfield-1,x
   2191  4383				  -	      rol
   2192  4383				  -	      sta	playfield-129,x
   2193  4383				  -	      lda	playfield-4,x
   2194  4383				  -	      ror
   2195  4383				  -	      sta	playfield-132,x
   2196  4383					      else
   2197  4383		       36 a1		      rol	playfield-3,x
   2198  4385		       76 a2		      ror	playfield-2,x
   2199  4387		       36 a3		      rol	playfield-1,x
   2200  4389		       76 a0		      ror	playfield-4,x
   2201  438b					      endif
   2202  438b		       8a		      txa
   2203  438c		       cb 04		      sbx	#4
   2204  438e		       d0 f0		      bne	rightloop
      0  4390					      RETURN
      1  4390				  -	      ifnconst	bankswitch
      2  4390				  -	      rts
      3  4390					      else
      4  4390		       4c dd ff 	      jmp	BS_return
      5  4393					      endif
   2206  4393
   2207  4393				   notright
   2208  4393		       4a		      lsr
   2209  4394		       90 4b		      bcc	notup
   2210  4396							;up
   2211  4396		       4a		      lsr
   2212  4397		       90 02		      bcc	onedecup
   2213  4399		       c6 ef		      dec	playfieldpos
   2214  439b				   onedecup
   2215  439b		       c6 ef		      dec	playfieldpos
   2216  439d		       f0 02		      beq	shiftdown
   2217  439f		       10 3d		      bpl	noshiftdown2
   2218  43a1				   shiftdown
   2219  43a1				  -	      ifconst	pfrowheight
   2220  43a1				  -	      lda	#pfrowheight
   2221  43a1					      else
   2222  43a1					      ifnconst	pfres
   2223  43a1		       a9 08		      lda	#8
   2224  43a3				  -	      else
   2225  43a3				  -	      lda	#(96/pfres)	; try to come close to the real size
   2226  43a3					      endif
   2227  43a3					      endif
   2228  43a3
   2229  43a3		       85 ef		      sta	playfieldpos
   2230  43a5		       a5 a7		      lda	playfield+3
   2231  43a7		       85 9f		      sta	temp4
   2232  43a9		       a5 a6		      lda	playfield+2
   2233  43ab		       85 9e		      sta	temp3
   2234  43ad		       a5 a5		      lda	playfield+1
   2235  43af		       85 9d		      sta	temp2
   2236  43b1		       a5 a4		      lda	playfield
   2237  43b3		       85 9c		      sta	temp1
   2238  43b5		       a2 00		      ldx	#0
   2239  43b7				   up2
   2240  43b7		       b5 a8		      lda	playfield+4,x
   2241  43b9				  -	      ifconst	superchip
   2242  43b9				  -	      sta	playfield-128,x
   2243  43b9				  -	      lda	playfield+5,x
   2244  43b9				  -	      sta	playfield-127,x
   2245  43b9				  -	      lda	playfield+6,x
   2246  43b9				  -	      sta	playfield-126,x
   2247  43b9				  -	      lda	playfield+7,x
   2248  43b9				  -	      sta	playfield-125,x
   2249  43b9					      else
   2250  43b9		       95 a4		      sta	playfield,x
   2251  43bb		       b5 a9		      lda	playfield+5,x
   2252  43bd		       95 a5		      sta	playfield+1,x
   2253  43bf		       b5 aa		      lda	playfield+6,x
   2254  43c1		       95 a6		      sta	playfield+2,x
   2255  43c3		       b5 ab		      lda	playfield+7,x
   2256  43c5		       95 a7		      sta	playfield+3,x
   2257  43c7					      endif
   2258  43c7		       8a		      txa
   2259  43c8		       cb fc		      sbx	#252
   2260  43ca				  -	      ifconst	pfres
   2261  43ca				  -	      cpx	#(pfres-1)*4
   2262  43ca					      else
   2263  43ca		       e0 2c		      cpx	#44
   2264  43cc					      endif
   2265  43cc		       d0 e9		      bne	up2
   2266  43ce
   2267  43ce		       a5 9f		      lda	temp4
   2268  43d0
   2269  43d0				  -	      ifconst	superchip
   2270  43d0				  -	      ifconst	pfres
   2271  43d0				  -	      sta	playfield+pfres*4-129
   2272  43d0				  -	      lda	temp3
   2273  43d0				  -	      sta	playfield+pfres*4-130
   2274  43d0				  -	      lda	temp2
   2275  43d0				  -	      sta	playfield+pfres*4-131
   2276  43d0				  -	      lda	temp1
   2277  43d0				  -	      sta	playfield+pfres*4-132
   2278  43d0				  -	      else
   2279  43d0				  -	      sta	playfield+47-128
   2280  43d0				  -	      lda	temp3
   2281  43d0				  -	      sta	playfield+46-128
   2282  43d0				  -	      lda	temp2
   2283  43d0				  -	      sta	playfield+45-128
   2284  43d0				  -	      lda	temp1
   2285  43d0				  -	      sta	playfield+44-128
   2286  43d0				  -	      endif
   2287  43d0					      else
   2288  43d0				  -	      ifconst	pfres
   2289  43d0				  -	      sta	playfield+pfres*4-1
   2290  43d0				  -	      lda	temp3
   2291  43d0				  -	      sta	playfield+pfres*4-2
   2292  43d0				  -	      lda	temp2
   2293  43d0				  -	      sta	playfield+pfres*4-3
   2294  43d0				  -	      lda	temp1
   2295  43d0				  -	      sta	playfield+pfres*4-4
   2296  43d0					      else
   2297  43d0		       85 d3		      sta	playfield+47
   2298  43d2		       a5 9e		      lda	temp3
   2299  43d4		       85 d2		      sta	playfield+46
   2300  43d6		       a5 9d		      lda	temp2
   2301  43d8		       85 d1		      sta	playfield+45
   2302  43da		       a5 9c		      lda	temp1
   2303  43dc		       85 d0		      sta	playfield+44
   2304  43de					      endif
   2305  43de					      endif
   2306  43de				   noshiftdown2
      0  43de					      RETURN
      1  43de				  -	      ifnconst	bankswitch
      2  43de				  -	      rts
      3  43de					      else
      4  43de		       4c dd ff 	      jmp	BS_return
      5  43e1					      endif
   2308  43e1
   2309  43e1
   2310  43e1				   notup
   2311  43e1							;down
   2312  43e1		       4a		      lsr
   2313  43e2		       b0 02		      bcs	oneincup
   2314  43e4		       e6 ef		      inc	playfieldpos
   2315  43e6				   oneincup
   2316  43e6		       e6 ef		      inc	playfieldpos
   2317  43e8		       a5 ef		      lda	playfieldpos
   2318  43ea
   2319  43ea				  -	      ifconst	pfrowheight
   2320  43ea				  -	      cmp	#pfrowheight+1
   2321  43ea					      else
   2322  43ea					      ifnconst	pfres
   2323  43ea		       c9 09		      cmp	#9
   2324  43ec				  -	      else
   2325  43ec				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   2326  43ec					      endif
   2327  43ec					      endif
   2328  43ec
   2329  43ec		       90 3b		      bcc	noshiftdown
   2330  43ee		       a9 01		      lda	#1
   2331  43f0		       85 ef		      sta	playfieldpos
   2332  43f2
   2333  43f2				  -	      ifconst	pfres
   2334  43f2				  -	      lda	playfield+pfres*4-1
   2335  43f2				  -	      sta	temp4
   2336  43f2				  -	      lda	playfield+pfres*4-2
   2337  43f2				  -	      sta	temp3
   2338  43f2				  -	      lda	playfield+pfres*4-3
   2339  43f2				  -	      sta	temp2
   2340  43f2				  -	      lda	playfield+pfres*4-4
   2341  43f2					      else
   2342  43f2		       a5 d3		      lda	playfield+47
   2343  43f4		       85 9f		      sta	temp4
   2344  43f6		       a5 d2		      lda	playfield+46
   2345  43f8		       85 9e		      sta	temp3
   2346  43fa		       a5 d1		      lda	playfield+45
   2347  43fc		       85 9d		      sta	temp2
   2348  43fe		       a5 d0		      lda	playfield+44
   2349  4400					      endif
   2350  4400
   2351  4400		       85 9c		      sta	temp1
   2352  4402
   2353  4402				  -	      ifconst	pfres
   2354  4402				  -	      ldx	#(pfres-1)*4
   2355  4402					      else
   2356  4402		       a2 2c		      ldx	#44
   2357  4404					      endif
   2358  4404				   down2
   2359  4404		       b5 a3		      lda	playfield-1,x
   2360  4406				  -	      ifconst	superchip
   2361  4406				  -	      sta	playfield-125,x
   2362  4406				  -	      lda	playfield-2,x
   2363  4406				  -	      sta	playfield-126,x
   2364  4406				  -	      lda	playfield-3,x
   2365  4406				  -	      sta	playfield-127,x
   2366  4406				  -	      lda	playfield-4,x
   2367  4406				  -	      sta	playfield-128,x
   2368  4406					      else
   2369  4406		       95 a7		      sta	playfield+3,x
   2370  4408		       b5 a2		      lda	playfield-2,x
   2371  440a		       95 a6		      sta	playfield+2,x
   2372  440c		       b5 a1		      lda	playfield-3,x
   2373  440e		       95 a5		      sta	playfield+1,x
   2374  4410		       b5 a0		      lda	playfield-4,x
   2375  4412		       95 a4		      sta	playfield,x
   2376  4414					      endif
   2377  4414		       8a		      txa
   2378  4415		       cb 04		      sbx	#4
   2379  4417		       d0 eb		      bne	down2
   2380  4419
   2381  4419		       a5 9f		      lda	temp4
   2382  441b				  -	      ifconst	superchip
   2383  441b				  -	      sta	playfield-125
   2384  441b				  -	      lda	temp3
   2385  441b				  -	      sta	playfield-126
   2386  441b				  -	      lda	temp2
   2387  441b				  -	      sta	playfield-127
   2388  441b				  -	      lda	temp1
   2389  441b				  -	      sta	playfield-128
   2390  441b					      else
   2391  441b		       85 a7		      sta	playfield+3
   2392  441d		       a5 9e		      lda	temp3
   2393  441f		       85 a6		      sta	playfield+2
   2394  4421		       a5 9d		      lda	temp2
   2395  4423		       85 a5		      sta	playfield+1
   2396  4425		       a5 9c		      lda	temp1
   2397  4427		       85 a4		      sta	playfield
   2398  4429					      endif
   2399  4429				   noshiftdown
      0  4429					      RETURN
      1  4429				  -	      ifnconst	bankswitch
      2  4429				  -	      rts
      3  4429					      else
      4  4429		       4c dd ff 	      jmp	BS_return
      5  442c					      endif
   2401  442c							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2402  442c
   2403  442c							;standard routines needed for pretty much all games
   2404  442c							; just the random number generator is left - maybe we should remove this asm file altogether?
   2405  442c							; repositioning code and score pointer setup moved to overscan
   2406  442c							; read switches, joysticks now compiler generated (more efficient)
   2407  442c
   2408  442c				   randomize
   2409  442c		       a5 a2		      lda	rand
   2410  442e		       4a		      lsr
   2411  442f					      ifconst	rand16
   2412  442f		       26 e1		      rol	rand16
   2413  4431					      endif
   2414  4431		       90 02		      bcc	noeor
   2415  4433		       49 b4		      eor	#$B4
   2416  4435				   noeor
   2417  4435		       85 a2		      sta	rand
   2418  4437					      ifconst	rand16
   2419  4437		       45 e1		      eor	rand16
   2420  4439					      endif
      0  4439					      RETURN
      1  4439				  -	      ifnconst	bankswitch
      2  4439				  -	      rts
      3  4439					      else
      4  4439		       4c dd ff 	      jmp	BS_return
      5  443c					      endif
   2422  443c							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2423  443c
   2424  443c				   drawscreen
   2425  443c				  -	      ifconst	debugscore
   2426  443c				  -	      ldx	#14
   2427  443c				  -	      lda	INTIM	; display # cycles left in the score
   2428  443c				  -
   2429  443c				  -	      ifconst	mincycles
   2430  443c				  -	      lda	mincycles
   2431  443c				  -	      cmp	INTIM
   2432  443c				  -	      lda	mincycles
   2433  443c				  -	      bcc	nochange
   2434  443c				  -	      lda	INTIM
   2435  443c				  -	      sta	mincycles
   2436  443c				  -nochange
   2437  443c				  -	      endif
   2438  443c				  -
   2439  443c				  -			; cmp #$2B
   2440  443c				  -			; bcs no_cycles_left
   2441  443c				  -	      bmi	cycles_left
   2442  443c				  -	      ldx	#64
   2443  443c				  -	      eor	#$ff	;make negative
   2444  443c				  -cycles_left
   2445  443c				  -	      stx	scorecolor
   2446  443c				  -	      and	#$7f	; clear sign bit
   2447  443c				  -	      tax
   2448  443c				  -	      lda	scorebcd,x
   2449  443c				  -	      sta	score+2
   2450  443c				  -	      lda	scorebcd1,x
   2451  443c				  -	      sta	score+1
   2452  443c				  -	      jmp	done_debugscore
   2453  443c				  -scorebcd
   2454  443c				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   2455  443c				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   2456  443c				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   2457  443c				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   2458  443c				  -scorebcd1
   2459  443c				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   2460  443c				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   2461  443c				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   2462  443c				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   2463  443c				  -done_debugscore
   2464  443c					      endif
   2465  443c
   2466  443c				  -	      ifconst	debugcycles
   2467  443c				  -	      lda	INTIM	; if we go over, it mucks up the background color
   2468  443c				  -			; cmp #$2B
   2469  443c				  -			; BCC overscan
   2470  443c				  -	      bmi	overscan
   2471  443c				  -	      sta	COLUBK
   2472  443c				  -	      bcs	doneoverscan
   2473  443c					      endif
   2474  443c
   2475  443c				   overscan
   2476  443c				  -	      ifconst	interlaced
   2477  443c				  -	      PHP
   2478  443c				  -	      PLA
   2479  443c				  -	      EOR	#4	; flip interrupt bit
   2480  443c				  -	      PHA
   2481  443c				  -	      PLP
   2482  443c				  -	      AND	#4	; isolate the interrupt bit
   2483  443c				  -	      TAX		; save it for later
   2484  443c					      endif
   2485  443c
   2486  443c				   overscanloop
   2487  443c		       ad 84 02 	      lda	INTIM	;wait for sync
   2488  443f		       30 fb		      bmi	overscanloop
   2489  4441				   doneoverscan
   2490  4441
   2491  4441							;do VSYNC
   2492  4441
   2493  4441				  -	      ifconst	interlaced
   2494  4441				  -	      CPX	#4
   2495  4441				  -	      BNE	oddframevsync
   2496  4441					      endif
   2497  4441
   2498  4441		       a9 02		      lda	#2
   2499  4443		       85 02		      sta	WSYNC
   2500  4445		       85 00		      sta	VSYNC
   2501  4447		       85 02		      STA	WSYNC
   2502  4449		       85 02		      STA	WSYNC
   2503  444b		       4a		      lsr
   2504  444c		       85 02		      STA	WSYNC
   2505  444e		       85 00		      STA	VSYNC
   2506  4450		       85 01		      sta	VBLANK
   2507  4452				  -	      ifnconst	overscan_time
   2508  4452				  -	      lda	#37+128
   2509  4452					      else
   2510  4452		       a9 a5		      lda	#overscan_time+128
   2511  4454					      endif
   2512  4454		       8d 96 02 	      sta	TIM64T
   2513  4457
   2514  4457				  -	      ifconst	interlaced
   2515  4457				  -	      jmp	postsync
   2516  4457				  -
   2517  4457				  -oddframevsync
   2518  4457				  -	      sta	WSYNC
   2519  4457				  -
   2520  4457				  -	      LDA	($80,X)	; 11 waste
   2521  4457				  -	      LDA	($80,X)	; 11 waste
   2522  4457				  -	      LDA	($80,X)	; 11 waste
   2523  4457				  -
   2524  4457				  -	      lda	#2
   2525  4457				  -	      sta	VSYNC
   2526  4457				  -	      sta	WSYNC
   2527  4457				  -	      sta	WSYNC
   2528  4457				  -	      sta	WSYNC
   2529  4457				  -
   2530  4457				  -	      LDA	($80,X)	; 11 waste
   2531  4457				  -	      LDA	($80,X)	; 11 waste
   2532  4457				  -	      LDA	($80,X)	; 11 waste
   2533  4457				  -
   2534  4457				  -	      lda	#0
   2535  4457				  -	      sta	VSYNC
   2536  4457				  -	      sta	VBLANK
   2537  4457				  -	      ifnconst	overscan_time
   2538  4457				  -	      lda	#37+128
   2539  4457				  -	      else
   2540  4457				  -	      lda	#overscan_time+128
   2541  4457				  -	      endif
   2542  4457				  -	      sta	TIM64T
   2543  4457				  -
   2544  4457				  -postsync
   2545  4457					      endif
   2546  4457
   2547  4457				  -	      ifconst	legacy
   2548  4457				  -	      if	legacy < 100
   2549  4457				  -	      ldx	#4
   2550  4457				  -adjustloop
   2551  4457				  -	      lda	player0x,x
   2552  4457				  -	      sec
   2553  4457				  -	      sbc	#14	;?
   2554  4457				  -	      sta	player0x,x
   2555  4457				  -	      dex
   2556  4457				  -	      bpl	adjustloop
   2557  4457				  -	      endif
   2558  4457					      endif
   2559  4457				  -	      if	((<*)>$e9)&&((<*)<$fa)
   2560  4457				  -	      repeat	($fa-(<*))
   2561  4457				  -	      nop
   2562  4457				  -	      repend
   2563  4457					      endif
   2564  4457		       85 02		      sta	WSYNC
   2565  4459		       a2 04		      ldx	#4
      0  445b					      SLEEP	3
      1  445b				   .CYCLES    SET	3
      2  445b
      3  445b				  -	      IF	.CYCLES < 2
      4  445b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  445b				  -	      ERR
      6  445b					      ENDIF
      7  445b
      8  445b					      IF	.CYCLES & 1
      9  445b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  445b		       04 00		      nop	0
     11  445d				  -	      ELSE
     12  445d				  -	      bit	VSYNC
     13  445d					      ENDIF
     14  445d				   .CYCLES    SET	.CYCLES - 3
     15  445d					      ENDIF
     16  445d
     17  445d				  -	      REPEAT	.CYCLES / 2
     18  445d				  -	      nop
     19  445d					      REPEND
   2567  445d				   HorPosLoop		; 5
   2568  445d		       b5 80		      lda	player0x,X	;+4 9
   2569  445f		       38		      sec		;+2 11
   2570  4460				   DivideLoop
   2571  4460		       e9 0f		      sbc	#15
   2572  4462		       b0 fc		      bcs	DivideLoop	;+4 15
   2573  4464		       95 9c		      sta	temp1,X	;+4 19
   2574  4466		       95 10		      sta	RESP0,X	;+4 23
   2575  4468		       85 02		      sta	WSYNC
   2576  446a		       ca		      dex
   2577  446b		       10 f0		      bpl	HorPosLoop	;+5 5
   2578  446d							; 4
   2579  446d
   2580  446d		       a2 04		      ldx	#4
   2581  446f		       b4 9c		      ldy	temp1,X
   2582  4471		       b9 cd f3 	      lda	repostable-256,Y
   2583  4474		       95 20		      sta	HMP0,X	;+14 18
   2584  4476
   2585  4476		       ca		      dex
   2586  4477		       b4 9c		      ldy	temp1,X
   2587  4479		       b9 cd f3 	      lda	repostable-256,Y
   2588  447c		       95 20		      sta	HMP0,X	;+14 32
   2589  447e
   2590  447e		       ca		      dex
   2591  447f		       b4 9c		      ldy	temp1,X
   2592  4481		       b9 cd f3 	      lda	repostable-256,Y
   2593  4484		       95 20		      sta	HMP0,X	;+14 46
   2594  4486
   2595  4486		       ca		      dex
   2596  4487		       b4 9c		      ldy	temp1,X
   2597  4489		       b9 cd f3 	      lda	repostable-256,Y
   2598  448c		       95 20		      sta	HMP0,X	;+14 60
   2599  448e
   2600  448e		       ca		      dex
   2601  448f		       b4 9c		      ldy	temp1,X
   2602  4491		       b9 cd f3 	      lda	repostable-256,Y
   2603  4494		       95 20		      sta	HMP0,X	;+14 74
   2604  4496
   2605  4496		       85 02		      sta	WSYNC
   2606  4498
   2607  4498		       85 2a		      sta	HMOVE	;+3 3
   2608  449a
   2609  449a
   2610  449a				  -	      ifconst	legacy
   2611  449a				  -	      if	legacy < 100
   2612  449a				  -	      ldx	#4
   2613  449a				  -adjustloop2
   2614  449a				  -	      lda	player0x,x
   2615  449a				  -	      clc
   2616  449a				  -	      adc	#14	;?
   2617  449a				  -	      sta	player0x,x
   2618  449a				  -	      dex
   2619  449a				  -	      bpl	adjustloop2
   2620  449a				  -	      endif
   2621  449a					      endif
   2622  449a
   2623  449a
   2624  449a
   2625  449a
   2626  449a							;set score pointers
   2627  449a		       a7 95		      lax	score+2
   2628  449c		       20 cd f4 	      jsr	scorepointerset
   2629  449f		       84 9b		      sty	scorepointers+5
   2630  44a1		       86 98		      stx	scorepointers+2
   2631  44a3		       a7 94		      lax	score+1
   2632  44a5		       20 cd f4 	      jsr	scorepointerset
   2633  44a8		       84 9a		      sty	scorepointers+4
   2634  44aa		       86 97		      stx	scorepointers+1
   2635  44ac		       a7 93		      lax	score
   2636  44ae		       20 cd f4 	      jsr	scorepointerset
   2637  44b1		       84 99		      sty	scorepointers+3
   2638  44b3		       86 96		      stx	scorepointers
   2639  44b5
   2640  44b5				   vblk
   2641  44b5							; run possible vblank bB code
   2642  44b5				  -	      ifconst	vblank_bB_code
   2643  44b5				  -	      jsr	vblank_bB_code
   2644  44b5					      endif
   2645  44b5				   vblk2
   2646  44b5		       ad 84 02 	      LDA	INTIM
   2647  44b8		       30 fb		      bmi	vblk2
   2648  44ba		       4c 00 f0 	      jmp	kernel
   2649  44bd
   2650  44bd
   2651  44bd		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   2652  44c6		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   2653  44cd				   repostable
   2654  44cd
   2655  44cd				   scorepointerset
   2656  44cd		       29 0f		      and	#$0F
   2657  44cf		       0a		      asl
   2658  44d0		       0a		      asl
   2659  44d1		       0a		      asl
   2660  44d2		       69 74		      adc	#<scoretable
   2661  44d4		       a8		      tay
   2662  44d5		       8a		      txa
   2663  44d6							; and #$F0
   2664  44d6							; lsr
   2665  44d6		       4b f0		      asr	#$F0
   2666  44d8		       69 74		      adc	#<scoretable
   2667  44da		       aa		      tax
   2668  44db		       60		      rts
   2669  44dc							;bB.asm
   2670  44dc							; bB.asm file is split here
   2671  44dc				  -	      ifconst	pfres
   2672  44dc				  -	      if	(<*) > (254-pfres*pfwidth)
   2673  44dc				  -	      align	256
   2674  44dc				  -	      endif
   2675  44dc				  -	      if	(<*) < (136-pfres*pfwidth)
   2676  44dc				  -	      repeat	((136-pfres*pfwidth)-(<*))
   2677  44dc				  -	      .byte	0
   2678  44dc				  -	      repend
   2679  44dc				  -	      endif
   2680  44dc					      else
   2681  44dc					      if	(<*) > 206
   2682  4500		       00 00 00 00*	      align	256
   2683  4500					      endif
   2684  4500					      if	(<*) < 88
   2685  4500					      repeat	(88-(<*))
   2686  4500		       00		      .byte.b	0
   2685  4500					      repend
   2686  4501		       00		      .byte.b	0
   2685  4501					      repend
   2686  4502		       00		      .byte.b	0
   2685  4502					      repend
   2686  4503		       00		      .byte.b	0
   2685  4503					      repend
   2686  4504		       00		      .byte.b	0
   2685  4504					      repend
   2686  4505		       00		      .byte.b	0
   2685  4505					      repend
   2686  4506		       00		      .byte.b	0
   2685  4506					      repend
   2686  4507		       00		      .byte.b	0
   2685  4507					      repend
   2686  4508		       00		      .byte.b	0
   2685  4508					      repend
   2686  4509		       00		      .byte.b	0
   2685  4509					      repend
   2686  450a		       00		      .byte.b	0
   2685  450a					      repend
   2686  450b		       00		      .byte.b	0
   2685  450b					      repend
   2686  450c		       00		      .byte.b	0
   2685  450c					      repend
   2686  450d		       00		      .byte.b	0
   2685  450d					      repend
   2686  450e		       00		      .byte.b	0
   2685  450e					      repend
   2686  450f		       00		      .byte.b	0
   2685  450f					      repend
   2686  4510		       00		      .byte.b	0
   2685  4510					      repend
   2686  4511		       00		      .byte.b	0
   2685  4511					      repend
   2686  4512		       00		      .byte.b	0
   2685  4512					      repend
   2686  4513		       00		      .byte.b	0
   2685  4513					      repend
   2686  4514		       00		      .byte.b	0
   2685  4514					      repend
   2686  4515		       00		      .byte.b	0
   2685  4515					      repend
   2686  4516		       00		      .byte.b	0
   2685  4516					      repend
   2686  4517		       00		      .byte.b	0
   2685  4517					      repend
   2686  4518		       00		      .byte.b	0
   2685  4518					      repend
   2686  4519		       00		      .byte.b	0
   2685  4519					      repend
   2686  451a		       00		      .byte.b	0
   2685  451a					      repend
   2686  451b		       00		      .byte.b	0
   2685  451b					      repend
   2686  451c		       00		      .byte.b	0
   2685  451c					      repend
   2686  451d		       00		      .byte.b	0
   2685  451d					      repend
   2686  451e		       00		      .byte.b	0
   2685  451e					      repend
   2686  451f		       00		      .byte.b	0
   2685  451f					      repend
   2686  4520		       00		      .byte.b	0
   2685  4520					      repend
   2686  4521		       00		      .byte.b	0
   2685  4521					      repend
   2686  4522		       00		      .byte.b	0
   2685  4522					      repend
   2686  4523		       00		      .byte.b	0
   2685  4523					      repend
   2686  4524		       00		      .byte.b	0
   2685  4524					      repend
   2686  4525		       00		      .byte.b	0
   2685  4525					      repend
   2686  4526		       00		      .byte.b	0
   2685  4526					      repend
   2686  4527		       00		      .byte.b	0
   2685  4527					      repend
   2686  4528		       00		      .byte.b	0
   2685  4528					      repend
   2686  4529		       00		      .byte.b	0
   2685  4529					      repend
   2686  452a		       00		      .byte.b	0
   2685  452a					      repend
   2686  452b		       00		      .byte.b	0
   2685  452b					      repend
   2686  452c		       00		      .byte.b	0
   2685  452c					      repend
   2686  452d		       00		      .byte.b	0
   2685  452d					      repend
   2686  452e		       00		      .byte.b	0
   2685  452e					      repend
   2686  452f		       00		      .byte.b	0
   2685  452f					      repend
   2686  4530		       00		      .byte.b	0
   2685  4530					      repend
   2686  4531		       00		      .byte.b	0
   2685  4531					      repend
   2686  4532		       00		      .byte.b	0
   2685  4532					      repend
   2686  4533		       00		      .byte.b	0
   2685  4533					      repend
   2686  4534		       00		      .byte.b	0
   2685  4534					      repend
   2686  4535		       00		      .byte.b	0
   2685  4535					      repend
   2686  4536		       00		      .byte.b	0
   2685  4536					      repend
   2686  4537		       00		      .byte.b	0
   2685  4537					      repend
   2686  4538		       00		      .byte.b	0
   2685  4538					      repend
   2686  4539		       00		      .byte.b	0
   2685  4539					      repend
   2686  453a		       00		      .byte.b	0
   2685  453a					      repend
   2686  453b		       00		      .byte.b	0
   2685  453b					      repend
   2686  453c		       00		      .byte.b	0
   2685  453c					      repend
   2686  453d		       00		      .byte.b	0
   2685  453d					      repend
   2686  453e		       00		      .byte.b	0
   2685  453e					      repend
   2686  453f		       00		      .byte.b	0
   2685  453f					      repend
   2686  4540		       00		      .byte.b	0
   2685  4540					      repend
   2686  4541		       00		      .byte.b	0
   2685  4541					      repend
   2686  4542		       00		      .byte.b	0
   2685  4542					      repend
   2686  4543		       00		      .byte.b	0
   2685  4543					      repend
   2686  4544		       00		      .byte.b	0
   2685  4544					      repend
   2686  4545		       00		      .byte.b	0
   2685  4545					      repend
   2686  4546		       00		      .byte.b	0
   2685  4546					      repend
   2686  4547		       00		      .byte.b	0
   2685  4547					      repend
   2686  4548		       00		      .byte.b	0
   2685  4548					      repend
   2686  4549		       00		      .byte.b	0
   2685  4549					      repend
   2686  454a		       00		      .byte.b	0
   2685  454a					      repend
   2686  454b		       00		      .byte.b	0
   2685  454b					      repend
   2686  454c		       00		      .byte.b	0
   2685  454c					      repend
   2686  454d		       00		      .byte.b	0
   2685  454d					      repend
   2686  454e		       00		      .byte.b	0
   2685  454e					      repend
   2686  454f		       00		      .byte.b	0
   2685  454f					      repend
   2686  4550		       00		      .byte.b	0
   2685  4550					      repend
   2686  4551		       00		      .byte.b	0
   2685  4551					      repend
   2686  4552		       00		      .byte.b	0
   2685  4552					      repend
   2686  4553		       00		      .byte.b	0
   2685  4553					      repend
   2686  4554		       00		      .byte.b	0
   2685  4554					      repend
   2686  4555		       00		      .byte.b	0
   2685  4555					      repend
   2686  4556		       00		      .byte.b	0
   2685  4556					      repend
   2686  4557		       00		      .byte.b	0
   2687  4558					      repend
   2688  4558					      endif
   2689  4558					      endif
   2690  4558				   pfcolorlabel13
   2691  4558		       ca 00 00 00	      .byte.b	$CA ,0,0,0
   2692  455c		       ca 00 00 00	      .byte.b	$CA,0,0,0
   2693  4560		       ca 00 00 00	      .byte.b	$CA,0,0,0
   2694  4564		       ca 00 00 00	      .byte.b	$CA,0,0,0
   2695  4568		       ca 00 00 00	      .byte.b	$CA,0,0,0
   2696  456c		       ca 00 00 00	      .byte.b	$CA,0,0,0
   2697  4570		       ca 00 00 00	      .byte.b	$CA,0,0,0
   2698  4574		       ca 00 00 00	      .byte.b	$CA,0,0,0
   2699  4578		       ca 00 00 00	      .byte.b	$CA,0,0,0
   2700  457c		       ca 00 00 00	      .byte.b	$CA,0,0,0
   2701  4580				  -	      if	(<*) > (<(*+9))
   2702  4580				  -	      repeat	($100-<*)
   2703  4580				  -	      .byte	0
   2704  4580				  -	      repend
   2705  4580					      endif
   2706  4580				   playerL041_0
   2707  4580		       42		      .byte.b	%01000010
   2708  4581		       64		      .byte.b	%01100100
   2709  4582		       1c		      .byte.b	%00011100
   2710  4583		       3c		      .byte.b	%00111100
   2711  4584		       1c		      .byte.b	%00011100
   2712  4585		       18		      .byte.b	%00011000
   2713  4586		       0c		      .byte.b	%00001100
   2714  4587		       0c		      .byte.b	%00001100
   2715  4588		       0c		      .byte.b	%00001100
   2716  4589		       00		      .byte.b	%00000000
   2717  458a				  -	      if	(<*) > (<(*+9))
   2718  458a				  -	      repeat	($100-<*)
   2719  458a				  -	      .byte	0
   2720  458a				  -	      repend
   2721  458a					      endif
   2722  458a				   playerL042_1
   2723  458a		       f8		      .byte.b	%11111000
   2724  458b		       ff		      .byte.b	%11111111
   2725  458c		       f9		      .byte.b	%11111001
   2726  458d		       f9		      .byte.b	%11111001
   2727  458e		       f9		      .byte.b	%11111001
   2728  458f		       f9		      .byte.b	%11111001
   2729  4590		       f9		      .byte.b	%11111001
   2730  4591		       ff		      .byte.b	%11111111
   2731  4592		       fc		      .byte.b	%11111100
   2732  4593		       fc		      .byte.b	%11111100
   2733  4594				  -	      if	(<*) > (<(*+10))
   2734  4594				  -	      repeat	($100-<*)
   2735  4594				  -	      .byte	0
   2736  4594				  -	      repend
   2737  4594					      endif
   2738  4594				   playercolorL043_0
   2739  4594		       84		      .byte.b	$84	;
   2740  4595		       84		      .byte.b	$84	;
   2741  4596		       84		      .byte.b	$84	;
   2742  4597		       b4		      .byte.b	$B4	;
   2743  4598		       b4		      .byte.b	$B4	;
   2744  4599		       b4		      .byte.b	$B4	;
   2745  459a		       fe		      .byte.b	$FE	;
   2746  459b		       fe		      .byte.b	$FE	;
   2747  459c		       fe		      .byte.b	$FE	;
   2748  459d		       fe		      .byte.b	$FE	;
   2749  459e		       0e		      .byte.b	$0E	;
   2750  459f				  -	      if	(<*) > (<(*+8))
   2751  459f				  -	      repeat	($100-<*)
   2752  459f				  -	      .byte	0
   2753  459f				  -	      repend
   2754  459f					      endif
   2755  459f				   playercolorL044_1
   2756  459f		       1c		      .byte.b	$1C	;
   2757  45a0		       1c		      .byte.b	$1C	;
   2758  45a1		       1c		      .byte.b	$1C	;
   2759  45a2		       1c		      .byte.b	$1C	;
   2760  45a3		       1c		      .byte.b	$1C	;
   2761  45a4		       1c		      .byte.b	$1C	;
   2762  45a5		       1c		      .byte.b	$1C	;
   2763  45a6		       1c		      .byte.b	$1C	;
   2764  45a7		       1c		      .byte.b	$1C	;
   2765  45a8				  -	      if	(<*) > (<(*+9))
   2766  45a8				  -	      repeat	($100-<*)
   2767  45a8				  -	      .byte	0
   2768  45a8				  -	      repend
   2769  45a8					      endif
   2770  45a8				   player2then_0
   2771  45a8		       06		      .byte.b	%00000110
   2772  45a9		       64		      .byte.b	%01100100
   2773  45aa		       1c		      .byte.b	%00011100
   2774  45ab		       5a		      .byte.b	%01011010
   2775  45ac		       3c		      .byte.b	%00111100
   2776  45ad		       18		      .byte.b	%00011000
   2777  45ae		       0c		      .byte.b	%00001100
   2778  45af		       0c		      .byte.b	%00001100
   2779  45b0		       0c		      .byte.b	%00001100
   2780  45b1		       00		      .byte.b	%00000000
   2781  45b2				  -	      if	(<*) > (<(*+9))
   2782  45b2				  -	      repeat	($100-<*)
   2783  45b2				  -	      .byte	0
   2784  45b2				  -	      repend
   2785  45b2					      endif
   2786  45b2				   playercolor3then_0
   2787  45b2		       84		      .byte.b	$84	;
   2788  45b3		       84		      .byte.b	$84	;
   2789  45b4		       84		      .byte.b	$84	;
   2790  45b5		       b4		      .byte.b	$B4	;
   2791  45b6		       b4		      .byte.b	$B4	;
   2792  45b7		       b4		      .byte.b	$B4	;
   2793  45b8		       fe		      .byte.b	$FE	;
   2794  45b9		       fe		      .byte.b	$FE	;
   2795  45ba		       fe		      .byte.b	$FE	;
   2796  45bb		       fe		      .byte.b	$FE	;
   2797  45bc				  -	      if	(<*) > (<(*+9))
   2798  45bc				  -	      repeat	($100-<*)
   2799  45bc				  -	      .byte	0
   2800  45bc				  -	      repend
   2801  45bc					      endif
   2802  45bc				   player4then_0
   2803  45bc		       18		      .byte.b	%00011000
   2804  45bd		       38		      .byte.b	%00111000
   2805  45be		       18		      .byte.b	%00011000
   2806  45bf		       18		      .byte.b	%00011000
   2807  45c0		       18		      .byte.b	%00011000
   2808  45c1		       18		      .byte.b	%00011000
   2809  45c2		       0c		      .byte.b	%00001100
   2810  45c3		       0c		      .byte.b	%00001100
   2811  45c4		       0c		      .byte.b	%00001100
   2812  45c5		       00		      .byte.b	%00000000
   2813  45c6				  -	      if	(<*) > (<(*+9))
   2814  45c6				  -	      repeat	($100-<*)
   2815  45c6				  -	      .byte	0
   2816  45c6				  -	      repend
   2817  45c6					      endif
   2818  45c6				   playercolor5then_0
   2819  45c6		       84		      .byte.b	$84	;
   2820  45c7		       84		      .byte.b	$84	;
   2821  45c8		       84		      .byte.b	$84	;
   2822  45c9		       b4		      .byte.b	$B4	;
   2823  45ca		       b4		      .byte.b	$B4	;
   2824  45cb		       b4		      .byte.b	$B4	;
   2825  45cc		       fe		      .byte.b	$FE	;
   2826  45cd		       fe		      .byte.b	$FE	;
   2827  45ce		       fe		      .byte.b	$FE	;
   2828  45cf		       fe		      .byte.b	$FE	;
   2829  45d0				  -	      if	(<*) > (<(*+9))
   2830  45d0				  -	      repeat	($100-<*)
   2831  45d0				  -	      .byte	0
   2832  45d0				  -	      repend
   2833  45d0					      endif
   2834  45d0				   player6then_0
   2835  45d0		       40		      .byte.b	%01000000
   2836  45d1		       50		      .byte.b	%01010000
   2837  45d2		       48		      .byte.b	%01001000
   2838  45d3		       38		      .byte.b	%00111000
   2839  45d4		       78		      .byte.b	%01111000
   2840  45d5		       38		      .byte.b	%00111000
   2841  45d6		       30		      .byte.b	%00110000
   2842  45d7		       18		      .byte.b	%00011000
   2843  45d8		       18		      .byte.b	%00011000
   2844  45d9		       18		      .byte.b	%00011000
   2845  45da				  -	      if	(<*) > (<(*+9))
   2846  45da				  -	      repeat	($100-<*)
   2847  45da				  -	      .byte	0
   2848  45da				  -	      repend
   2849  45da					      endif
   2850  45da				   playercolor7then_0
   2851  45da		       84		      .byte.b	$84	;
   2852  45db		       84		      .byte.b	$84	;
   2853  45dc		       84		      .byte.b	$84	;
   2854  45dd		       b4		      .byte.b	$B4	;
   2855  45de		       b4		      .byte.b	$B4	;
   2856  45df		       b4		      .byte.b	$B4	;
   2857  45e0		       fe		      .byte.b	$FE	;
   2858  45e1		       fe		      .byte.b	$FE	;
   2859  45e2		       fe		      .byte.b	$FE	;
   2860  45e3		       fe		      .byte.b	$FE	;
   2861  45e4					      if	ECHOFIRST
      2448 bytes of ROM space left in bank 4
   2862  45e4					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   2863  45e4					      endif
   2864  45e4		       00 01	   ECHOFIRST  =	1
   2865  45e4
   2866  45e4
   2867  45e4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2868  45e4
   2869  45e4							; feel free to modify the score graphics - just keep each digit 8 high
   2870  45e4							; and keep the conditional compilation stuff intact
   2871  45e4				  -	      ifconst	ROM2k
   2872  45e4				  -	      ORG	$F7AC-8
   2873  45e4					      else
   2874  45e4					      ifconst	bankswitch
   2875  45e4				  -	      if	bankswitch == 8
   2876  45e4				  -	      ORG	$2F94-bscode_length
   2877  45e4				  -	      RORG	$FF94-bscode_length
   2878  45e4					      endif
   2879  45e4					      if	bankswitch == 16
   2880  4f74					      ORG	$4F94-bscode_length
   2881  4f74					      RORG	$FF94-bscode_length
   2882  4f74					      endif
   2883  4f74				  -	      if	bankswitch == 32
   2884  4f74				  -	      ORG	$8F94-bscode_length
   2885  4f74				  -	      RORG	$FF94-bscode_length
   2886  4f74					      endif
   2887  4f74				  -	      if	bankswitch == 64
   2888  4f74				  -	      ORG	$10F80-bscode_length
   2889  4f74				  -	      RORG	$1FF80-bscode_length
   2890  4f74					      endif
   2891  4f74				  -	      else
   2892  4f74				  -	      ORG	$FF9C
   2893  4f74					      endif
   2894  4f74					      endif
   2895  4f74
   2896  4f74							; font equates
   2897  4f74		       00 01	   .21stcentury =	1
   2898  4f74		       00 02	   alarmclock =	2
   2899  4f74		       00 03	   handwritten =	3
   2900  4f74		       00 04	   interrupted =	4
   2901  4f74		       00 05	   retroputer =	5
   2902  4f74		       00 06	   whimsey    =	6
   2903  4f74		       00 07	   tiny       =	7
   2904  4f74		       00 08	   hex	      =	8
   2905  4f74
   2906  4f74				  -	      ifconst	font
   2907  4f74				  -	      if	font == hex
   2908  4f74				  -	      ORG	. - 48
   2909  4f74				  -	      endif
   2910  4f74					      endif
   2911  4f74
   2912  4f74				   scoretable
   2913  4f74
   2914  4f74				  -	      ifconst	font
   2915  4f74				  -	      if	font == .21stcentury
   2916  4f74				  -	      include	"score_graphics.asm.21stcentury"
   2917  4f74				  -	      endif
   2918  4f74				  -	      if	font == alarmclock
   2919  4f74				  -	      include	"score_graphics.asm.alarmclock"
   2920  4f74				  -	      endif
   2921  4f74				  -	      if	font == handwritten
   2922  4f74				  -	      include	"score_graphics.asm.handwritten"
   2923  4f74				  -	      endif
   2924  4f74				  -	      if	font == interrupted
   2925  4f74				  -	      include	"score_graphics.asm.interrupted"
   2926  4f74				  -	      endif
   2927  4f74				  -	      if	font == retroputer
   2928  4f74				  -	      include	"score_graphics.asm.retroputer"
   2929  4f74				  -	      endif
   2930  4f74				  -	      if	font == whimsey
   2931  4f74				  -	      include	"score_graphics.asm.whimsey"
   2932  4f74				  -	      endif
   2933  4f74				  -	      if	font == tiny
   2934  4f74				  -	      include	"score_graphics.asm.tiny"
   2935  4f74				  -	      endif
   2936  4f74				  -	      if	font == hex
   2937  4f74				  -	      include	"score_graphics.asm.hex"
   2938  4f74				  -	      endif
   2939  4f74					      else		; default font
   2940  4f74
   2941  4f74		       3c		      .byte.b	%00111100
   2942  4f75		       66		      .byte.b	%01100110
   2943  4f76		       66		      .byte.b	%01100110
   2944  4f77		       66		      .byte.b	%01100110
   2945  4f78		       66		      .byte.b	%01100110
   2946  4f79		       66		      .byte.b	%01100110
   2947  4f7a		       66		      .byte.b	%01100110
   2948  4f7b		       3c		      .byte.b	%00111100
   2949  4f7c
   2950  4f7c		       7e		      .byte.b	%01111110
   2951  4f7d		       18		      .byte.b	%00011000
   2952  4f7e		       18		      .byte.b	%00011000
   2953  4f7f		       18		      .byte.b	%00011000
   2954  4f80		       18		      .byte.b	%00011000
   2955  4f81		       38		      .byte.b	%00111000
   2956  4f82		       18		      .byte.b	%00011000
   2957  4f83		       08		      .byte.b	%00001000
   2958  4f84
   2959  4f84		       7e		      .byte.b	%01111110
   2960  4f85		       60		      .byte.b	%01100000
   2961  4f86		       60		      .byte.b	%01100000
   2962  4f87		       3c		      .byte.b	%00111100
   2963  4f88		       06		      .byte.b	%00000110
   2964  4f89		       06		      .byte.b	%00000110
   2965  4f8a		       46		      .byte.b	%01000110
   2966  4f8b		       3c		      .byte.b	%00111100
   2967  4f8c
   2968  4f8c		       3c		      .byte.b	%00111100
   2969  4f8d		       46		      .byte.b	%01000110
   2970  4f8e		       06		      .byte.b	%00000110
   2971  4f8f		       06		      .byte.b	%00000110
   2972  4f90		       1c		      .byte.b	%00011100
   2973  4f91		       06		      .byte.b	%00000110
   2974  4f92		       46		      .byte.b	%01000110
   2975  4f93		       3c		      .byte.b	%00111100
   2976  4f94
   2977  4f94		       0c		      .byte.b	%00001100
   2978  4f95		       0c		      .byte.b	%00001100
   2979  4f96		       7e		      .byte.b	%01111110
   2980  4f97		       4c		      .byte.b	%01001100
   2981  4f98		       4c		      .byte.b	%01001100
   2982  4f99		       2c		      .byte.b	%00101100
   2983  4f9a		       1c		      .byte.b	%00011100
   2984  4f9b		       0c		      .byte.b	%00001100
   2985  4f9c
   2986  4f9c		       3c		      .byte.b	%00111100
   2987  4f9d		       46		      .byte.b	%01000110
   2988  4f9e		       06		      .byte.b	%00000110
   2989  4f9f		       06		      .byte.b	%00000110
   2990  4fa0		       3c		      .byte.b	%00111100
   2991  4fa1		       60		      .byte.b	%01100000
   2992  4fa2		       60		      .byte.b	%01100000
   2993  4fa3		       7e		      .byte.b	%01111110
   2994  4fa4
   2995  4fa4		       3c		      .byte.b	%00111100
   2996  4fa5		       66		      .byte.b	%01100110
   2997  4fa6		       66		      .byte.b	%01100110
   2998  4fa7		       66		      .byte.b	%01100110
   2999  4fa8		       7c		      .byte.b	%01111100
   3000  4fa9		       60		      .byte.b	%01100000
   3001  4faa		       62		      .byte.b	%01100010
   3002  4fab		       3c		      .byte.b	%00111100
   3003  4fac
   3004  4fac		       30		      .byte.b	%00110000
   3005  4fad		       30		      .byte.b	%00110000
   3006  4fae		       30		      .byte.b	%00110000
   3007  4faf		       18		      .byte.b	%00011000
   3008  4fb0		       0c		      .byte.b	%00001100
   3009  4fb1		       06		      .byte.b	%00000110
   3010  4fb2		       42		      .byte.b	%01000010
   3011  4fb3		       3e		      .byte.b	%00111110
   3012  4fb4
   3013  4fb4		       3c		      .byte.b	%00111100
   3014  4fb5		       66		      .byte.b	%01100110
   3015  4fb6		       66		      .byte.b	%01100110
   3016  4fb7		       66		      .byte.b	%01100110
   3017  4fb8		       3c		      .byte.b	%00111100
   3018  4fb9		       66		      .byte.b	%01100110
   3019  4fba		       66		      .byte.b	%01100110
   3020  4fbb		       3c		      .byte.b	%00111100
   3021  4fbc
   3022  4fbc		       3c		      .byte.b	%00111100
   3023  4fbd		       46		      .byte.b	%01000110
   3024  4fbe		       06		      .byte.b	%00000110
   3025  4fbf		       3e		      .byte.b	%00111110
   3026  4fc0		       66		      .byte.b	%01100110
   3027  4fc1		       66		      .byte.b	%01100110
   3028  4fc2		       66		      .byte.b	%01100110
   3029  4fc3		       3c		      .byte.b	%00111100
   3030  4fc4
   3031  4fc4					      ifnconst	DPC_kernel_options
   3032  4fc4
   3033  4fc4		       00		      .byte.b	%00000000
   3034  4fc5		       00		      .byte.b	%00000000
   3035  4fc6		       00		      .byte.b	%00000000
   3036  4fc7		       00		      .byte.b	%00000000
   3037  4fc8		       00		      .byte.b	%00000000
   3038  4fc9		       00		      .byte.b	%00000000
   3039  4fca		       00		      .byte.b	%00000000
   3040  4fcb		       00		      .byte.b	%00000000
   3041  4fcc
   3042  4fcc					      endif
   3043  4fcc
   3044  4fcc					      endif
   3045  4fcc
   3046  4fcc				  -	      ifconst	ROM2k
   3047  4fcc				  -	      ORG	$F7FC
   3048  4fcc					      else
   3049  4fcc					      ifconst	bankswitch
   3050  4fcc				  -	      if	bankswitch == 8
   3051  4fcc				  -	      ORG	$2FF4-bscode_length
   3052  4fcc				  -	      RORG	$FFF4-bscode_length
   3053  4fcc					      endif
   3054  4fcc					      if	bankswitch == 16
   3055  4fd4					      ORG	$4FF4-bscode_length
   3056  4fd4					      RORG	$FFF4-bscode_length
   3057  4fd4					      endif
   3058  4fd4				  -	      if	bankswitch == 32
   3059  4fd4				  -	      ORG	$8FF4-bscode_length
   3060  4fd4				  -	      RORG	$FFF4-bscode_length
   3061  4fd4					      endif
   3062  4fd4				  -	      if	bankswitch == 64
   3063  4fd4				  -	      ORG	$10FE0-bscode_length
   3064  4fd4				  -	      RORG	$1FFE0-bscode_length
   3065  4fd4					      endif
   3066  4fd4				  -	      else
   3067  4fd4				  -	      ORG	$FFFC
   3068  4fd4					      endif
   3069  4fd4					      endif
   3070  4fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3071  4fd4
   3072  4fd4							; every bank has this stuff at the same place
   3073  4fd4							; this code can switch to/from any bank at any entry point
   3074  4fd4							; and can preserve register values
   3075  4fd4							; note: lines not starting with a space are not placed in all banks
   3076  4fd4							;
   3077  4fd4							; line below tells the compiler how long this is - do not remove
   3078  4fd4							;size=32
   3079  4fd4
   3080  4fd4				   begin_bscode
   3081  4fd4		       a2 ff		      ldx	#$ff
   3082  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3083  4fd6				  -	      stx	FASTFETCH
   3084  4fd6					      endif
   3085  4fd6		       9a		      txs
   3086  4fd7				  -	      if	bankswitch == 64
   3087  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3088  4fd7					      else
   3089  4fd7		       a9 f2		      lda	#>(start-1)
   3090  4fd9					      endif
   3091  4fd9		       48		      pha
   3092  4fda		       a9 51		      lda	#<(start-1)
   3093  4fdc		       48		      pha
   3094  4fdd
   3095  4fdd				   BS_return
   3096  4fdd		       48		      pha
   3097  4fde		       8a		      txa
   3098  4fdf		       48		      pha
   3099  4fe0		       ba		      tsx
   3100  4fe1
   3101  4fe1					      if	bankswitch != 64
   3102  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   3103  4fe3
   3104  4fe3		       2a		      rol
   3105  4fe4		       2a		      rol
   3106  4fe5		       2a		      rol
   3107  4fe6		       2a		      rol
   3108  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3109  4fe9		       aa		      tax
   3110  4fea		       e8		      inx
   3111  4feb				  -	      else
   3112  4feb				  -	      lda	4,x	; get high byte of return address
   3113  4feb				  -	      tay
   3114  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3115  4feb				  -	      sta	4,x
   3116  4feb				  -	      tya
   3117  4feb				  -	      lsr
   3118  4feb				  -	      lsr
   3119  4feb				  -	      lsr
   3120  4feb				  -	      lsr
   3121  4feb				  -	      tax
   3122  4feb				  -	      inx
   3123  4feb					      endif
   3124  4feb
   3125  4feb				   BS_jsr
   3126  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   3127  4fee		       68		      pla
   3128  4fef		       aa		      tax
   3129  4ff0		       68		      pla
   3130  4ff1		       60		      rts
   3131  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3132  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3133  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3134  4ff2					      endif
   3135  4ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3136  4ff2
   3137  4ff2					      ifconst	bankswitch
   3138  4ff2				  -	      if	bankswitch == 8
   3139  4ff2				  -	      ORG	$2FFC
   3140  4ff2				  -	      RORG	$FFFC
   3141  4ff2					      endif
   3142  4ff2					      if	bankswitch == 16
   3143  4ffc					      ORG	$4FFC
   3144  4ffc					      RORG	$FFFC
   3145  4ffc					      endif
   3146  4ffc				  -	      if	bankswitch == 32
   3147  4ffc				  -	      ORG	$8FFC
   3148  4ffc				  -	      RORG	$FFFC
   3149  4ffc					      endif
   3150  4ffc				  -	      if	bankswitch == 64
   3151  4ffc				  -	      ORG	$10FF0
   3152  4ffc				  -	      RORG	$1FFF0
   3153  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3154  4ffc				  -	      ORG	$10FF8
   3155  4ffc				  -	      RORG	$1FFF8
   3156  4ffc				  -	      ifconst	superchip
   3157  4ffc				  -	      .byte	"E","F","S","C"
   3158  4ffc				  -	      else
   3159  4ffc				  -	      .byte	"E","F","E","F"
   3160  4ffc				  -	      endif
   3161  4ffc				  -	      ORG	$10FFC
   3162  4ffc				  -	      RORG	$1FFFC
   3163  4ffc					      endif
   3164  4ffc				  -	      else
   3165  4ffc				  -	      ifconst	ROM2k
   3166  4ffc				  -	      ORG	$F7FC
   3167  4ffc				  -	      else
   3168  4ffc				  -	      ORG	$FFFC
   3169  4ffc				  -	      endif
   3170  4ffc					      endif
   3171  4ffc		       52 f2		      .word.w	(start & $ffff)
   3172  4ffe		       52 f2		      .word.w	(start & $ffff)
